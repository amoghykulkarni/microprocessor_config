
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001540  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800173c  0800173c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800173c  0800173c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800173c  0800173c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800173c  0800173c  0001173c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001740  08001740  00011740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001750  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001750  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00004840  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000562b  00000000  00000000  0002487c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000efa  00000000  00000000  00029ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000570  00000000  00000000  0002ada8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000fa0d6  00000000  00000000  0002b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000004c8  00000000  00000000  001253f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00028c27  00000000  00000000  001258b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001388  00000000  00000000  0014e55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080016e4 	.word	0x080016e4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080016e4 	.word	0x080016e4

080001fc <kalman>:




kalman:
	PUSH {R0-R5}
 80001fc:	b43f      	push	{r0, r1, r2, r3, r4, r5}
	VPUSH.F32 {S0-S5}
 80001fe:	ed2d 0a06 	vpush	{s0-s5}
	MOV R3, R0
 8000202:	1c03      	adds	r3, r0, #0
	MOV R4, R1
 8000204:	1c0c      	adds	r4, r1, #0
	VLDR.F32 S1, [R3]
 8000206:	edd3 0a00 	vldr	s1, [r3]
	VLDR.F32 S2, [R3,#4]
 800020a:	ed93 1a01 	vldr	s2, [r3, #4]
	VLDR.F32 S3, [R3,#8]
 800020e:	edd3 1a02 	vldr	s3, [r3, #8]
	VLDR.F32 S4, [R3, #12]
 8000212:	ed93 2a03 	vldr	s4, [r3, #12]
	VLDR.F32 S5, [R3, #16]
 8000216:	edd3 2a04 	vldr	s5, [r3, #16]

0800021a <update>:
	// VLDR.F32 S0, [R4]

update:

	VADD.F32 S4, S4, S1 // P = P + Q
 800021a:	ee32 2a20 	vadd.f32	s4, s4, s1
	VADD.F32 S6, S4, S2 // TEMP = P+R
 800021e:	ee32 3a01 	vadd.f32	s6, s4, s2
	VDIV.F32 S5, S4, S6 // K = P/TEMP
 8000222:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.F32 S7, S0, S3 // MEASUREMENT - X
 8000226:	ee70 3a61 	vsub.f32	s7, s0, s3
	VMUL.F32 S8, S5, S7 // K * (MEASUREMENT - X)
 800022a:	ee22 4aa3 	vmul.f32	s8, s5, s7
	VADD.F32 S3, S3, S8 // X = X + K*(MEASUREMENT - X)
 800022e:	ee71 1a84 	vadd.f32	s3, s3, s8
	VMUL.F32 S9, S4, S5 //PK
 8000232:	ee62 4a22 	vmul.f32	s9, s4, s5
	VSUB.F32 S4, S4, S9 // P - PK = P
 8000236:	ee32 2a64 	vsub.f32	s4, s4, s9

0800023a <done>:


done:
	// VSTR.F32 S3, [R1]

	VSTR.F32 S1, [R3]
 800023a:	edc3 0a00 	vstr	s1, [r3]
	VSTR.F32 S2, [R3, #4]
 800023e:	ed83 1a01 	vstr	s2, [r3, #4]
	VSTR.F32 S3, [R3, #8]
 8000242:	edc3 1a02 	vstr	s3, [r3, #8]
	VSTR.F32 S4, [R3, #12]
 8000246:	ed83 2a03 	vstr	s4, [r3, #12]
	VSTR.F32 S5, [R3, #16]
 800024a:	edc3 2a04 	vstr	s5, [r3, #16]

	// POP {R0-R5}
	// VPOP.F32 {S0-S5}
	BX LR
 800024e:	4770      	bx	lr

08000250 <main>:
  */



int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b08c      	sub	sp, #48	; 0x30
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 f95c 	bl	8000512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f833 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f883 	bl	8000368 <MX_GPIO_Init>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		float q = 0.1;
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <main+0x6c>)
 8000264:	62bb      	str	r3, [r7, #40]	; 0x28
		float r = 0.1;
 8000266:	4b15      	ldr	r3, [pc, #84]	; (80002bc <main+0x6c>)
 8000268:	627b      	str	r3, [r7, #36]	; 0x24
		float x = 5.0;
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <main+0x70>)
 800026c:	623b      	str	r3, [r7, #32]
		float p = 0.1;
 800026e:	4b13      	ldr	r3, [pc, #76]	; (80002bc <main+0x6c>)
 8000270:	61fb      	str	r3, [r7, #28]
		float k = 0.0;
 8000272:	f04f 0300 	mov.w	r3, #0
 8000276:	61bb      	str	r3, [r7, #24]
		float measurement;

	  msg.q = q;
 8000278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800027a:	603b      	str	r3, [r7, #0]
	  msg.r = r;
 800027c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027e:	607b      	str	r3, [r7, #4]
	  msg.x = x;
 8000280:	6a3b      	ldr	r3, [r7, #32]
 8000282:	60bb      	str	r3, [r7, #8]
	  msg.p = p;
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	60fb      	str	r3, [r7, #12]
	  msg.k = k;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	613b      	str	r3, [r7, #16]


	  for(int i = 0; i<5; i++){
 800028c:	2300      	movs	r3, #0
 800028e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000290:	e00f      	b.n	80002b2 <main+0x62>
		  measurement = i;
 8000292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000294:	ee07 3a90 	vmov	s15, r3
 8000298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800029c:	edc7 7a05 	vstr	s15, [r7, #20]
		  kalman(&msg, measurement);
 80002a0:	463b      	mov	r3, r7
 80002a2:	ed97 0a05 	vldr	s0, [r7, #20]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffa8 	bl	80001fc <kalman>
	  for(int i = 0; i<5; i++){
 80002ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ae:	3301      	adds	r3, #1
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	ddec      	ble.n	8000292 <main+0x42>
  {
 80002b8:	e7d3      	b.n	8000262 <main+0x12>
 80002ba:	bf00      	nop
 80002bc:	3dcccccd 	.word	0x3dcccccd
 80002c0:	40a00000 	.word	0x40a00000

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b096      	sub	sp, #88	; 0x58
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2244      	movs	r2, #68	; 0x44
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f9fe 	bl	80016d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	463b      	mov	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 fa8e 	bl	8000808 <HAL_PWREx_ControlVoltageScaling>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80002f2:	f000 f85d 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f6:	2310      	movs	r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000302:	2360      	movs	r3, #96	; 0x60
 8000304:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000306:	2302      	movs	r3, #2
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800030a:	2301      	movs	r3, #1
 800030c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800030e:	2301      	movs	r3, #1
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000312:	233c      	movs	r3, #60	; 0x3c
 8000314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800031a:	2302      	movs	r3, #2
 800031c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031e:	2302      	movs	r3, #2
 8000320:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fb12 	bl	8000950 <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000332:	f000 f83d 	bl	80003b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	230f      	movs	r3, #15
 8000338:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033a:	2303      	movs	r3, #3
 800033c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800034a:	463b      	mov	r3, r7
 800034c:	2105      	movs	r1, #5
 800034e:	4618      	mov	r0, r3
 8000350:	f000 ff24 	bl	800119c <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800035a:	f000 f829 	bl	80003b0 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3758      	adds	r7, #88	; 0x58
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_GPIO_Init+0x44>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <MX_GPIO_Init+0x44>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_GPIO_Init+0x44>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_GPIO_Init+0x44>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <MX_GPIO_Init+0x44>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_GPIO_Init+0x44>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	603b      	str	r3, [r7, #0]
 800039c:	683b      	ldr	r3, [r7, #0]

}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <Error_Handler+0x6>

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <HAL_MspInit+0x44>)
 80003c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <HAL_MspInit+0x44>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6613      	str	r3, [r2, #96]	; 0x60
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <HAL_MspInit+0x44>)
 80003cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <HAL_MspInit+0x44>)
 80003d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <HAL_MspInit+0x44>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	6593      	str	r3, [r2, #88]	; 0x58
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <HAL_MspInit+0x44>)
 80003e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <NMI_Handler+0x4>

08000406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <HardFault_Handler+0x4>

0800040c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <MemManage_Handler+0x4>

08000412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler+0x4>

08000418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <UsageFault_Handler+0x4>

0800041e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044c:	f000 f8b6 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}

08000454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <SystemInit+0x64>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <SystemInit+0x64>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <SystemInit+0x68>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <SystemInit+0x68>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x68>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <SystemInit+0x68>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <SystemInit+0x68>)
 8000480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <SystemInit+0x68>)
 800048c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <SystemInit+0x68>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <SystemInit+0x68>)
 8000498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <SystemInit+0x68>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <SystemInit+0x64>)
 80004a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004aa:	609a      	str	r2, [r3, #8]
#endif
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	40021000 	.word	0x40021000

080004c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c4:	f7ff ffc6 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004ca:	e003      	b.n	80004d4 <LoopCopyDataInit>

080004cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004d2:	3104      	adds	r1, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80004d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004dc:	d3f6      	bcc.n	80004cc <CopyDataInit>
	ldr	r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004e0:	e002      	b.n	80004e8 <LoopFillZerobss>

080004e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004e4:	f842 3b04 	str.w	r3, [r2], #4

080004e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <LoopForever+0x16>)
	cmp	r2, r3
 80004ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004ec:	d3f9      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ee:	f001 f8cd 	bl	800168c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f2:	f7ff fead 	bl	8000250 <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80004fc:	08001744 	.word	0x08001744
	ldr	r0, =_sdata
 8000500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000504:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000508:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800050c:	2000002c 	.word	0x2000002c

08000510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_IRQHandler>

08000512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f91f 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f80e 	bl	8000544 <HAL_InitTick>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e001      	b.n	8000538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000534:	f7ff ff40 	bl	80003b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000538:	79fb      	ldrb	r3, [r7, #7]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d023      	beq.n	80005a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_InitTick+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_InitTick+0x6c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f91d 	bl	80007ae <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d809      	bhi.n	8000594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000588:	f000 f8f5 	bl	8000776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x74>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e007      	b.n	80005a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e004      	b.n	80005a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e001      	b.n	80005a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000028 	.word	0x20000028

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	; (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	; (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000740:	f7ff ff8e 	bl	8000660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff47 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5c 	bl	8000644 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff8e 	bl	80006b4 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_PWREx_GetVoltageRange+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d8:	d102      	bne.n	80007e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	e00b      	b.n	80007f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_PWREx_GetVoltageRange+0x3c>)
 80007e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007ee:	d102      	bne.n	80007f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80007f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f4:	e000      	b.n	80007f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80007f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40007000 	.word	0x40007000

08000808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d141      	bne.n	800089a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000816:	4b4b      	ldr	r3, [pc, #300]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800081e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000822:	d131      	bne.n	8000888 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000824:	4b47      	ldr	r3, [pc, #284]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800082a:	4a46      	ldr	r2, [pc, #280]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800082c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800083c:	4a41      	ldr	r2, [pc, #260]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000844:	4b40      	ldr	r3, [pc, #256]	; (8000948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2232      	movs	r2, #50	; 0x32
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	4a3f      	ldr	r2, [pc, #252]	; (800094c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	0c9b      	lsrs	r3, r3, #18
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800085a:	e002      	b.n	8000862 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3b01      	subs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800086a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800086e:	d102      	bne.n	8000876 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f2      	bne.n	800085c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000876:	4b33      	ldr	r3, [pc, #204]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800087e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000882:	d158      	bne.n	8000936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000884:	2303      	movs	r3, #3
 8000886:	e057      	b.n	8000938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800088a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800088e:	4a2d      	ldr	r2, [pc, #180]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000898:	e04d      	b.n	8000936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a0:	d141      	bne.n	8000926 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ae:	d131      	bne.n	8000914 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008c8:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2232      	movs	r2, #50	; 0x32
 80008d6:	fb02 f303 	mul.w	r3, r2, r3
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80008dc:	fba2 2303 	umull	r2, r3, r2, r3
 80008e0:	0c9b      	lsrs	r3, r3, #18
 80008e2:	3301      	adds	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008e6:	e002      	b.n	80008ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008fa:	d102      	bne.n	8000902 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f2      	bne.n	80008e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800090a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800090e:	d112      	bne.n	8000936 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000910:	2303      	movs	r3, #3
 8000912:	e011      	b.n	8000938 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800091c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000924:	e007      	b.n	8000936 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000930:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000934:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40007000 	.word	0x40007000
 8000948:	20000000 	.word	0x20000000
 800094c:	431bde83 	.word	0x431bde83

08000950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	f000 bc16 	b.w	8001190 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000964:	4ba0      	ldr	r3, [pc, #640]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	f003 030c 	and.w	r3, r3, #12
 800096c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800096e:	4b9e      	ldr	r3, [pc, #632]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 80e4 	beq.w	8000b4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d007      	beq.n	800099c <HAL_RCC_OscConfig+0x4c>
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2b0c      	cmp	r3, #12
 8000990:	f040 808b 	bne.w	8000aaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	2b01      	cmp	r3, #1
 8000998:	f040 8087 	bne.w	8000aaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800099c:	4b92      	ldr	r3, [pc, #584]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <HAL_RCC_OscConfig+0x64>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e3ed      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a1a      	ldr	r2, [r3, #32]
 80009b8:	4b8b      	ldr	r3, [pc, #556]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d004      	beq.n	80009ce <HAL_RCC_OscConfig+0x7e>
 80009c4:	4b88      	ldr	r3, [pc, #544]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009cc:	e005      	b.n	80009da <HAL_RCC_OscConfig+0x8a>
 80009ce:	4b86      	ldr	r3, [pc, #536]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 80009d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009d4:	091b      	lsrs	r3, r3, #4
 80009d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009da:	4293      	cmp	r3, r2
 80009dc:	d223      	bcs.n	8000a26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fd90 	bl	8001508 <RCC_SetFlashLatencyFromMSIRange>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e3ce      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009f2:	4b7d      	ldr	r3, [pc, #500]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a7c      	ldr	r2, [pc, #496]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	4b7a      	ldr	r3, [pc, #488]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	4977      	ldr	r1, [pc, #476]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a10:	4b75      	ldr	r3, [pc, #468]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	4972      	ldr	r1, [pc, #456]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a20:	4313      	orrs	r3, r2
 8000a22:	604b      	str	r3, [r1, #4]
 8000a24:	e025      	b.n	8000a72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a26:	4b70      	ldr	r3, [pc, #448]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a6f      	ldr	r2, [pc, #444]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6013      	str	r3, [r2, #0]
 8000a32:	4b6d      	ldr	r3, [pc, #436]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	496a      	ldr	r1, [pc, #424]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a40:	4313      	orrs	r3, r2
 8000a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a44:	4b68      	ldr	r3, [pc, #416]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	4965      	ldr	r1, [pc, #404]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fd50 	bl	8001508 <RCC_SetFlashLatencyFromMSIRange>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e38e      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a72:	f000 fcbf 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 8000a76:	4601      	mov	r1, r0
 8000a78:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	4a5a      	ldr	r2, [pc, #360]	; (8000bec <HAL_RCC_OscConfig+0x29c>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	f003 031f 	and.w	r3, r3, #31
 8000a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8000a8e:	4a58      	ldr	r2, [pc, #352]	; (8000bf0 <HAL_RCC_OscConfig+0x2a0>)
 8000a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000a92:	4b58      	ldr	r3, [pc, #352]	; (8000bf4 <HAL_RCC_OscConfig+0x2a4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd54 	bl	8000544 <HAL_InitTick>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d052      	beq.n	8000b4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	e372      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d032      	beq.n	8000b18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ab2:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a4c      	ldr	r2, [pc, #304]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000abe:	f7ff fd91 	bl	80005e4 <HAL_GetTick>
 8000ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ac4:	e008      	b.n	8000ad8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ac6:	f7ff fd8d 	bl	80005e4 <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d901      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e35b      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ad8:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f0      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ae4:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	493a      	ldr	r1, [pc, #232]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	4935      	ldr	r1, [pc, #212]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	604b      	str	r3, [r1, #4]
 8000b16:	e01a      	b.n	8000b4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b18:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b1e:	f023 0301 	bic.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b24:	f7ff fd5e 	bl	80005e4 <HAL_GetTick>
 8000b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b2a:	e008      	b.n	8000b3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b2c:	f7ff fd5a 	bl	80005e4 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d901      	bls.n	8000b3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e328      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f0      	bne.n	8000b2c <HAL_RCC_OscConfig+0x1dc>
 8000b4a:	e000      	b.n	8000b4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d073      	beq.n	8000c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d005      	beq.n	8000b6c <HAL_RCC_OscConfig+0x21c>
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	2b0c      	cmp	r3, #12
 8000b64:	d10e      	bne.n	8000b84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d10b      	bne.n	8000b84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d063      	beq.n	8000c40 <HAL_RCC_OscConfig+0x2f0>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d15f      	bne.n	8000c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e305      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8c:	d106      	bne.n	8000b9c <HAL_RCC_OscConfig+0x24c>
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01d      	b.n	8000bd8 <HAL_RCC_OscConfig+0x288>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x270>
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_RCC_OscConfig+0x288>
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <HAL_RCC_OscConfig+0x298>)
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01b      	beq.n	8000c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be0:	f7ff fd00 	bl	80005e4 <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000be6:	e010      	b.n	8000c0a <HAL_RCC_OscConfig+0x2ba>
 8000be8:	40021000 	.word	0x40021000
 8000bec:	080016fc 	.word	0x080016fc
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcf4 	bl	80005e4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e2c2      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0a:	4baf      	ldr	r3, [pc, #700]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x2a8>
 8000c16:	e014      	b.n	8000c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c18:	f7ff fce4 	bl	80005e4 <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fce0 	bl	80005e4 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b64      	cmp	r3, #100	; 0x64
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e2ae      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c32:	4ba5      	ldr	r3, [pc, #660]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x2d0>
 8000c3e:	e000      	b.n	8000c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d060      	beq.n	8000d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d005      	beq.n	8000c60 <HAL_RCC_OscConfig+0x310>
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d119      	bne.n	8000c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d116      	bne.n	8000c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c60:	4b99      	ldr	r3, [pc, #612]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_OscConfig+0x328>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e28b      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c78:	4b93      	ldr	r3, [pc, #588]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	061b      	lsls	r3, r3, #24
 8000c86:	4990      	ldr	r1, [pc, #576]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c8c:	e040      	b.n	8000d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d023      	beq.n	8000cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c96:	4b8c      	ldr	r3, [pc, #560]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a8b      	ldr	r2, [pc, #556]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fc9f 	bl	80005e4 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000caa:	f7ff fc9b 	bl	80005e4 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e269      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cbc:	4b82      	ldr	r3, [pc, #520]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc8:	4b7f      	ldr	r3, [pc, #508]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	061b      	lsls	r3, r3, #24
 8000cd6:	497c      	ldr	r1, [pc, #496]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
 8000cdc:	e018      	b.n	8000d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cde:	4b7a      	ldr	r3, [pc, #488]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a79      	ldr	r2, [pc, #484]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cea:	f7ff fc7b 	bl	80005e4 <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fc77 	bl	80005e4 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e245      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d04:	4b70      	ldr	r3, [pc, #448]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f0      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d03c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d01c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d24:	4b68      	ldr	r3, [pc, #416]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d2a:	4a67      	ldr	r2, [pc, #412]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d34:	f7ff fc56 	bl	80005e4 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc52 	bl	80005e4 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e220      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0ef      	beq.n	8000d3c <HAL_RCC_OscConfig+0x3ec>
 8000d5c:	e01b      	b.n	8000d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d64:	4a58      	ldr	r2, [pc, #352]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d66:	f023 0301 	bic.w	r3, r3, #1
 8000d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d6e:	f7ff fc39 	bl	80005e4 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fc35 	bl	80005e4 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e203      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d88:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1ef      	bne.n	8000d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a6 	beq.w	8000ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000da8:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d10d      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db8:	4a43      	ldr	r2, [pc, #268]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <HAL_RCC_OscConfig+0x57c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d118      	bne.n	8000e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_RCC_OscConfig+0x57c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a3a      	ldr	r2, [pc, #232]	; (8000ecc <HAL_RCC_OscConfig+0x57c>)
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000de8:	f7ff fbfc 	bl	80005e4 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000df0:	f7ff fbf8 	bl	80005e4 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1c6      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_RCC_OscConfig+0x57c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d108      	bne.n	8000e28 <HAL_RCC_OscConfig+0x4d8>
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e1c:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e26:	e024      	b.n	8000e72 <HAL_RCC_OscConfig+0x522>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d110      	bne.n	8000e52 <HAL_RCC_OscConfig+0x502>
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e46:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e50:	e00f      	b.n	8000e72 <HAL_RCC_OscConfig+0x522>
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e5a:	f023 0301 	bic.w	r3, r3, #1
 8000e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e6a:	f023 0304 	bic.w	r3, r3, #4
 8000e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d016      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fbb3 	bl	80005e4 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fbaf 	bl	80005e4 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e17b      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_RCC_OscConfig+0x578>)
 8000e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0ed      	beq.n	8000e82 <HAL_RCC_OscConfig+0x532>
 8000ea6:	e01a      	b.n	8000ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea8:	f7ff fb9c 	bl	80005e4 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000eae:	e00f      	b.n	8000ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb0:	f7ff fb98 	bl	80005e4 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d906      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e164      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ed0:	4ba8      	ldr	r3, [pc, #672]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e8      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee4:	4ba3      	ldr	r3, [pc, #652]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	4aa2      	ldr	r2, [pc, #648]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d03c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d01c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000f04:	4b9b      	ldr	r3, [pc, #620]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f0a:	4a9a      	ldr	r2, [pc, #616]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f14:	f7ff fb66 	bl	80005e4 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f1c:	f7ff fb62 	bl	80005e4 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e130      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000f2e:	4b91      	ldr	r3, [pc, #580]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0ef      	beq.n	8000f1c <HAL_RCC_OscConfig+0x5cc>
 8000f3c:	e01b      	b.n	8000f76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f44:	4a8b      	ldr	r2, [pc, #556]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fb49 	bl	80005e4 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000f56:	f7ff fb45 	bl	80005e4 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e113      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000f68:	4b82      	ldr	r3, [pc, #520]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ef      	bne.n	8000f56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8107 	beq.w	800118e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	f040 80cb 	bne.w	8001120 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f003 0203 	and.w	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d12c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d123      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d11b      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d113      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d109      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d06d      	beq.n	80010d4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d068      	beq.n	80010d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ffe:	4b5d      	ldr	r3, [pc, #372]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800100a:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0ba      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a55      	ldr	r2, [pc, #340]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001020:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001024:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001026:	f7ff fadd 	bl	80005e4 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fad9 	bl	80005e4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0a7      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001040:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	4b49      	ldr	r3, [pc, #292]	; (8001178 <HAL_RCC_OscConfig+0x828>)
 8001052:	4013      	ands	r3, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800105c:	3a01      	subs	r2, #1
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	4311      	orrs	r1, r2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001066:	0212      	lsls	r2, r2, #8
 8001068:	4311      	orrs	r1, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800106e:	0852      	lsrs	r2, r2, #1
 8001070:	3a01      	subs	r2, #1
 8001072:	0552      	lsls	r2, r2, #21
 8001074:	4311      	orrs	r1, r2
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800107a:	0852      	lsrs	r2, r2, #1
 800107c:	3a01      	subs	r2, #1
 800107e:	0652      	lsls	r2, r2, #25
 8001080:	4311      	orrs	r1, r2
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001086:	06d2      	lsls	r2, r2, #27
 8001088:	430a      	orrs	r2, r1
 800108a:	493a      	ldr	r1, [pc, #232]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800108c:	4313      	orrs	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001090:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a37      	ldr	r2, [pc, #220]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800109a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a34      	ldr	r2, [pc, #208]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80010a8:	f7ff fa9c 	bl	80005e4 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b0:	f7ff fa98 	bl	80005e4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e066      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010ce:	e05e      	b.n	800118e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e05d      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d156      	bne.n	800118e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 80010f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80010f8:	f7ff fa74 	bl	80005e4 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fa70 	bl	80005e4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e03e      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x7b0>
 800111e:	e036      	b.n	800118e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d031      	beq.n	800118a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800112c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001130:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001144:	f023 0303 	bic.w	r3, r3, #3
 8001148:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x824>)
 8001150:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001158:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fa43 	bl	80005e4 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001160:	e00c      	b.n	800117c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fa3f 	bl	80005e4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d905      	bls.n	800117c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e00d      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
 8001174:	40021000 	.word	0x40021000
 8001178:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_RCC_OscConfig+0x848>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ec      	bne.n	8001162 <HAL_RCC_OscConfig+0x812>
 8001188:	e001      	b.n	800118e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d101      	bne.n	80011b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e10f      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011b4:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 030f 	and.w	r3, r3, #15
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d910      	bls.n	80011e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b86      	ldr	r3, [pc, #536]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 020f 	bic.w	r2, r3, #15
 80011ca:	4984      	ldr	r1, [pc, #528]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b82      	ldr	r3, [pc, #520]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0f7      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8089 	beq.w	8001304 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d133      	bne.n	8001262 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fa:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0e4      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800120a:	f000 f9d7 	bl	80015bc <RCC_GetSysClockFreqFromPLLSource>
 800120e:	4602      	mov	r2, r0
 8001210:	4b74      	ldr	r3, [pc, #464]	; (80013e4 <HAL_RCC_ClockConfig+0x248>)
 8001212:	429a      	cmp	r2, r3
 8001214:	d955      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10a      	bne.n	8001238 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001222:	4b6f      	ldr	r3, [pc, #444]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e044      	b.n	80012c2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03e      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x126>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d13a      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800124c:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001254:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e02f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0ac      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001282:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0a0      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e098      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80012a2:	f000 f8a7 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <HAL_RCC_ClockConfig+0x248>)
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d909      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012b6:	4a4a      	ldr	r2, [pc, #296]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 0203 	bic.w	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4944      	ldr	r1, [pc, #272]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012d4:	f7ff f986 	bl	80005e4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff f982 	bl	80005e4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e070      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 020c 	and.w	r2, r3, #12
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429a      	cmp	r2, r3
 8001302:	d1eb      	bne.n	80012dc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4930      	ldr	r1, [pc, #192]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 800131e:	4313      	orrs	r3, r2
 8001320:	608b      	str	r3, [r1, #8]
 8001322:	e008      	b.n	8001336 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b80      	cmp	r3, #128	; 0x80
 8001328:	d105      	bne.n	8001336 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001330:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001334:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d210      	bcs.n	8001366 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 020f 	bic.w	r2, r3, #15
 800134c:	4923      	ldr	r1, [pc, #140]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_RCC_ClockConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e036      	b.n	80013d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4918      	ldr	r1, [pc, #96]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4910      	ldr	r1, [pc, #64]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013a4:	f000 f826 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013a8:	4601      	mov	r1, r0
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_ClockConfig+0x244>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_RCC_ClockConfig+0x24c>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	f003 031f 	and.w	r3, r3, #31
 80013bc:	fa21 f303 	lsr.w	r3, r1, r3
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_RCC_ClockConfig+0x250>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x254>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8bb 	bl	8000544 <HAL_InitTick>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	04c4b400 	.word	0x04c4b400
 80013e8:	080016fc 	.word	0x080016fc
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x34>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d121      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d11e      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e005      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001450:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10d      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001464:	e00a      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d102      	bne.n	8001472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_GetSysClockFreq+0x10c>)
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	e004      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d101      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_GetSysClockFreq+0x110>)
 800147a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d133      	bne.n	80014ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d002      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0xa4>
 8001492:	2b03      	cmp	r3, #3
 8001494:	d003      	beq.n	800149e <HAL_RCC_GetSysClockFreq+0xaa>
 8001496:	e005      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_RCC_GetSysClockFreq+0x10c>)
 800149a:	617b      	str	r3, [r7, #20]
      break;
 800149c:	e005      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_RCC_GetSysClockFreq+0x110>)
 80014a0:	617b      	str	r3, [r7, #20]
      break;
 80014a2:	e002      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	617b      	str	r3, [r7, #20]
      break;
 80014a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	3301      	adds	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	fb02 f203 	mul.w	r2, r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0e5b      	lsrs	r3, r3, #25
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	3301      	adds	r3, #1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014ea:	69bb      	ldr	r3, [r7, #24]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	0800170c 	.word	0x0800170c
 8001500:	00f42400 	.word	0x00f42400
 8001504:	007a1200 	.word	0x007a1200

08001508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001520:	f7ff f952 	bl	80007c8 <HAL_PWREx_GetVoltageRange>
 8001524:	6178      	str	r0, [r7, #20]
 8001526:	e014      	b.n	8001552 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6593      	str	r3, [r2, #88]	; 0x58
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001540:	f7ff f942 	bl	80007c8 <HAL_PWREx_GetVoltageRange>
 8001544:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800154c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001558:	d10b      	bne.n	8001572 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b80      	cmp	r3, #128	; 0x80
 800155e:	d913      	bls.n	8001588 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2ba0      	cmp	r3, #160	; 0xa0
 8001564:	d902      	bls.n	800156c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001566:	2302      	movs	r3, #2
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	e00d      	b.n	8001588 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	e00a      	b.n	8001588 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b7f      	cmp	r3, #127	; 0x7f
 8001576:	d902      	bls.n	800157e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	e004      	b.n	8001588 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b70      	cmp	r3, #112	; 0x70
 8001582:	d101      	bne.n	8001588 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001584:	2301      	movs	r3, #1
 8001586:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 020f 	bic.w	r2, r3, #15
 8001590:	4909      	ldr	r1, [pc, #36]	; (80015b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40022000 	.word	0x40022000

080015bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d118      	bne.n	8001604 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e005      	b.n	80015fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d002      	beq.n	800161a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8001614:	2b03      	cmp	r3, #3
 8001616:	d003      	beq.n	8001620 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8001618:	e005      	b.n	8001626 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800161c:	613b      	str	r3, [r7, #16]
    break;
 800161e:	e005      	b.n	800162c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001622:	613b      	str	r3, [r7, #16]
    break;
 8001624:	e002      	b.n	800162c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	613b      	str	r3, [r7, #16]
    break;
 800162a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	fb02 f203 	mul.w	r2, r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	0e5b      	lsrs	r3, r3, #25
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	3301      	adds	r3, #1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800166c:	683b      	ldr	r3, [r7, #0]
}
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	0800170c 	.word	0x0800170c
 8001684:	00f42400 	.word	0x00f42400
 8001688:	007a1200 	.word	0x007a1200

0800168c <__libc_init_array>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4e0d      	ldr	r6, [pc, #52]	; (80016c4 <__libc_init_array+0x38>)
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <__libc_init_array+0x3c>)
 8001692:	1ba4      	subs	r4, r4, r6
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	2500      	movs	r5, #0
 8001698:	42a5      	cmp	r5, r4
 800169a:	d109      	bne.n	80016b0 <__libc_init_array+0x24>
 800169c:	4e0b      	ldr	r6, [pc, #44]	; (80016cc <__libc_init_array+0x40>)
 800169e:	4c0c      	ldr	r4, [pc, #48]	; (80016d0 <__libc_init_array+0x44>)
 80016a0:	f000 f820 	bl	80016e4 <_init>
 80016a4:	1ba4      	subs	r4, r4, r6
 80016a6:	10a4      	asrs	r4, r4, #2
 80016a8:	2500      	movs	r5, #0
 80016aa:	42a5      	cmp	r5, r4
 80016ac:	d105      	bne.n	80016ba <__libc_init_array+0x2e>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016b4:	4798      	blx	r3
 80016b6:	3501      	adds	r5, #1
 80016b8:	e7ee      	b.n	8001698 <__libc_init_array+0xc>
 80016ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016be:	4798      	blx	r3
 80016c0:	3501      	adds	r5, #1
 80016c2:	e7f2      	b.n	80016aa <__libc_init_array+0x1e>
 80016c4:	0800173c 	.word	0x0800173c
 80016c8:	0800173c 	.word	0x0800173c
 80016cc:	0800173c 	.word	0x0800173c
 80016d0:	08001740 	.word	0x08001740

080016d4 <memset>:
 80016d4:	4402      	add	r2, r0
 80016d6:	4603      	mov	r3, r0
 80016d8:	4293      	cmp	r3, r2
 80016da:	d100      	bne.n	80016de <memset+0xa>
 80016dc:	4770      	bx	lr
 80016de:	f803 1b01 	strb.w	r1, [r3], #1
 80016e2:	e7f9      	b.n	80016d8 <memset+0x4>

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
