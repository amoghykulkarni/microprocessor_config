
ECSE444_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a50  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c58  08003c58  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c58  08003c58  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c58  08003c58  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08003c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000020c  08003e6c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003e6c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00006e5c  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000b4f2  00000000  00000000  00027098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001ebd  00000000  00000000  0003258a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006a0  00000000  00000000  00034448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010505a  00000000  00000000  00034ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005b8  00000000  00000000  00139b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029e1d  00000000  00000000  0013a100  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00163f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e0  00000000  00000000  00164010  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000341f  00000000  00000000  001659f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000020c 	.word	0x2000020c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003bf4 	.word	0x08003bf4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000210 	.word	0x20000210
 80001f8:	08003bf4 	.word	0x08003bf4

080001fc <kalman>:




kalman:
	PUSH {R0-R5}
 80001fc:	b43f      	push	{r0, r1, r2, r3, r4, r5}
	VPUSH.F32 {S0-S5}
 80001fe:	ed2d 0a06 	vpush	{s0-s5}
	MOV R3, R0
 8000202:	1c03      	adds	r3, r0, #0
	MOV R4, R1
 8000204:	1c0c      	adds	r4, r1, #0
	VLDR.F32 S1, [R3]
 8000206:	edd3 0a00 	vldr	s1, [r3]
	VLDR.F32 S2, [R3,#4]
 800020a:	ed93 1a01 	vldr	s2, [r3, #4]
	VLDR.F32 S3, [R3,#8]
 800020e:	edd3 1a02 	vldr	s3, [r3, #8]
	VLDR.F32 S4, [R3, #12]
 8000212:	ed93 2a03 	vldr	s4, [r3, #12]
	VLDR.F32 S5, [R3, #16]
 8000216:	edd3 2a04 	vldr	s5, [r3, #16]

	MOV R5, #0x0FF
 800021a:	25ff      	movs	r5, #255	; 0xff
	VMOV.F32 S10, R5
 800021c:	ee05 5a10 	vmov	s10, r5

	// 0 00000000 00000 .... 0000

	//VLDR.F32 S0, [R4]
	B update
 8000220:	e000      	b.n	8000224 <update>

08000222 <check>:
	BGT done
	BX LR

*/
check:
	B done
 8000222:	e01b      	b.n	800025c <done>

08000224 <update>:

update:
	// 1 bit sign, 8 bit exp, 23 BIT MANTISSA


	VADD.F32 S4, S4, S1 // P = P + Q
 8000224:	ee32 2a20 	vadd.f32	s4, s4, s1

	VADD.F32 S6, S4, S2 // TEMP = P+R
 8000228:	ee32 3a01 	vadd.f32	s6, s4, s2
	VCMP.F32 S6, #0 //if P+R = 0 end
 800022c:	eeb5 3a40 	vcmp.f32	s6, #0.0
	BEQ check
 8000230:	d0f7      	beq.n	8000222 <check>

	VDIV.F32 S5, S4, S6 // K = P/TEMP
 8000232:	eec2 2a03 	vdiv.f32	s5, s4, s6
	VSUB.F32 S7, S0, S3 // MEASUREMENT - X
 8000236:	ee70 3a61 	vsub.f32	s7, s0, s3
	VCMP.F32 S7,  S10// overflow check
 800023a:	eef4 3a45 	vcmp.f32	s7, s10
	BEQ done
 800023e:	d00d      	beq.n	800025c <done>


	VMUL.F32 S8, S5, S7 // K * (MEASUREMENT - X)
 8000240:	ee22 4aa3 	vmul.f32	s8, s5, s7
	VCMP.F32 S8,  S10// overflow check
 8000244:	eeb4 4a45 	vcmp.f32	s8, s10
	BEQ done
 8000248:	d008      	beq.n	800025c <done>

	VADD.F32 S3, S3, S8 // X = X + K*(MEASUREMENT - X)
 800024a:	ee71 1a84 	vadd.f32	s3, s3, s8
	VCMP.F32 S3,  S10// overflow check
 800024e:	eef4 1a45 	vcmp.f32	s3, s10
	BEQ done
 8000252:	d003      	beq.n	800025c <done>

	VMUL.F32 S9, S4, S5 //PK
 8000254:	ee62 4a22 	vmul.f32	s9, s4, s5
	VSUB.F32 S4, S4, S9 // P - PK = P
 8000258:	ee32 2a64 	vsub.f32	s4, s4, s9

0800025c <done>:

done:
	// VSTR.F32 S3, [R1]

	VSTR.F32 S1, [R3]
 800025c:	edc3 0a00 	vstr	s1, [r3]
	VSTR.F32 S2, [R3, #4]
 8000260:	ed83 1a01 	vstr	s2, [r3, #4]
	VSTR.F32 S3, [R3, #8]
 8000264:	edc3 1a02 	vstr	s3, [r3, #8]
	VSTR.F32 S4, [R3, #12]
 8000268:	ed83 2a03 	vstr	s4, [r3, #12]
	VSTR.F32 S5, [R3, #16]
 800026c:	edc3 2a04 	vstr	s5, [r3, #16]

	//POP {R0-R5}
	//VPOP.F32 {S0-S5}
	BX LR
 8000270:	4770      	bx	lr
	...

08000274 <__aeabi_drsub>:
 8000274:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000278:	e002      	b.n	8000280 <__adddf3>
 800027a:	bf00      	nop

0800027c <__aeabi_dsub>:
 800027c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000280 <__adddf3>:
 8000280:	b530      	push	{r4, r5, lr}
 8000282:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000286:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028a:	ea94 0f05 	teq	r4, r5
 800028e:	bf08      	it	eq
 8000290:	ea90 0f02 	teqeq	r0, r2
 8000294:	bf1f      	itttt	ne
 8000296:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a6:	f000 80e2 	beq.w	800046e <__adddf3+0x1ee>
 80002aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b2:	bfb8      	it	lt
 80002b4:	426d      	neglt	r5, r5
 80002b6:	dd0c      	ble.n	80002d2 <__adddf3+0x52>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	ea82 0000 	eor.w	r0, r2, r0
 80002c6:	ea83 0101 	eor.w	r1, r3, r1
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	2d36      	cmp	r5, #54	; 0x36
 80002d4:	bf88      	it	hi
 80002d6:	bd30      	pophi	{r4, r5, pc}
 80002d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e8:	d002      	beq.n	80002f0 <__adddf3+0x70>
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x84>
 80002fe:	4252      	negs	r2, r2
 8000300:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000304:	ea94 0f05 	teq	r4, r5
 8000308:	f000 80a7 	beq.w	800045a <__adddf3+0x1da>
 800030c:	f1a4 0401 	sub.w	r4, r4, #1
 8000310:	f1d5 0e20 	rsbs	lr, r5, #32
 8000314:	db0d      	blt.n	8000332 <__adddf3+0xb2>
 8000316:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031a:	fa22 f205 	lsr.w	r2, r2, r5
 800031e:	1880      	adds	r0, r0, r2
 8000320:	f141 0100 	adc.w	r1, r1, #0
 8000324:	fa03 f20e 	lsl.w	r2, r3, lr
 8000328:	1880      	adds	r0, r0, r2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	4159      	adcs	r1, r3
 8000330:	e00e      	b.n	8000350 <__adddf3+0xd0>
 8000332:	f1a5 0520 	sub.w	r5, r5, #32
 8000336:	f10e 0e20 	add.w	lr, lr, #32
 800033a:	2a01      	cmp	r2, #1
 800033c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000340:	bf28      	it	cs
 8000342:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	18c0      	adds	r0, r0, r3
 800034c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000354:	d507      	bpl.n	8000366 <__adddf3+0xe6>
 8000356:	f04f 0e00 	mov.w	lr, #0
 800035a:	f1dc 0c00 	rsbs	ip, ip, #0
 800035e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000362:	eb6e 0101 	sbc.w	r1, lr, r1
 8000366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800036a:	d31b      	bcc.n	80003a4 <__adddf3+0x124>
 800036c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000370:	d30c      	bcc.n	800038c <__adddf3+0x10c>
 8000372:	0849      	lsrs	r1, r1, #1
 8000374:	ea5f 0030 	movs.w	r0, r0, rrx
 8000378:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800037c:	f104 0401 	add.w	r4, r4, #1
 8000380:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000384:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000388:	f080 809a 	bcs.w	80004c0 <__adddf3+0x240>
 800038c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000390:	bf08      	it	eq
 8000392:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000396:	f150 0000 	adcs.w	r0, r0, #0
 800039a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039e:	ea41 0105 	orr.w	r1, r1, r5
 80003a2:	bd30      	pop	{r4, r5, pc}
 80003a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a8:	4140      	adcs	r0, r0
 80003aa:	eb41 0101 	adc.w	r1, r1, r1
 80003ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b2:	f1a4 0401 	sub.w	r4, r4, #1
 80003b6:	d1e9      	bne.n	800038c <__adddf3+0x10c>
 80003b8:	f091 0f00 	teq	r1, #0
 80003bc:	bf04      	itt	eq
 80003be:	4601      	moveq	r1, r0
 80003c0:	2000      	moveq	r0, #0
 80003c2:	fab1 f381 	clz	r3, r1
 80003c6:	bf08      	it	eq
 80003c8:	3320      	addeq	r3, #32
 80003ca:	f1a3 030b 	sub.w	r3, r3, #11
 80003ce:	f1b3 0220 	subs.w	r2, r3, #32
 80003d2:	da0c      	bge.n	80003ee <__adddf3+0x16e>
 80003d4:	320c      	adds	r2, #12
 80003d6:	dd08      	ble.n	80003ea <__adddf3+0x16a>
 80003d8:	f102 0c14 	add.w	ip, r2, #20
 80003dc:	f1c2 020c 	rsb	r2, r2, #12
 80003e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e4:	fa21 f102 	lsr.w	r1, r1, r2
 80003e8:	e00c      	b.n	8000404 <__adddf3+0x184>
 80003ea:	f102 0214 	add.w	r2, r2, #20
 80003ee:	bfd8      	it	le
 80003f0:	f1c2 0c20 	rsble	ip, r2, #32
 80003f4:	fa01 f102 	lsl.w	r1, r1, r2
 80003f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003fc:	bfdc      	itt	le
 80003fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000402:	4090      	lslle	r0, r2
 8000404:	1ae4      	subs	r4, r4, r3
 8000406:	bfa2      	ittt	ge
 8000408:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800040c:	4329      	orrge	r1, r5
 800040e:	bd30      	popge	{r4, r5, pc}
 8000410:	ea6f 0404 	mvn.w	r4, r4
 8000414:	3c1f      	subs	r4, #31
 8000416:	da1c      	bge.n	8000452 <__adddf3+0x1d2>
 8000418:	340c      	adds	r4, #12
 800041a:	dc0e      	bgt.n	800043a <__adddf3+0x1ba>
 800041c:	f104 0414 	add.w	r4, r4, #20
 8000420:	f1c4 0220 	rsb	r2, r4, #32
 8000424:	fa20 f004 	lsr.w	r0, r0, r4
 8000428:	fa01 f302 	lsl.w	r3, r1, r2
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	fa21 f304 	lsr.w	r3, r1, r4
 8000434:	ea45 0103 	orr.w	r1, r5, r3
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f1c4 040c 	rsb	r4, r4, #12
 800043e:	f1c4 0220 	rsb	r2, r4, #32
 8000442:	fa20 f002 	lsr.w	r0, r0, r2
 8000446:	fa01 f304 	lsl.w	r3, r1, r4
 800044a:	ea40 0003 	orr.w	r0, r0, r3
 800044e:	4629      	mov	r1, r5
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	fa21 f004 	lsr.w	r0, r1, r4
 8000456:	4629      	mov	r1, r5
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f094 0f00 	teq	r4, #0
 800045e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000462:	bf06      	itte	eq
 8000464:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000468:	3401      	addeq	r4, #1
 800046a:	3d01      	subne	r5, #1
 800046c:	e74e      	b.n	800030c <__adddf3+0x8c>
 800046e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000472:	bf18      	it	ne
 8000474:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000478:	d029      	beq.n	80004ce <__adddf3+0x24e>
 800047a:	ea94 0f05 	teq	r4, r5
 800047e:	bf08      	it	eq
 8000480:	ea90 0f02 	teqeq	r0, r2
 8000484:	d005      	beq.n	8000492 <__adddf3+0x212>
 8000486:	ea54 0c00 	orrs.w	ip, r4, r0
 800048a:	bf04      	itt	eq
 800048c:	4619      	moveq	r1, r3
 800048e:	4610      	moveq	r0, r2
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea91 0f03 	teq	r1, r3
 8000496:	bf1e      	ittt	ne
 8000498:	2100      	movne	r1, #0
 800049a:	2000      	movne	r0, #0
 800049c:	bd30      	popne	{r4, r5, pc}
 800049e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a2:	d105      	bne.n	80004b0 <__adddf3+0x230>
 80004a4:	0040      	lsls	r0, r0, #1
 80004a6:	4149      	adcs	r1, r1
 80004a8:	bf28      	it	cs
 80004aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b4:	bf3c      	itt	cc
 80004b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ba:	bd30      	popcc	{r4, r5, pc}
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c8:	f04f 0000 	mov.w	r0, #0
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf1a      	itte	ne
 80004d4:	4619      	movne	r1, r3
 80004d6:	4610      	movne	r0, r2
 80004d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004dc:	bf1c      	itt	ne
 80004de:	460b      	movne	r3, r1
 80004e0:	4602      	movne	r2, r0
 80004e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e6:	bf06      	itte	eq
 80004e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ec:	ea91 0f03 	teqeq	r1, r3
 80004f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	bf00      	nop

080004f8 <__aeabi_ui2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f04f 0500 	mov.w	r5, #0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e750      	b.n	80003b8 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_i2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000530:	bf48      	it	mi
 8000532:	4240      	negmi	r0, r0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e73e      	b.n	80003b8 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_f2d>:
 800053c:	0042      	lsls	r2, r0, #1
 800053e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000542:	ea4f 0131 	mov.w	r1, r1, rrx
 8000546:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054a:	bf1f      	itttt	ne
 800054c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000550:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000554:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000558:	4770      	bxne	lr
 800055a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055e:	bf08      	it	eq
 8000560:	4770      	bxeq	lr
 8000562:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000566:	bf04      	itt	eq
 8000568:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800057c:	e71c      	b.n	80003b8 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_ul2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	e00a      	b.n	80005a6 <__aeabi_l2d+0x16>

08000590 <__aeabi_l2d>:
 8000590:	ea50 0201 	orrs.w	r2, r0, r1
 8000594:	bf08      	it	eq
 8000596:	4770      	bxeq	lr
 8000598:	b530      	push	{r4, r5, lr}
 800059a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059e:	d502      	bpl.n	80005a6 <__aeabi_l2d+0x16>
 80005a0:	4240      	negs	r0, r0
 80005a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b2:	f43f aed8 	beq.w	8000366 <__adddf3+0xe6>
 80005b6:	f04f 0203 	mov.w	r2, #3
 80005ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005be:	bf18      	it	ne
 80005c0:	3203      	addne	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ce:	f1c2 0320 	rsb	r3, r2, #32
 80005d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d6:	fa20 f002 	lsr.w	r0, r0, r2
 80005da:	fa01 fe03 	lsl.w	lr, r1, r3
 80005de:	ea40 000e 	orr.w	r0, r0, lr
 80005e2:	fa21 f102 	lsr.w	r1, r1, r2
 80005e6:	4414      	add	r4, r2
 80005e8:	e6bd      	b.n	8000366 <__adddf3+0xe6>
 80005ea:	bf00      	nop

080005ec <__aeabi_dmul>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fa:	bf1d      	ittte	ne
 80005fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000600:	ea94 0f0c 	teqne	r4, ip
 8000604:	ea95 0f0c 	teqne	r5, ip
 8000608:	f000 f8de 	bleq	80007c8 <__aeabi_dmul+0x1dc>
 800060c:	442c      	add	r4, r5
 800060e:	ea81 0603 	eor.w	r6, r1, r3
 8000612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061e:	bf18      	it	ne
 8000620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800062c:	d038      	beq.n	80006a0 <__aeabi_dmul+0xb4>
 800062e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000632:	f04f 0500 	mov.w	r5, #0
 8000636:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000642:	f04f 0600 	mov.w	r6, #0
 8000646:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064a:	f09c 0f00 	teq	ip, #0
 800064e:	bf18      	it	ne
 8000650:	f04e 0e01 	orrne.w	lr, lr, #1
 8000654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800065c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000660:	d204      	bcs.n	800066c <__aeabi_dmul+0x80>
 8000662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000666:	416d      	adcs	r5, r5
 8000668:	eb46 0606 	adc.w	r6, r6, r6
 800066c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800067c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000684:	bf88      	it	hi
 8000686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068a:	d81e      	bhi.n	80006ca <__aeabi_dmul+0xde>
 800068c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000690:	bf08      	it	eq
 8000692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000696:	f150 0000 	adcs.w	r0, r0, #0
 800069a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a4:	ea46 0101 	orr.w	r1, r6, r1
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	ea81 0103 	eor.w	r1, r1, r3
 80006b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b4:	bfc2      	ittt	gt
 80006b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006be:	bd70      	popgt	{r4, r5, r6, pc}
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f04f 0e00 	mov.w	lr, #0
 80006c8:	3c01      	subs	r4, #1
 80006ca:	f300 80ab 	bgt.w	8000824 <__aeabi_dmul+0x238>
 80006ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d2:	bfde      	ittt	le
 80006d4:	2000      	movle	r0, #0
 80006d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006da:	bd70      	pople	{r4, r5, r6, pc}
 80006dc:	f1c4 0400 	rsb	r4, r4, #0
 80006e0:	3c20      	subs	r4, #32
 80006e2:	da35      	bge.n	8000750 <__aeabi_dmul+0x164>
 80006e4:	340c      	adds	r4, #12
 80006e6:	dc1b      	bgt.n	8000720 <__aeabi_dmul+0x134>
 80006e8:	f104 0414 	add.w	r4, r4, #20
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f305 	lsl.w	r3, r0, r5
 80006f4:	fa20 f004 	lsr.w	r0, r0, r4
 80006f8:	fa01 f205 	lsl.w	r2, r1, r5
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	fa21 f604 	lsr.w	r6, r1, r4
 8000710:	eb42 0106 	adc.w	r1, r2, r6
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 040c 	rsb	r4, r4, #12
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f304 	lsl.w	r3, r0, r4
 800072c:	fa20 f005 	lsr.w	r0, r0, r5
 8000730:	fa01 f204 	lsl.w	r2, r1, r4
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	f141 0100 	adc.w	r1, r1, #0
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f205 	lsl.w	r2, r0, r5
 8000758:	ea4e 0e02 	orr.w	lr, lr, r2
 800075c:	fa20 f304 	lsr.w	r3, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea43 0302 	orr.w	r3, r3, r2
 8000768:	fa21 f004 	lsr.w	r0, r1, r4
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	fa21 f204 	lsr.w	r2, r1, r4
 8000774:	ea20 0002 	bic.w	r0, r0, r2
 8000778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f094 0f00 	teq	r4, #0
 800078c:	d10f      	bne.n	80007ae <__aeabi_dmul+0x1c2>
 800078e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000792:	0040      	lsls	r0, r0, #1
 8000794:	eb41 0101 	adc.w	r1, r1, r1
 8000798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3c01      	subeq	r4, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1a6>
 80007a2:	ea41 0106 	orr.w	r1, r1, r6
 80007a6:	f095 0f00 	teq	r5, #0
 80007aa:	bf18      	it	ne
 80007ac:	4770      	bxne	lr
 80007ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	eb43 0303 	adc.w	r3, r3, r3
 80007b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3d01      	subeq	r5, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1c6>
 80007c2:	ea43 0306 	orr.w	r3, r3, r6
 80007c6:	4770      	bx	lr
 80007c8:	ea94 0f0c 	teq	r4, ip
 80007cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d0:	bf18      	it	ne
 80007d2:	ea95 0f0c 	teqne	r5, ip
 80007d6:	d00c      	beq.n	80007f2 <__aeabi_dmul+0x206>
 80007d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e2:	d1d1      	bne.n	8000788 <__aeabi_dmul+0x19c>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f6:	bf06      	itte	eq
 80007f8:	4610      	moveq	r0, r2
 80007fa:	4619      	moveq	r1, r3
 80007fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000800:	d019      	beq.n	8000836 <__aeabi_dmul+0x24a>
 8000802:	ea94 0f0c 	teq	r4, ip
 8000806:	d102      	bne.n	800080e <__aeabi_dmul+0x222>
 8000808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800080c:	d113      	bne.n	8000836 <__aeabi_dmul+0x24a>
 800080e:	ea95 0f0c 	teq	r5, ip
 8000812:	d105      	bne.n	8000820 <__aeabi_dmul+0x234>
 8000814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000818:	bf1c      	itt	ne
 800081a:	4610      	movne	r0, r2
 800081c:	4619      	movne	r1, r3
 800081e:	d10a      	bne.n	8000836 <__aeabi_dmul+0x24a>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083e:	bd70      	pop	{r4, r5, r6, pc}

08000840 <__aeabi_ddiv>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084e:	bf1d      	ittte	ne
 8000850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000854:	ea94 0f0c 	teqne	r4, ip
 8000858:	ea95 0f0c 	teqne	r5, ip
 800085c:	f000 f8a7 	bleq	80009ae <__aeabi_ddiv+0x16e>
 8000860:	eba4 0405 	sub.w	r4, r4, r5
 8000864:	ea81 0e03 	eor.w	lr, r1, r3
 8000868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800086c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000870:	f000 8088 	beq.w	8000984 <__aeabi_ddiv+0x144>
 8000874:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800087c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000884:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800088c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000890:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000898:	429d      	cmp	r5, r3
 800089a:	bf08      	it	eq
 800089c:	4296      	cmpeq	r6, r2
 800089e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a6:	d202      	bcs.n	80008ae <__aeabi_ddiv+0x6e>
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	1ab6      	subs	r6, r6, r2
 80008b0:	eb65 0503 	sbc.w	r5, r5, r3
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fa:	bf22      	ittt	cs
 80008fc:	1ab6      	subcs	r6, r6, r2
 80008fe:	4675      	movcs	r5, lr
 8000900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800091c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000920:	d018      	beq.n	8000954 <__aeabi_ddiv+0x114>
 8000922:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093e:	d1c0      	bne.n	80008c2 <__aeabi_ddiv+0x82>
 8000940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000944:	d10b      	bne.n	800095e <__aeabi_ddiv+0x11e>
 8000946:	ea41 0100 	orr.w	r1, r1, r0
 800094a:	f04f 0000 	mov.w	r0, #0
 800094e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000952:	e7b6      	b.n	80008c2 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	bf04      	itt	eq
 800095a:	4301      	orreq	r1, r0
 800095c:	2000      	moveq	r0, #0
 800095e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000962:	bf88      	it	hi
 8000964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000968:	f63f aeaf 	bhi.w	80006ca <__aeabi_dmul+0xde>
 800096c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000970:	bf04      	itt	eq
 8000972:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097a:	f150 0000 	adcs.w	r0, r0, #0
 800097e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800098c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	e690      	b.n	80006ca <__aeabi_dmul+0xde>
 80009a8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ac:	e68d      	b.n	80006ca <__aeabi_dmul+0xde>
 80009ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b2:	ea94 0f0c 	teq	r4, ip
 80009b6:	bf08      	it	eq
 80009b8:	ea95 0f0c 	teqeq	r5, ip
 80009bc:	f43f af3b 	beq.w	8000836 <__aeabi_dmul+0x24a>
 80009c0:	ea94 0f0c 	teq	r4, ip
 80009c4:	d10a      	bne.n	80009dc <__aeabi_ddiv+0x19c>
 80009c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ca:	f47f af34 	bne.w	8000836 <__aeabi_dmul+0x24a>
 80009ce:	ea95 0f0c 	teq	r5, ip
 80009d2:	f47f af25 	bne.w	8000820 <__aeabi_dmul+0x234>
 80009d6:	4610      	mov	r0, r2
 80009d8:	4619      	mov	r1, r3
 80009da:	e72c      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009dc:	ea95 0f0c 	teq	r5, ip
 80009e0:	d106      	bne.n	80009f0 <__aeabi_ddiv+0x1b0>
 80009e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e6:	f43f aefd 	beq.w	80007e4 <__aeabi_dmul+0x1f8>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e722      	b.n	8000836 <__aeabi_dmul+0x24a>
 80009f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f4:	bf18      	it	ne
 80009f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fa:	f47f aec5 	bne.w	8000788 <__aeabi_dmul+0x19c>
 80009fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a02:	f47f af0d 	bne.w	8000820 <__aeabi_dmul+0x234>
 8000a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0a:	f47f aeeb 	bne.w	80007e4 <__aeabi_dmul+0x1f8>
 8000a0e:	e712      	b.n	8000836 <__aeabi_dmul+0x24a>

08000a10 <__gedf2>:
 8000a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a14:	e006      	b.n	8000a24 <__cmpdf2+0x4>
 8000a16:	bf00      	nop

08000a18 <__ledf2>:
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	e002      	b.n	8000a24 <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__cmpdf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3a:	d01b      	beq.n	8000a74 <__cmpdf2+0x54>
 8000a3c:	b001      	add	sp, #4
 8000a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a42:	bf0c      	ite	eq
 8000a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a48:	ea91 0f03 	teqne	r1, r3
 8000a4c:	bf02      	ittt	eq
 8000a4e:	ea90 0f02 	teqeq	r0, r2
 8000a52:	2000      	moveq	r0, #0
 8000a54:	4770      	bxeq	lr
 8000a56:	f110 0f00 	cmn.w	r0, #0
 8000a5a:	ea91 0f03 	teq	r1, r3
 8000a5e:	bf58      	it	pl
 8000a60:	4299      	cmppl	r1, r3
 8000a62:	bf08      	it	eq
 8000a64:	4290      	cmpeq	r0, r2
 8000a66:	bf2c      	ite	cs
 8000a68:	17d8      	asrcs	r0, r3, #31
 8000a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6e:	f040 0001 	orr.w	r0, r0, #1
 8000a72:	4770      	bx	lr
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__cmpdf2+0x64>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d107      	bne.n	8000a94 <__cmpdf2+0x74>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d1d6      	bne.n	8000a3c <__cmpdf2+0x1c>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d0d3      	beq.n	8000a3c <__cmpdf2+0x1c>
 8000a94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdrcmple>:
 8000a9c:	4684      	mov	ip, r0
 8000a9e:	4610      	mov	r0, r2
 8000aa0:	4662      	mov	r2, ip
 8000aa2:	468c      	mov	ip, r1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	e000      	b.n	8000aac <__aeabi_cdcmpeq>
 8000aaa:	bf00      	nop

08000aac <__aeabi_cdcmpeq>:
 8000aac:	b501      	push	{r0, lr}
 8000aae:	f7ff ffb7 	bl	8000a20 <__cmpdf2>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	bf48      	it	mi
 8000ab6:	f110 0f00 	cmnmi.w	r0, #0
 8000aba:	bd01      	pop	{r0, pc}

08000abc <__aeabi_dcmpeq>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff fff4 	bl	8000aac <__aeabi_cdcmpeq>
 8000ac4:	bf0c      	ite	eq
 8000ac6:	2001      	moveq	r0, #1
 8000ac8:	2000      	movne	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmplt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffea 	bl	8000aac <__aeabi_cdcmpeq>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmple>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffe0 	bl	8000aac <__aeabi_cdcmpeq>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpge>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffce 	bl	8000a9c <__aeabi_cdrcmple>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpgt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffc4 	bl	8000a9c <__aeabi_cdrcmple>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpun>:
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x10>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d10a      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__aeabi_dcmpun+0x20>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_dcmpun+0x26>
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0001 	mov.w	r0, #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_d2f>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b54:	bf24      	itt	cs
 8000b56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5e:	d90d      	bls.n	8000b7c <__aeabi_d2f+0x30>
 8000b60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b74:	bf08      	it	eq
 8000b76:	f020 0001 	biceq.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b80:	d121      	bne.n	8000bc6 <__aeabi_d2f+0x7a>
 8000b82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b86:	bfbc      	itt	lt
 8000b88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	4770      	bxlt	lr
 8000b8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b96:	f1c2 0218 	rsb	r2, r2, #24
 8000b9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	f040 0001 	orrne.w	r0, r0, #1
 8000bac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb8:	ea40 000c 	orr.w	r0, r0, ip
 8000bbc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc4:	e7cc      	b.n	8000b60 <__aeabi_d2f+0x14>
 8000bc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bca:	d107      	bne.n	8000bdc <__aeabi_d2f+0x90>
 8000bcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bda:	4770      	bxne	lr
 8000bdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <kalman_c>:

	 * */
	 //return OutputArray;
}

int kalman_c(float *InputArray, float *OutputArray, kalman_state *kstate, int length){
 8000bec:	b480      	push	{r7}
 8000bee:	b087      	sub	sp, #28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
	int i = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
	while (i < length){
 8000bfe:	e058      	b.n	8000cb2 <kalman_c+0xc6>
		kstate->p = kstate->p + kstate->q;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	edc3 7a03 	vstr	s15, [r3, #12]
		kstate->k = kstate->p / (kstate->p + kstate->r);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	edc3 7a04 	vstr	s15, [r3, #16]
		kstate->x = kstate->x + kstate->k * (InputArray[i] - kstate->x);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	edd3 6a04 	vldr	s13, [r3, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed93 6a00 	vldr	s12, [r3]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	edc3 7a02 	vstr	s15, [r3, #8]
		if(kstate->x != kstate->x){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c72:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7a:	d001      	beq.n	8000c80 <kalman_c+0x94>
			return 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e01d      	b.n	8000cbc <kalman_c+0xd0>
		}

		kstate->p = (1-kstate->k)*kstate->p;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	edc3 7a03 	vstr	s15, [r3, #12]
		OutputArray[i] = kstate->x;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6892      	ldr	r2, [r2, #8]
 8000caa:	601a      	str	r2, [r3, #0]
		i++;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
	while (i < length){
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dba2      	blt.n	8000c00 <kalman_c+0x14>

	}
	return 0;
 8000cba:	2300      	movs	r3, #0

}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <sub_c>:

void sub_c(float *input1, float *input2, float *diff, int len){
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
	int i = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
	while(i <len){
 8000cda:	e016      	b.n	8000d0a <sub_c+0x42>
		diff[i] = input1[i] - input2[i];
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	edd3 7a00 	vldr	s15, [r3]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d00:	edc3 7a00 	vstr	s15, [r3]
		i++;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
	while(i <len){
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dbe4      	blt.n	8000cdc <sub_c+0x14>
	}
}
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <avg_c>:


void avg_c(float *input,  int len, float *out){
 8000d1e:	b480      	push	{r7}
 8000d20:	b087      	sub	sp, #28
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	//float temp = 0;
	while(i<len){
 8000d2e:	e010      	b.n	8000d52 <avg_c+0x34>
		*out += input[i];
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	ed93 7a00 	vldr	s14, [r3]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	edc3 7a00 	vstr	s15, [r3]
		i++;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
	while(i<len){
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbea      	blt.n	8000d30 <avg_c+0x12>
	}
	*out /= len;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	edd3 6a00 	vldr	s13, [r3]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	edc3 7a00 	vstr	s15, [r3]
	//*out = temp;
}
 8000d74:	bf00      	nop
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <stdev_c>:

void stdev_c(float *input, int len, float *result){
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
	float ss = 0;
 8000d8c:	f04f 0300 	mov.w	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
	float sum = 0;
 8000d92:	f04f 0300 	mov.w	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
	int i = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
	while (i < len){
 8000d9c:	e022      	b.n	8000de4 <stdev_c+0x64>
		ss += input[i]*input[i];
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	ed93 7a00 	vldr	s14, [r3]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4413      	add	r3, r2
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dba:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc2:	edc7 7a07 	vstr	s15, [r7, #28]
		sum += input[i];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dda:	edc7 7a06 	vstr	s15, [r7, #24]
		i++;
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
	while (i < len){
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbd8      	blt.n	8000d9e <stdev_c+0x1e>
	}
	*result = sqrt((ss-(sum*sum)/len) / (len-1));
 8000dec:	ed97 7a06 	vldr	s14, [r7, #24]
 8000df0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e06:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e1e:	ee16 0a90 	vmov	r0, s13
 8000e22:	f7ff fb8b 	bl	800053c <__aeabi_f2d>
 8000e26:	4603      	mov	r3, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	ec44 3b10 	vmov	d0, r3, r4
 8000e2e:	f002 fd81 	bl	8003934 <sqrt>
 8000e32:	ec54 3b10 	vmov	r3, r4, d0
 8000e36:	4618      	mov	r0, r3
 8000e38:	4621      	mov	r1, r4
 8000e3a:	f7ff fe87 	bl	8000b4c <__aeabi_d2f>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3724      	adds	r7, #36	; 0x24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <conv_c>:



void conv_c(float *input1, float *input2, float *result, int len){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
	int i,j;
	int newLen = 2*len -1;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
	for(i=0; i<newLen; i++){
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e03c      	b.n	8000ee2 <conv_c+0x96>
		result[i]=0.0;
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
		for(j=0;j<len;j++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e029      	b.n	8000ed0 <conv_c+0x84>
			int new = i-j;
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	613b      	str	r3, [r7, #16]
			if(new<0){
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db27      	blt.n	8000eda <conv_c+0x8e>
				break;
			} else if (new<len){
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	da1b      	bge.n	8000eca <conv_c+0x7e>
				result[i] += input1[j] * input2[new];
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	ed93 7a00 	vldr	s14, [r3]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	edd3 6a00 	vldr	s13, [r3]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc3 7a00 	vstr	s15, [r3]
		for(j=0;j<len;j++){
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbd1      	blt.n	8000e7c <conv_c+0x30>
 8000ed8:	e000      	b.n	8000edc <conv_c+0x90>
				break;
 8000eda:	bf00      	nop
	for(i=0; i<newLen; i++){
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbbe      	blt.n	8000e68 <conv_c+0x1c>
			}
		}
	}
}
 8000eea:	bf00      	nop
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <corr_c>:

void corr_c(float *input1, float *input2, float *result, int len){
 8000ef6:	b480      	push	{r7}
 8000ef8:	b089      	sub	sp, #36	; 0x24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
	int i,j;
	int newLen = 2*len -1;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
	for(i=0; i< newLen; i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e040      	b.n	8000f94 <corr_c+0x9e>
		result[i] = 0.0;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
		for(j=0;j<len;j++){
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	e02f      	b.n	8000f86 <corr_c+0x90>
			int new = len + j - i- 1;
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	441a      	add	r2, r3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	3b01      	subs	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
			if(new == 0 || ((new>0)&&(new<len))){
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <corr_c+0x52>
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	dd1f      	ble.n	8000f80 <corr_c+0x8a>
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	da1b      	bge.n	8000f80 <corr_c+0x8a>
				result[i] = result[i] + input1[j]*input2[new];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	edd3 6a00 	vldr	s13, [r3]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	4413      	add	r3, r2
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7c:	edc3 7a00 	vstr	s15, [r3]
		for(j=0;j<len;j++){
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	3301      	adds	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbcb      	blt.n	8000f26 <corr_c+0x30>
	for(i=0; i< newLen; i++){
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbba      	blt.n	8000f12 <corr_c+0x1c>
			i++;
		}
	denominator = sqrt(denominator1*denominator2);
	*result = numerator / denominator;
	*result */
}
 8000f9c:	bf00      	nop
 8000f9e:	3724      	adds	r7, #36	; 0x24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <kalman_cmsis>:





void kalman_cmsis(float *inputArr, float *cmsis_output, int len, kalman_state *ks){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	float sum_pr = 0;
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
	float sub_mx = 0;
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	float mul_x = 0;
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
	float sub_k = 0;
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
	float a = 1;
 8000fce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000fd2:	613b      	str	r3, [r7, #16]
	for(int i = 0; i< len; i++){
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd8:	e05b      	b.n	8001092 <kalman_cmsis+0xea>
		//p=p+q
		arm_add_f32(&ks->p, &ks->q, &ks->p, 1);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f103 000c 	add.w	r0, r3, #12
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	f103 020c 	add.w	r2, r3, #12
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f002 fc17 	bl	800381c <arm_add_f32>
		arm_add_f32(&ks->p, &ks->r, &sum_pr, 1);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f103 000c 	add.w	r0, r3, #12
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	1d19      	adds	r1, r3, #4
 8000ff8:	f107 0220 	add.w	r2, r7, #32
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f002 fc0d 	bl	800381c <arm_add_f32>
		(ks->k) = (ks->p)/sum_pr;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	edd3 6a03 	vldr	s13, [r3, #12]
 8001008:	ed97 7a08 	vldr	s14, [r7, #32]
 800100c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	edc3 7a04 	vstr	s15, [r3, #16]
		arm_sub_f32(&inputArr[i], &ks->x, &sub_mx, 1);
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	18d0      	adds	r0, r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	f103 0108 	add.w	r1, r3, #8
 8001024:	f107 021c 	add.w	r2, r7, #28
 8001028:	2301      	movs	r3, #1
 800102a:	f002 fb43 	bl	80036b4 <arm_sub_f32>
		arm_mult_f32(&ks->k, &sub_mx, &mul_x, 1);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f103 0010 	add.w	r0, r3, #16
 8001034:	f107 0218 	add.w	r2, r7, #24
 8001038:	f107 011c 	add.w	r1, r7, #28
 800103c:	2301      	movs	r3, #1
 800103e:	f002 fb93 	bl	8003768 <arm_mult_f32>
		arm_add_f32(&ks->x, &mul_x, &ks->x, 1);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f103 0008 	add.w	r0, r3, #8
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f103 0208 	add.w	r2, r3, #8
 800104e:	f107 0118 	add.w	r1, r7, #24
 8001052:	2301      	movs	r3, #1
 8001054:	f002 fbe2 	bl	800381c <arm_add_f32>
		arm_sub_f32(&a, &ks->k, &sub_k, 1);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f103 0110 	add.w	r1, r3, #16
 800105e:	f107 0214 	add.w	r2, r7, #20
 8001062:	f107 0010 	add.w	r0, r7, #16
 8001066:	2301      	movs	r3, #1
 8001068:	f002 fb24 	bl	80036b4 <arm_sub_f32>
		arm_mult_f32(&sub_k, &ks->q, &ks->p, 1);
 800106c:	6839      	ldr	r1, [r7, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f103 020c 	add.w	r2, r3, #12
 8001074:	f107 0014 	add.w	r0, r7, #20
 8001078:	2301      	movs	r3, #1
 800107a:	f002 fb75 	bl	8003768 <arm_mult_f32>
		*(cmsis_output + i) = ks->x;
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	6892      	ldr	r2, [r2, #8]
 800108a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i< len; i++){
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3301      	adds	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
 8001092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	db9f      	blt.n	8000fda <kalman_cmsis+0x32>
	}

}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <main>:
int size = sizeof(array_test)/sizeof(float);



int main(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b0b1      	sub	sp, #196	; 0xc4
 80010a8:	af02      	add	r7, sp, #8
	// ----
	 */


	//CMSIS Declarations
	float cmsis_output[size];
 80010aa:	4bea      	ldr	r3, [pc, #936]	; (8001454 <main+0x3b0>)
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	1e43      	subs	r3, r0, #1
 80010b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010b4:	4603      	mov	r3, r0
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	f04f 0400 	mov.w	r4, #0
 80010c4:	0154      	lsls	r4, r2, #5
 80010c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010ca:	014b      	lsls	r3, r1, #5
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	f04f 0400 	mov.w	r4, #0
 80010dc:	0154      	lsls	r4, r2, #5
 80010de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80010e2:	014b      	lsls	r3, r1, #5
 80010e4:	4603      	mov	r3, r0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	3303      	adds	r3, #3
 80010ea:	3307      	adds	r3, #7
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	ebad 0d03 	sub.w	sp, sp, r3
 80010f4:	ab02      	add	r3, sp, #8
 80010f6:	3303      	adds	r3, #3
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float cmsis_diff[size];
 8001100:	4bd4      	ldr	r3, [pc, #848]	; (8001454 <main+0x3b0>)
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	1e43      	subs	r3, r0, #1
 8001106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800110a:	4603      	mov	r3, r0
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	0154      	lsls	r4, r2, #5
 800111c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001120:	014b      	lsls	r3, r1, #5
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	f04f 0400 	mov.w	r4, #0
 8001132:	0154      	lsls	r4, r2, #5
 8001134:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001138:	014b      	lsls	r3, r1, #5
 800113a:	4603      	mov	r3, r0
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	3303      	adds	r3, #3
 8001140:	3307      	adds	r3, #7
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	ebad 0d03 	sub.w	sp, sp, r3
 800114a:	ab02      	add	r3, sp, #8
 800114c:	3303      	adds	r3, #3
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float cmsis_stdev;
	float cmsis_diffavg;
	float cmsis_corr[2*size-1];
 8001156:	4bbf      	ldr	r3, [pc, #764]	; (8001454 <main+0x3b0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	1e58      	subs	r0, r3, #1
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001164:	4603      	mov	r3, r0
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	0154      	lsls	r4, r2, #5
 8001176:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800117a:	014b      	lsls	r3, r1, #5
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f04f 0400 	mov.w	r4, #0
 800118c:	0154      	lsls	r4, r2, #5
 800118e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001192:	014b      	lsls	r3, r1, #5
 8001194:	4603      	mov	r3, r0
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	3303      	adds	r3, #3
 800119a:	3307      	adds	r3, #7
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	ebad 0d03 	sub.w	sp, sp, r3
 80011a4:	ab02      	add	r3, sp, #8
 80011a6:	3303      	adds	r3, #3
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float cmsis_conv[2*size-1];
 80011b0:	4ba8      	ldr	r3, [pc, #672]	; (8001454 <main+0x3b0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	1e43      	subs	r3, r0, #1
 80011ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80011be:	4603      	mov	r3, r0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f04f 0400 	mov.w	r4, #0
 80011ce:	0154      	lsls	r4, r2, #5
 80011d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011d4:	014b      	lsls	r3, r1, #5
 80011d6:	4603      	mov	r3, r0
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	f04f 0400 	mov.w	r4, #0
 80011e6:	0154      	lsls	r4, r2, #5
 80011e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ec:	014b      	lsls	r3, r1, #5
 80011ee:	4603      	mov	r3, r0
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	3303      	adds	r3, #3
 80011f4:	3307      	adds	r3, #7
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	ebad 0d03 	sub.w	sp, sp, r3
 80011fe:	ab02      	add	r3, sp, #8
 8001200:	3303      	adds	r3, #3
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float c_output[size];
 800120a:	4b92      	ldr	r3, [pc, #584]	; (8001454 <main+0x3b0>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	1e43      	subs	r3, r0, #1
 8001210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001214:	4603      	mov	r3, r0
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f04f 0400 	mov.w	r4, #0
 8001224:	0154      	lsls	r4, r2, #5
 8001226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800122a:	014b      	lsls	r3, r1, #5
 800122c:	4603      	mov	r3, r0
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	0154      	lsls	r4, r2, #5
 800123e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001242:	014b      	lsls	r3, r1, #5
 8001244:	4603      	mov	r3, r0
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	3303      	adds	r3, #3
 800124a:	3307      	adds	r3, #7
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	ebad 0d03 	sub.w	sp, sp, r3
 8001254:	ab02      	add	r3, sp, #8
 8001256:	3303      	adds	r3, #3
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float c_diff[size];
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <main+0x3b0>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	1e43      	subs	r3, r0, #1
 8001266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800126a:	4603      	mov	r3, r0
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	0154      	lsls	r4, r2, #5
 800127c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001280:	014b      	lsls	r3, r1, #5
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	f04f 0400 	mov.w	r4, #0
 8001292:	0154      	lsls	r4, r2, #5
 8001294:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001298:	014b      	lsls	r3, r1, #5
 800129a:	4603      	mov	r3, r0
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	3303      	adds	r3, #3
 80012a0:	3307      	adds	r3, #7
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	ebad 0d03 	sub.w	sp, sp, r3
 80012aa:	ab02      	add	r3, sp, #8
 80012ac:	3303      	adds	r3, #3
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float c_stdev;
	float c_diffavg;
	float c_corr[2*size-1];
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <main+0x3b0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	1e58      	subs	r0, r3, #1
 80012be:	1e43      	subs	r3, r0, #1
 80012c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012c4:	4603      	mov	r3, r0
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f04f 0400 	mov.w	r4, #0
 80012d4:	0154      	lsls	r4, r2, #5
 80012d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012da:	014b      	lsls	r3, r1, #5
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	f04f 0400 	mov.w	r4, #0
 80012ec:	0154      	lsls	r4, r2, #5
 80012ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f2:	014b      	lsls	r3, r1, #5
 80012f4:	4603      	mov	r3, r0
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	3303      	adds	r3, #3
 80012fa:	3307      	adds	r3, #7
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	ebad 0d03 	sub.w	sp, sp, r3
 8001304:	ab02      	add	r3, sp, #8
 8001306:	3303      	adds	r3, #3
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	67fb      	str	r3, [r7, #124]	; 0x7c
	float c_conv[2*size-1];
 800130e:	4b51      	ldr	r3, [pc, #324]	; (8001454 <main+0x3b0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	1e58      	subs	r0, r3, #1
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	67bb      	str	r3, [r7, #120]	; 0x78
 800131a:	4603      	mov	r3, r0
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f04f 0400 	mov.w	r4, #0
 800132a:	0154      	lsls	r4, r2, #5
 800132c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001330:	014b      	lsls	r3, r1, #5
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	f04f 0400 	mov.w	r4, #0
 8001342:	0154      	lsls	r4, r2, #5
 8001344:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001348:	014b      	lsls	r3, r1, #5
 800134a:	4603      	mov	r3, r0
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	3303      	adds	r3, #3
 8001350:	3307      	adds	r3, #7
 8001352:	08db      	lsrs	r3, r3, #3
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	ebad 0d03 	sub.w	sp, sp, r3
 800135a:	ab02      	add	r3, sp, #8
 800135c:	3303      	adds	r3, #3
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	677b      	str	r3, [r7, #116]	; 0x74


	float asm_output[size];
 8001364:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <main+0x3b0>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	1e43      	subs	r3, r0, #1
 800136a:	673b      	str	r3, [r7, #112]	; 0x70
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	f04f 0400 	mov.w	r4, #0
 800137c:	0154      	lsls	r4, r2, #5
 800137e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001382:	014b      	lsls	r3, r1, #5
 8001384:	4603      	mov	r3, r0
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	f04f 0400 	mov.w	r4, #0
 8001394:	0154      	lsls	r4, r2, #5
 8001396:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800139a:	014b      	lsls	r3, r1, #5
 800139c:	4603      	mov	r3, r0
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	3303      	adds	r3, #3
 80013a2:	3307      	adds	r3, #7
 80013a4:	08db      	lsrs	r3, r3, #3
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	ebad 0d03 	sub.w	sp, sp, r3
 80013ac:	ab02      	add	r3, sp, #8
 80013ae:	3303      	adds	r3, #3
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	float asm_diff[size];
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <main+0x3b0>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	1e43      	subs	r3, r0, #1
 80013bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	f04f 0400 	mov.w	r4, #0
 80013ce:	0154      	lsls	r4, r2, #5
 80013d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013d4:	014b      	lsls	r3, r1, #5
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	f04f 0400 	mov.w	r4, #0
 80013e6:	0154      	lsls	r4, r2, #5
 80013e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ec:	014b      	lsls	r3, r1, #5
 80013ee:	4603      	mov	r3, r0
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	3303      	adds	r3, #3
 80013f4:	3307      	adds	r3, #7
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	ebad 0d03 	sub.w	sp, sp, r3
 80013fe:	ab02      	add	r3, sp, #8
 8001400:	3303      	adds	r3, #3
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	667b      	str	r3, [r7, #100]	; 0x64
	float asm_stdev;
	float asm_diffavg;
	float asm_corr[2*size-1];
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <main+0x3b0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	1e43      	subs	r3, r0, #1
 8001412:	663b      	str	r3, [r7, #96]	; 0x60
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	f04f 0400 	mov.w	r4, #0
 8001424:	0154      	lsls	r4, r2, #5
 8001426:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800142a:	014b      	lsls	r3, r1, #5
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f04f 0400 	mov.w	r4, #0
 800143c:	0154      	lsls	r4, r2, #5
 800143e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001442:	014b      	lsls	r3, r1, #5
 8001444:	4603      	mov	r3, r0
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	3303      	adds	r3, #3
 800144a:	3307      	adds	r3, #7
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	e002      	b.n	8001458 <main+0x3b4>
 8001452:	bf00      	nop
 8001454:	20000194 	.word	0x20000194
 8001458:	ebad 0d03 	sub.w	sp, sp, r3
 800145c:	ab02      	add	r3, sp, #8
 800145e:	3303      	adds	r3, #3
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	65fb      	str	r3, [r7, #92]	; 0x5c
	float asm_conv[2*size-1];
 8001466:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <main+0x604>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	1e58      	subs	r0, r3, #1
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	65bb      	str	r3, [r7, #88]	; 0x58
 8001472:	4603      	mov	r3, r0
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	f04f 0400 	mov.w	r4, #0
 8001482:	0154      	lsls	r4, r2, #5
 8001484:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001488:	014b      	lsls	r3, r1, #5
 800148a:	4603      	mov	r3, r0
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f04f 0400 	mov.w	r4, #0
 800149a:	0154      	lsls	r4, r2, #5
 800149c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014a0:	014b      	lsls	r3, r1, #5
 80014a2:	4603      	mov	r3, r0
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	3303      	adds	r3, #3
 80014a8:	3307      	adds	r3, #7
 80014aa:	08db      	lsrs	r3, r3, #3
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	ebad 0d03 	sub.w	sp, sp, r3
 80014b2:	ab02      	add	r3, sp, #8
 80014b4:	3303      	adds	r3, #3
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fa25 	bl	800190a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f8fc 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f000 f94c 	bl	8001760 <MX_GPIO_Init>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		float q = 0.1;
 80014c8:	4b78      	ldr	r3, [pc, #480]	; (80016ac <main+0x608>)
 80014ca:	653b      	str	r3, [r7, #80]	; 0x50
		float r = 0.1;
 80014cc:	4b77      	ldr	r3, [pc, #476]	; (80016ac <main+0x608>)
 80014ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		float x = 5.0;
 80014d0:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <main+0x60c>)
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
		float p = 0.1;
 80014d4:	4b75      	ldr	r3, [pc, #468]	; (80016ac <main+0x608>)
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
		float k = 0.0;
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	643b      	str	r3, [r7, #64]	; 0x40
		//float measurement;

		c_state.q = q;
 80014de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e0:	617b      	str	r3, [r7, #20]
		c_state.r = r;
 80014e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e4:	61bb      	str	r3, [r7, #24]
		c_state.x = x;
 80014e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e8:	61fb      	str	r3, [r7, #28]
		c_state.p = p;
 80014ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ec:	623b      	str	r3, [r7, #32]
		c_state.k = k;
 80014ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

		cmsis.q = q;
 80014f2:	4a70      	ldr	r2, [pc, #448]	; (80016b4 <main+0x610>)
 80014f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014f6:	6013      	str	r3, [r2, #0]
		cmsis.r = r;
 80014f8:	4a6e      	ldr	r2, [pc, #440]	; (80016b4 <main+0x610>)
 80014fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fc:	6053      	str	r3, [r2, #4]
		cmsis.x = x;
 80014fe:	4a6d      	ldr	r2, [pc, #436]	; (80016b4 <main+0x610>)
 8001500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001502:	6093      	str	r3, [r2, #8]
		cmsis.p = p;
 8001504:	4a6b      	ldr	r2, [pc, #428]	; (80016b4 <main+0x610>)
 8001506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001508:	60d3      	str	r3, [r2, #12]
		cmsis.k = k;
 800150a:	4a6a      	ldr	r2, [pc, #424]	; (80016b4 <main+0x610>)
 800150c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150e:	6113      	str	r3, [r2, #16]

		kstate.q = q;
 8001510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001512:	603b      	str	r3, [r7, #0]
		kstate.r = r;
 8001514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001516:	607b      	str	r3, [r7, #4]
		kstate.x = x;
 8001518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800151a:	60bb      	str	r3, [r7, #8]
		kstate.p = p;
 800151c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800151e:	60fb      	str	r3, [r7, #12]
		kstate.k = k;
 8001520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001522:	613b      	str	r3, [r7, #16]

		//  ------------ CMSIS IMPLEMENTATIONS  ------------
		kalman_cmsis(array_test, cmsis_output, size, &cmsis);
 8001524:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001528:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <main+0x604>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <main+0x610>)
 800152e:	4862      	ldr	r0, [pc, #392]	; (80016b8 <main+0x614>)
 8001530:	f7ff fd3a 	bl	8000fa8 <kalman_cmsis>
		//1. Subtraction
		arm_sub_f32(array_test, cmsis_output, cmsis_diff, size);
 8001534:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001538:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800153c:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <main+0x604>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	485d      	ldr	r0, [pc, #372]	; (80016b8 <main+0x614>)
 8001542:	f002 f8b7 	bl	80036b4 <arm_sub_f32>
		//2. Standard Deviation and Average of Differences
		arm_std_f32(cmsis_diff, size, &cmsis_stdev);
 8001546:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <main+0x604>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001554:	461a      	mov	r2, r3
 8001556:	f001 fa95 	bl	8002a84 <arm_std_f32>
		arm_mean_f32(cmsis_diff, size, &cmsis_diffavg);
 800155a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800155e:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <main+0x604>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001568:	461a      	mov	r2, r3
 800156a:	f001 fb15 	bl	8002b98 <arm_mean_f32>
		//3. Correlation
		arm_correlate_f32(array_test, size, cmsis_output, size, cmsis_corr);
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <main+0x604>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001578:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <main+0x604>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	484c      	ldr	r0, [pc, #304]	; (80016b8 <main+0x614>)
 8001588:	f001 fb44 	bl	8002c14 <arm_correlate_f32>
		//4. Convolution
		arm_conv_f32(array_test, size, cmsis_output, size, cmsis_conv);
 800158c:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <main+0x604>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001596:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <main+0x604>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	4603      	mov	r3, r0
 80015a4:	4844      	ldr	r0, [pc, #272]	; (80016b8 <main+0x614>)
 80015a6:	f001 fdeb 	bl	8003180 <arm_conv_f32>
		//  ------------ CMSIS IMPLEMENTATIONS  ------------

		//  ------------ C IMPLEMENTATIONS  ------------
		kalman_c(array_test, c_output, &c_state, size);
 80015aa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <main+0x604>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f107 0214 	add.w	r2, r7, #20
 80015b6:	4840      	ldr	r0, [pc, #256]	; (80016b8 <main+0x614>)
 80015b8:	f7ff fb18 	bl	8000bec <kalman_c>

		sub_c(array_test, c_output, c_diff, size);
 80015bc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80015c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80015c4:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <main+0x604>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	483b      	ldr	r0, [pc, #236]	; (80016b8 <main+0x614>)
 80015ca:	f7ff fb7d 	bl	8000cc8 <sub_c>
		stdev_c(c_diff, size, &c_stdev);
 80015ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80015d2:	4b35      	ldr	r3, [pc, #212]	; (80016a8 <main+0x604>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fbd0 	bl	8000d80 <stdev_c>
		avg_c(c_diff, size, &c_diffavg);
 80015e0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80015e4:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <main+0x604>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fb96 	bl	8000d1e <avg_c>
		conv_c(array_test, c_output, c_conv, size);
 80015f2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80015f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x604>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	482e      	ldr	r0, [pc, #184]	; (80016b8 <main+0x614>)
 80015fe:	f7ff fc25 	bl	8000e4c <conv_c>
		corr_c(array_test, c_output, c_corr, size);
 8001602:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001606:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <main+0x604>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	482a      	ldr	r0, [pc, #168]	; (80016b8 <main+0x614>)
 800160e:	f7ff fc72 	bl	8000ef6 <corr_c>

		//  ------------ C IMPLEMENTATIONS  ------------

		for (int i = 0; i<size; i++){
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001618:	e018      	b.n	800164c <main+0x5a8>
			//measurement = array_test[i];
			kalman(&kstate, array_test[i]);
 800161a:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <main+0x614>)
 800161c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	463b      	mov	r3, r7
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fde4 	bl	80001fc <kalman>
			asm_output[i] = kstate.x;
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001638:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	601a      	str	r2, [r3, #0]
		for (int i = 0; i<size; i++){
 8001642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001646:	3301      	adds	r3, #1
 8001648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <main+0x604>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001654:	429a      	cmp	r2, r3
 8001656:	dbe0      	blt.n	800161a <main+0x576>
		}


		// ------------ ASSEMBLY IMPLEMENTATION ------------
		//KalmanFilter(array_test, asm_output, &kstate, size);
		sub_c(array_test, asm_output, asm_diff, size);
 8001658:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800165a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <main+0x604>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <main+0x614>)
 8001662:	f7ff fb31 	bl	8000cc8 <sub_c>
		stdev_c(asm_diff, size, &asm_stdev);
 8001666:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <main+0x604>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fb85 	bl	8000d80 <stdev_c>
		avg_c(c_diff, size, &asm_diffavg);
 8001676:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <main+0x604>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fb4b 	bl	8000d1e <avg_c>
		conv_c(array_test, asm_output, asm_conv, size);
 8001688:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800168a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <main+0x604>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <main+0x614>)
 8001692:	f7ff fbdb 	bl	8000e4c <conv_c>
		corr_c(array_test, asm_output, asm_corr, size);
 8001696:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800169a:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <main+0x604>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <main+0x614>)
 80016a0:	f7ff fc29 	bl	8000ef6 <corr_c>
  {
 80016a4:	e710      	b.n	80014c8 <main+0x424>
 80016a6:	bf00      	nop
 80016a8:	20000194 	.word	0x20000194
 80016ac:	3dcccccd 	.word	0x3dcccccd
 80016b0:	40a00000 	.word	0x40a00000
 80016b4:	2000023c 	.word	0x2000023c
 80016b8:	20000000 	.word	0x20000000

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2244      	movs	r2, #68	; 0x44
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f92a 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 fa8e 	bl	8001c00 <HAL_PWREx_ControlVoltageScaling>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80016ea:	f000 f85d 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016ee:	2310      	movs	r3, #16
 80016f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016f2:	2301      	movs	r3, #1
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001702:	2301      	movs	r3, #1
 8001704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800170a:	233c      	movs	r3, #60	; 0x3c
 800170c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170e:	2302      	movs	r3, #2
 8001710:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001716:	2302      	movs	r3, #2
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fb12 	bl	8001d48 <HAL_RCC_OscConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800172a:	f000 f83d 	bl	80017a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172e:	230f      	movs	r3, #15
 8001730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001732:	2303      	movs	r3, #3
 8001734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2105      	movs	r1, #5
 8001746:	4618      	mov	r0, r3
 8001748:	f000 ff24 	bl	8002594 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001752:	f000 f829 	bl	80017a8 <Error_Handler>
  }
}
 8001756:	bf00      	nop
 8001758:	3758      	adds	r7, #88	; 0x58
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_GPIO_Init+0x44>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <MX_GPIO_Init+0x44>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x44>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_GPIO_Init+0x44>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <MX_GPIO_Init+0x44>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_GPIO_Init+0x44>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ae:	e7fe      	b.n	80017ae <Error_Handler+0x6>

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_MspInit+0x44>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_MspInit+0x44>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6613      	str	r3, [r2, #96]	; 0x60
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_MspInit+0x44>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_MspInit+0x44>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <NMI_Handler+0x4>

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f8b6 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <SystemInit+0x64>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <SystemInit+0x64>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <SystemInit+0x68>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <SystemInit+0x68>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <SystemInit+0x68>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <SystemInit+0x68>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <SystemInit+0x68>)
 8001878:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800187c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001880:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <SystemInit+0x68>)
 8001884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001888:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <SystemInit+0x68>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <SystemInit+0x68>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <SystemInit+0x68>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SystemInit+0x64>)
 800189e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a2:	609a      	str	r2, [r3, #8]
#endif
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00
 80018b4:	40021000 	.word	0x40021000

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018bc:	f7ff ffc6 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018c2:	e003      	b.n	80018cc <LoopCopyDataInit>

080018c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ca:	3104      	adds	r1, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80018d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018d4:	d3f6      	bcc.n	80018c4 <CopyDataInit>
	ldr	r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d8:	e002      	b.n	80018e0 <LoopFillZerobss>

080018da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018dc:	f842 3b04 	str.w	r3, [r2], #4

080018e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <LoopForever+0x16>)
	cmp	r2, r3
 80018e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018e4:	d3f9      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f001 fff9 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff fbdb 	bl	80010a4 <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80018f4:	08003c60 	.word	0x08003c60
	ldr	r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018fc:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 8001900:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8001904:	20000254 	.word	0x20000254

08001908 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_IRQHandler>

0800190a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f91f 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f80e 	bl	800193c <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	e001      	b.n	8001930 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192c:	f7ff ff40 	bl	80017b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001930:	79fb      	ldrb	r3, [r7, #7]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_InitTick+0x6c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_InitTick+0x70>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_InitTick+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f91d 	bl	8001ba6 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d809      	bhi.n	800198c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001980:	f000 f8f5 	bl	8001b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_InitTick+0x74>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e007      	b.n	800199c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e004      	b.n	800199c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	e001      	b.n	800199c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200001a0 	.word	0x200001a0
 80019ac:	20000198 	.word	0x20000198
 80019b0:	2000019c 	.word	0x2000019c

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200001a0 	.word	0x200001a0
 80019d8:	20000250 	.word	0x20000250

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000250 	.word	0x20000250

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff47 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff5c 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffb0 	bl	8001b14 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d102      	bne.n	8001bd8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd6:	e00b      	b.n	8001bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be6:	d102      	bne.n	8001bee <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	e000      	b.n	8001bf0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001bee:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40007000 	.word	0x40007000

08001c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d141      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1a:	d131      	bne.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c34:	4a41      	ldr	r2, [pc, #260]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c3c:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2232      	movs	r2, #50	; 0x32
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c52:	e002      	b.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c66:	d102      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f2      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7a:	d158      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e057      	b.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c86:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c90:	e04d      	b.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c98:	d141      	bne.n	8001d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca6:	d131      	bne.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cae:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc0:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2232      	movs	r2, #50	; 0x32
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	0c9b      	lsrs	r3, r3, #18
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cde:	e002      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf2:	d102      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f2      	bne.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	d112      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e011      	b.n	8001d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d1c:	e007      	b.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	20000198 	.word	0x20000198
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f000 bc16 	b.w	8002588 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5c:	4ba0      	ldr	r3, [pc, #640]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d66:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80e4 	beq.w	8001f46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4c>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	f040 808b 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	f040 8087 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_OscConfig+0x64>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e3ed      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x7e>
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc4:	e005      	b.n	8001dd2 <HAL_RCC_OscConfig+0x8a>
 8001dc6:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d223      	bcs.n	8001e1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fd90 	bl	8002900 <RCC_SetFlashLatencyFromMSIRange>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e3ce      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dea:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7c      	ldr	r2, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4977      	ldr	r1, [pc, #476]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	4972      	ldr	r1, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e025      	b.n	8001e6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1e:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a6f      	ldr	r2, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	496a      	ldr	r1, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	4965      	ldr	r1, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 fd50 	bl	8002900 <RCC_SetFlashLatencyFromMSIRange>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e38e      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6a:	f000 fcbf 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8001e6e:	4601      	mov	r1, r0
 8001e70:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x29c>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	fa21 f303 	lsr.w	r3, r1, r3
 8001e86:	4a58      	ldr	r2, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x2a0>)
 8001e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e8a:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x2a4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fd54 	bl	800193c <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d052      	beq.n	8001f44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	e372      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d032      	beq.n	8001f10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eaa:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff fd91 	bl	80019dc <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fd8d 	bl	80019dc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e35b      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001edc:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	493a      	ldr	r1, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	4935      	ldr	r1, [pc, #212]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e01a      	b.n	8001f46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a32      	ldr	r2, [pc, #200]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fd5e 	bl	80019dc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f24:	f7ff fd5a 	bl	80019dc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e328      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1dc>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d073      	beq.n	800203a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x21c>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d10e      	bne.n	8001f7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d10b      	bne.n	8001f7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d063      	beq.n	8002038 <HAL_RCC_OscConfig+0x2f0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d15f      	bne.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e305      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_OscConfig+0x24c>
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e01d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x288>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x270>
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e00b      	b.n	8001fd0 <HAL_RCC_OscConfig+0x288>
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_RCC_OscConfig+0x298>)
 8001fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fd00 	bl	80019dc <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	e010      	b.n	8002002 <HAL_RCC_OscConfig+0x2ba>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08003c0c 	.word	0x08003c0c
 8001fe8:	20000198 	.word	0x20000198
 8001fec:	2000019c 	.word	0x2000019c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fcf4 	bl	80019dc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e2c2      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4baf      	ldr	r3, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2a8>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fce4 	bl	80019dc <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fce0 	bl	80019dc <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e2ae      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800202a:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x2d0>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d060      	beq.n	8002108 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x310>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d119      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d116      	bne.n	8002086 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	4b99      	ldr	r3, [pc, #612]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x328>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e28b      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	4990      	ldr	r1, [pc, #576]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002084:	e040      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d023      	beq.n	80020d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a8b      	ldr	r2, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7ff fc9f 	bl	80019dc <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7ff fc9b 	bl	80019dc <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e269      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	497c      	ldr	r1, [pc, #496]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d6:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7ff fc7b 	bl	80019dc <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff fc77 	bl	80019dc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e245      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03c      	beq.n	800218e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002122:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7ff fc56 	bl	80019dc <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002134:	f7ff fc52 	bl	80019dc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e220      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002146:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ef      	beq.n	8002134 <HAL_RCC_OscConfig+0x3ec>
 8002154:	e01b      	b.n	800218e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7ff fc39 	bl	80019dc <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216e:	f7ff fc35 	bl	80019dc <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e203      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002180:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ef      	bne.n	800216e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80a6 	beq.w	80022e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a43      	ldr	r2, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3a      	ldr	r2, [pc, #232]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fbfc 	bl	80019dc <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7ff fbf8 	bl	80019dc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1c6      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_RCC_OscConfig+0x57c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x4d8>
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221e:	e024      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d110      	bne.n	800224a <HAL_RCC_OscConfig+0x502>
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a20      	ldr	r2, [pc, #128]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	e00f      	b.n	800226a <HAL_RCC_OscConfig+0x522>
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002252:	f023 0301 	bic.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002262:	f023 0304 	bic.w	r3, r3, #4
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff fbb3 	bl	80019dc <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff fbaf 	bl	80019dc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e17b      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x578>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ed      	beq.n	800227a <HAL_RCC_OscConfig+0x532>
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff fb9c 	bl	80019dc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff fb98 	bl	80019dc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d906      	bls.n	80022c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e164      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c8:	4ba8      	ldr	r3, [pc, #672]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80022ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e8      	bne.n	80022a8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4ba3      	ldr	r3, [pc, #652]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4aa2      	ldr	r2, [pc, #648]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d03c      	beq.n	800236e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01c      	beq.n	8002336 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022fc:	4b9b      	ldr	r3, [pc, #620]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80022fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002302:	4a9a      	ldr	r2, [pc, #616]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff fb66 	bl	80019dc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002314:	f7ff fb62 	bl	80019dc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e130      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ef      	beq.n	8002314 <HAL_RCC_OscConfig+0x5cc>
 8002334:	e01b      	b.n	800236e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002336:	4b8d      	ldr	r3, [pc, #564]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233c:	4a8b      	ldr	r2, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff fb49 	bl	80019dc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800234e:	f7ff fb45 	bl	80019dc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e113      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002360:	4b82      	ldr	r3, [pc, #520]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1ef      	bne.n	800234e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8107 	beq.w	8002586 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2b02      	cmp	r3, #2
 800237e:	f040 80cb 	bne.w	8002518 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002382:	4b7a      	ldr	r3, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	429a      	cmp	r2, r3
 8002394:	d12c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	3b01      	subs	r3, #1
 80023a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d123      	bne.n	80023f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d11b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d113      	bne.n	80023f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	3b01      	subs	r3, #1
 80023ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d06d      	beq.n	80024cc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d068      	beq.n	80024c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023f6:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0ba      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800241e:	f7ff fadd 	bl	80019dc <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002426:	f7ff fad9 	bl	80019dc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0a7      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x828>)
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002454:	3a01      	subs	r2, #1
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	4311      	orrs	r1, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002466:	0852      	lsrs	r2, r2, #1
 8002468:	3a01      	subs	r2, #1
 800246a:	0552      	lsls	r2, r2, #21
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002472:	0852      	lsrs	r2, r2, #1
 8002474:	3a01      	subs	r2, #1
 8002476:	0652      	lsls	r2, r2, #25
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247e:	06d2      	lsls	r2, r2, #27
 8002480:	430a      	orrs	r2, r1
 8002482:	493a      	ldr	r1, [pc, #232]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002484:	4313      	orrs	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024a0:	f7ff fa9c 	bl	80019dc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7ff fa98 	bl	80019dc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e066      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c6:	e05e      	b.n	8002586 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e05d      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d156      	bne.n	8002586 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <HAL_RCC_OscConfig+0x824>)
 80024ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024f0:	f7ff fa74 	bl	80019dc <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff fa70 	bl	80019dc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e03e      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x7b0>
 8002516:	e036      	b.n	8002586 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d031      	beq.n	8002582 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002528:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x824>)
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_RCC_OscConfig+0x824>)
 8002548:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7ff fa43 	bl	80019dc <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e00c      	b.n	8002574 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7ff fa3f 	bl	80019dc <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d905      	bls.n	8002574 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e00d      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
 800256c:	40021000 	.word	0x40021000
 8002570:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_RCC_OscConfig+0x848>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_OscConfig+0x812>
 8002580:	e001      	b.n	8002586 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e10f      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b89      	ldr	r3, [pc, #548]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 020f 	bic.w	r2, r3, #15
 80025c2:	4984      	ldr	r1, [pc, #528]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b82      	ldr	r3, [pc, #520]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0f7      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8089 	beq.w	80026fc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d133      	bne.n	800265a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e4      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002602:	f000 f9d7 	bl	80029b4 <RCC_GetSysClockFreqFromPLLSource>
 8002606:	4602      	mov	r2, r0
 8002608:	4b74      	ldr	r3, [pc, #464]	; (80027dc <HAL_RCC_ClockConfig+0x248>)
 800260a:	429a      	cmp	r2, r3
 800260c:	d955      	bls.n	80026ba <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800260e:	4b72      	ldr	r3, [pc, #456]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800261a:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002622:	4a6d      	ldr	r2, [pc, #436]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e044      	b.n	80026ba <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d03e      	beq.n	80026ba <HAL_RCC_ClockConfig+0x126>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d13a      	bne.n	80026ba <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800264c:	4a62      	ldr	r2, [pc, #392]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800264e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002652:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e02f      	b.n	80026ba <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d115      	bne.n	800269a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0ac      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800267a:	4b57      	ldr	r3, [pc, #348]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0a0      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268a:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e098      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800269a:	f000 f8a7 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b4e      	ldr	r3, [pc, #312]	; (80027dc <HAL_RCC_ClockConfig+0x248>)
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d909      	bls.n	80026ba <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ae:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f023 0203 	bic.w	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4944      	ldr	r1, [pc, #272]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7ff f986 	bl	80019dc <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d4:	f7ff f982 	bl	80019dc <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e070      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 020c 	and.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d1eb      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4930      	ldr	r1, [pc, #192]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
 800271a:	e008      	b.n	800272e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d105      	bne.n	800272e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d210      	bcs.n	800275e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 020f 	bic.w	r2, r3, #15
 8002744:	4923      	ldr	r1, [pc, #140]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_ClockConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e036      	b.n	80027cc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4918      	ldr	r1, [pc, #96]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4910      	ldr	r1, [pc, #64]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279c:	f000 f826 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027a0:	4601      	mov	r1, r0
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <HAL_RCC_ClockConfig+0x24c>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x250>)
 80027ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x254>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f8bb 	bl	800193c <HAL_InitTick>
 80027c6:	4603      	mov	r3, r0
 80027c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	04c4b400 	.word	0x04c4b400
 80027e0:	08003c0c 	.word	0x08003c0c
 80027e4:	20000198 	.word	0x20000198
 80027e8:	2000019c 	.word	0x2000019c

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x34>
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d121      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d11e      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e005      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d102      	bne.n	800286a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e004      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b08      	cmp	r3, #8
 800286e:	d101      	bne.n	8002874 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002872:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d133      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0xa4>
 800288a:	2b03      	cmp	r3, #3
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0xaa>
 800288e:	e005      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002892:	617b      	str	r3, [r7, #20]
      break;
 8002894:	e005      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002898:	617b      	str	r3, [r7, #20]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	617b      	str	r3, [r7, #20]
      break;
 80028a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	3301      	adds	r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	fb02 f203 	mul.w	r2, r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	0e5b      	lsrs	r3, r3, #25
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028e2:	69bb      	ldr	r3, [r7, #24]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3724      	adds	r7, #36	; 0x24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08003c1c 	.word	0x08003c1c
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	007a1200 	.word	0x007a1200

08002900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002918:	f7ff f952 	bl	8001bc0 <HAL_PWREx_GetVoltageRange>
 800291c:	6178      	str	r0, [r7, #20]
 800291e:	e014      	b.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002938:	f7ff f942 	bl	8001bc0 <HAL_PWREx_GetVoltageRange>
 800293c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d10b      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d913      	bls.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2ba0      	cmp	r3, #160	; 0xa0
 800295c:	d902      	bls.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800295e:	2302      	movs	r3, #2
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e00d      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002964:	2301      	movs	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e00a      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b7f      	cmp	r3, #127	; 0x7f
 800296e:	d902      	bls.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002970:	2302      	movs	r3, #2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	e004      	b.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b70      	cmp	r3, #112	; 0x70
 800297a:	d101      	bne.n	8002980 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800297c:	2301      	movs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 020f 	bic.w	r2, r3, #15
 8002988:	4909      	ldr	r1, [pc, #36]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40022000 	.word	0x40022000

080029b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80029be:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d118      	bne.n	80029fc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e005      	b.n	80029f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d002      	beq.n	8002a12 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d003      	beq.n	8002a18 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002a10:	e005      	b.n	8002a1e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002a14:	613b      	str	r3, [r7, #16]
    break;
 8002a16:	e005      	b.n	8002a24 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002a1a:	613b      	str	r3, [r7, #16]
    break;
 8002a1c:	e002      	b.n	8002a24 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
    break;
 8002a22:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	fb02 f203 	mul.w	r2, r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	0e5b      	lsrs	r3, r3, #25
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	3301      	adds	r3, #1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a64:	683b      	ldr	r3, [r7, #0]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08003c1c 	.word	0x08003c1c
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <arm_std_f32>:
 8002a84:	2901      	cmp	r1, #1
 8002a86:	d97d      	bls.n	8002b84 <arm_std_f32+0x100>
 8002a88:	b530      	push	{r4, r5, lr}
 8002a8a:	ed2d 8b02 	vpush	{d8}
 8002a8e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002b94 <arm_std_f32+0x110>
 8002a92:	088d      	lsrs	r5, r1, #2
 8002a94:	b083      	sub	sp, #12
 8002a96:	eef0 4a47 	vmov.f32	s9, s14
 8002a9a:	d028      	beq.n	8002aee <arm_std_f32+0x6a>
 8002a9c:	f100 0310 	add.w	r3, r0, #16
 8002aa0:	462c      	mov	r4, r5
 8002aa2:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002aa6:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002aaa:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002aae:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002ab2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002ab6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8002aba:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002abe:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002ac2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002ac6:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002aca:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8002ace:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002ad2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002ad6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002ada:	3c01      	subs	r4, #1
 8002adc:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002ae0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002ae4:	f103 0310 	add.w	r3, r3, #16
 8002ae8:	d1db      	bne.n	8002aa2 <arm_std_f32+0x1e>
 8002aea:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002aee:	f011 0303 	ands.w	r3, r1, #3
 8002af2:	d01b      	beq.n	8002b2c <arm_std_f32+0xa8>
 8002af4:	edd0 7a00 	vldr	s15, [r0]
 8002af8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002afc:	3b01      	subs	r3, #1
 8002afe:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002b02:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b06:	d011      	beq.n	8002b2c <arm_std_f32+0xa8>
 8002b08:	edd0 7a01 	vldr	s15, [r0, #4]
 8002b0c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002b16:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b1a:	d007      	beq.n	8002b2c <arm_std_f32+0xa8>
 8002b1c:	edd0 7a02 	vldr	s15, [r0, #8]
 8002b20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002b24:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002b28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b2c:	ee07 1a90 	vmov	s15, r1
 8002b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002b38:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002b3c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002b40:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002b44:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002b48:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002b4c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002b50:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	db0c      	blt.n	8002b78 <arm_std_f32+0xf4>
 8002b5e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002b6a:	d40e      	bmi.n	8002b8a <arm_std_f32+0x106>
 8002b6c:	ed82 8a00 	vstr	s16, [r2]
 8002b70:	b003      	add	sp, #12
 8002b72:	ecbd 8b02 	vpop	{d8}
 8002b76:	bd30      	pop	{r4, r5, pc}
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	b003      	add	sp, #12
 8002b7e:	ecbd 8b02 	vpop	{d8}
 8002b82:	bd30      	pop	{r4, r5, pc}
 8002b84:	2300      	movs	r3, #0
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	f000 ff2c 	bl	80039e8 <sqrtf>
 8002b90:	9a01      	ldr	r2, [sp, #4]
 8002b92:	e7eb      	b.n	8002b6c <arm_std_f32+0xe8>
 8002b94:	00000000 	.word	0x00000000

08002b98 <arm_mean_f32>:
 8002b98:	b430      	push	{r4, r5}
 8002b9a:	088d      	lsrs	r5, r1, #2
 8002b9c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002c10 <arm_mean_f32+0x78>
 8002ba0:	d018      	beq.n	8002bd4 <arm_mean_f32+0x3c>
 8002ba2:	f100 0310 	add.w	r3, r0, #16
 8002ba6:	462c      	mov	r4, r5
 8002ba8:	ed53 5a04 	vldr	s11, [r3, #-16]
 8002bac:	ed13 6a03 	vldr	s12, [r3, #-12]
 8002bb0:	ed53 6a02 	vldr	s13, [r3, #-8]
 8002bb4:	ed13 7a01 	vldr	s14, [r3, #-4]
 8002bb8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002bbc:	3c01      	subs	r4, #1
 8002bbe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002bc2:	f103 0310 	add.w	r3, r3, #16
 8002bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bce:	d1eb      	bne.n	8002ba8 <arm_mean_f32+0x10>
 8002bd0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002bd4:	f011 0303 	ands.w	r3, r1, #3
 8002bd8:	d00f      	beq.n	8002bfa <arm_mean_f32+0x62>
 8002bda:	ed90 7a00 	vldr	s14, [r0]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002be4:	d009      	beq.n	8002bfa <arm_mean_f32+0x62>
 8002be6:	ed90 7a01 	vldr	s14, [r0, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bf0:	bf1c      	itt	ne
 8002bf2:	ed90 7a02 	vldrne	s14, [r0, #8]
 8002bf6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8002bfa:	ee07 1a10 	vmov	s14, r1
 8002bfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002c02:	bc30      	pop	{r4, r5}
 8002c04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c08:	edc2 6a00 	vstr	s13, [r2]
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	00000000 	.word	0x00000000

08002c14 <arm_correlate_f32>:
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	4299      	cmp	r1, r3
 8002c1a:	b08d      	sub	sp, #52	; 0x34
 8002c1c:	f0c0 824c 	bcc.w	80030b8 <arm_correlate_f32+0x4a4>
 8002c20:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002c22:	eba1 0c03 	sub.w	ip, r1, r3
 8002c26:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8002c2a:	f04f 0e04 	mov.w	lr, #4
 8002c2e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002c32:	3101      	adds	r1, #1
 8002c34:	1ac9      	subs	r1, r1, r3
 8002c36:	3c01      	subs	r4, #1
 8002c38:	1e5e      	subs	r6, r3, #1
 8002c3a:	9102      	str	r1, [sp, #8]
 8002c3c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8002c40:	f000 8294 	beq.w	800316c <arm_correlate_f32+0x558>
 8002c44:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002d94 <arm_correlate_f32+0x180>
 8002c48:	f1a1 0804 	sub.w	r8, r1, #4
 8002c4c:	46e1      	mov	r9, ip
 8002c4e:	4605      	mov	r5, r0
 8002c50:	2401      	movs	r4, #1
 8002c52:	f014 0703 	ands.w	r7, r4, #3
 8002c56:	d01b      	beq.n	8002c90 <arm_correlate_f32+0x7c>
 8002c58:	ed91 7a00 	vldr	s14, [r1]
 8002c5c:	edd5 6a00 	vldr	s13, [r5]
 8002c60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c64:	3f01      	subs	r7, #1
 8002c66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c6a:	d011      	beq.n	8002c90 <arm_correlate_f32+0x7c>
 8002c6c:	ed91 7a01 	vldr	s14, [r1, #4]
 8002c70:	edd5 6a01 	vldr	s13, [r5, #4]
 8002c74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c78:	2f01      	cmp	r7, #1
 8002c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c7e:	d007      	beq.n	8002c90 <arm_correlate_f32+0x7c>
 8002c80:	ed95 7a02 	vldr	s14, [r5, #8]
 8002c84:	edd1 6a02 	vldr	s13, [r1, #8]
 8002c88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c90:	1c67      	adds	r7, r4, #1
 8002c92:	42bb      	cmp	r3, r7
 8002c94:	edc9 7a00 	vstr	s15, [r9]
 8002c98:	4641      	mov	r1, r8
 8002c9a:	44f1      	add	r9, lr
 8002c9c:	d03a      	beq.n	8002d14 <arm_correlate_f32+0x100>
 8002c9e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8002ca2:	f000 8267 	beq.w	8003174 <arm_correlate_f32+0x560>
 8002ca6:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8002caa:	f100 0110 	add.w	r1, r0, #16
 8002cae:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002d94 <arm_correlate_f32+0x180>
 8002cb2:	eb01 050a 	add.w	r5, r1, sl
 8002cb6:	f108 0410 	add.w	r4, r8, #16
 8002cba:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002cbe:	ed54 3a04 	vldr	s7, [r4, #-16]
 8002cc2:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002cc6:	ed14 4a03 	vldr	s8, [r4, #-12]
 8002cca:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002cce:	ed54 4a02 	vldr	s9, [r4, #-8]
 8002cd2:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002cd6:	ed14 5a01 	vldr	s10, [r4, #-4]
 8002cda:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002cde:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002cea:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002cee:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf6:	3110      	adds	r1, #16
 8002cf8:	428d      	cmp	r5, r1
 8002cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfe:	f104 0410 	add.w	r4, r4, #16
 8002d02:	d1da      	bne.n	8002cba <arm_correlate_f32+0xa6>
 8002d04:	eb00 050a 	add.w	r5, r0, sl
 8002d08:	eb08 010a 	add.w	r1, r8, sl
 8002d0c:	f1a8 0804 	sub.w	r8, r8, #4
 8002d10:	463c      	mov	r4, r7
 8002d12:	e79e      	b.n	8002c52 <arm_correlate_f32+0x3e>
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	fb0e cc04 	mla	ip, lr, r4, ip
 8002d1a:	f240 81dd 	bls.w	80030d8 <arm_correlate_f32+0x4c4>
 8002d1e:	9b02      	ldr	r3, [sp, #8]
 8002d20:	0899      	lsrs	r1, r3, #2
 8002d22:	9103      	str	r1, [sp, #12]
 8002d24:	f000 8220 	beq.w	8003168 <arm_correlate_f32+0x554>
 8002d28:	08bb      	lsrs	r3, r7, #2
 8002d2a:	f007 0403 	and.w	r4, r7, #3
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	f103 0b0c 	add.w	fp, r3, #12
 8002d36:	18d5      	adds	r5, r2, r3
 8002d38:	1e63      	subs	r3, r4, #1
 8002d3a:	0109      	lsls	r1, r1, #4
 8002d3c:	9306      	str	r3, [sp, #24]
 8002d3e:	f100 080c 	add.w	r8, r0, #12
 8002d42:	9401      	str	r4, [sp, #4]
 8002d44:	9104      	str	r1, [sp, #16]
 8002d46:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8002d4a:	4441      	add	r1, r8
 8002d4c:	f102 0310 	add.w	r3, r2, #16
 8002d50:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8002d54:	9e06      	ldr	r6, [sp, #24]
 8002d56:	9405      	str	r4, [sp, #20]
 8002d58:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8002d5c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8002d60:	46e1      	mov	r9, ip
 8002d62:	4483      	add	fp, r0
 8002d64:	460f      	mov	r7, r1
 8002d66:	920b      	str	r2, [sp, #44]	; 0x2c
 8002d68:	469c      	mov	ip, r3
 8002d6a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002d94 <arm_correlate_f32+0x180>
 8002d6e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8002d72:	ed18 2a02 	vldr	s4, [r8, #-8]
 8002d76:	ed58 2a01 	vldr	s5, [r8, #-4]
 8002d7a:	ed98 0a00 	vldr	s0, [r8]
 8002d7e:	9900      	ldr	r1, [sp, #0]
 8002d80:	eef0 5a46 	vmov.f32	s11, s12
 8002d84:	eeb0 5a46 	vmov.f32	s10, s12
 8002d88:	eef0 4a46 	vmov.f32	s9, s12
 8002d8c:	4663      	mov	r3, ip
 8002d8e:	4642      	mov	r2, r8
 8002d90:	e005      	b.n	8002d9e <arm_correlate_f32+0x18a>
 8002d92:	bf00      	nop
 8002d94:	00000000 	.word	0x00000000
 8002d98:	ed90 0a04 	vldr	s0, [r0, #16]
 8002d9c:	3210      	adds	r2, #16
 8002d9e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002da2:	ed13 7a03 	vldr	s14, [r3, #-12]
 8002da6:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002daa:	ed13 1a01 	vldr	s2, [r3, #-4]
 8002dae:	ee62 3a26 	vmul.f32	s7, s4, s13
 8002db2:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8002db6:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8002dba:	edd2 1a01 	vldr	s3, [r2, #4]
 8002dbe:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002dc2:	ee22 3a07 	vmul.f32	s6, s4, s14
 8002dc6:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002dca:	ee74 5a25 	vadd.f32	s11, s8, s11
 8002dce:	ee62 3a87 	vmul.f32	s7, s5, s14
 8002dd2:	ee20 4a07 	vmul.f32	s8, s0, s14
 8002dd6:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8002dda:	ee36 6a86 	vadd.f32	s12, s13, s12
 8002dde:	ed92 2a02 	vldr	s4, [r2, #8]
 8002de2:	ee27 7a21 	vmul.f32	s14, s14, s3
 8002de6:	ee73 3a85 	vadd.f32	s7, s7, s10
 8002dea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002dee:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002df2:	ee33 3a24 	vadd.f32	s6, s6, s9
 8002df6:	ee34 4a25 	vadd.f32	s8, s8, s11
 8002dfa:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8002dfe:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8002e02:	edd2 2a03 	vldr	s5, [r2, #12]
 8002e06:	ee67 7a82 	vmul.f32	s15, s15, s4
 8002e0a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e12:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002e16:	ee20 0a01 	vmul.f32	s0, s0, s2
 8002e1a:	ee61 3a81 	vmul.f32	s7, s3, s2
 8002e1e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8002e22:	ee22 7a01 	vmul.f32	s14, s4, s2
 8002e26:	ee21 6a22 	vmul.f32	s12, s2, s5
 8002e2a:	3901      	subs	r1, #1
 8002e2c:	f103 0310 	add.w	r3, r3, #16
 8002e30:	ee70 4a24 	vadd.f32	s9, s0, s9
 8002e34:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002e38:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002e3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e40:	4610      	mov	r0, r2
 8002e42:	d1a9      	bne.n	8002d98 <arm_correlate_f32+0x184>
 8002e44:	9b01      	ldr	r3, [sp, #4]
 8002e46:	b3f3      	cbz	r3, 8002ec6 <arm_correlate_f32+0x2b2>
 8002e48:	edd5 7a00 	vldr	s15, [r5]
 8002e4c:	ed9b 4a00 	vldr	s8, [fp]
 8002e50:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8002e54:	ee62 3a27 	vmul.f32	s7, s4, s15
 8002e58:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8002e5c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002e60:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8002e64:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002e68:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002e6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e70:	b34e      	cbz	r6, 8002ec6 <arm_correlate_f32+0x2b2>
 8002e72:	edd5 7a01 	vldr	s15, [r5, #4]
 8002e76:	eddb 6a01 	vldr	s13, [fp, #4]
 8002e7a:	ee22 7a27 	vmul.f32	s14, s4, s15
 8002e7e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8002e82:	ee67 3a84 	vmul.f32	s7, s15, s8
 8002e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8a:	2e01      	cmp	r6, #1
 8002e8c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8002e90:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002e94:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8002e98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002e9c:	d013      	beq.n	8002ec6 <arm_correlate_f32+0x2b2>
 8002e9e:	ed95 7a02 	vldr	s14, [r5, #8]
 8002ea2:	eddb 3a02 	vldr	s7, [fp, #8]
 8002ea6:	ee62 7a87 	vmul.f32	s15, s5, s14
 8002eaa:	ee27 4a04 	vmul.f32	s8, s14, s8
 8002eae:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002eb2:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002eb6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002eba:	ee35 5a04 	vadd.f32	s10, s10, s8
 8002ebe:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002ec2:	ee36 6a07 	vadd.f32	s12, s12, s14
 8002ec6:	f108 0810 	add.w	r8, r8, #16
 8002eca:	eb09 020e 	add.w	r2, r9, lr
 8002ece:	eb0a 030e 	add.w	r3, sl, lr
 8002ed2:	4547      	cmp	r7, r8
 8002ed4:	edc9 4a00 	vstr	s9, [r9]
 8002ed8:	f10b 0b10 	add.w	fp, fp, #16
 8002edc:	ed82 5a00 	vstr	s10, [r2]
 8002ee0:	44a1      	add	r9, r4
 8002ee2:	edca 5a00 	vstr	s11, [sl]
 8002ee6:	ed83 6a00 	vstr	s12, [r3]
 8002eea:	44a2      	add	sl, r4
 8002eec:	f47f af3d 	bne.w	8002d6a <arm_correlate_f32+0x156>
 8002ef0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8002ef4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8002ef8:	9b03      	ldr	r3, [sp, #12]
 8002efa:	9c05      	ldr	r4, [sp, #20]
 8002efc:	9904      	ldr	r1, [sp, #16]
 8002efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f00:	fb04 cc03 	mla	ip, r4, r3, ip
 8002f04:	4401      	add	r1, r0
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	460d      	mov	r5, r1
 8002f0a:	9303      	str	r3, [sp, #12]
 8002f0c:	9b02      	ldr	r3, [sp, #8]
 8002f0e:	f013 0303 	ands.w	r3, r3, #3
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	d071      	beq.n	8002ffa <arm_correlate_f32+0x3e6>
 8002f16:	9903      	ldr	r1, [sp, #12]
 8002f18:	9205      	str	r2, [sp, #20]
 8002f1a:	f007 0403 	and.w	r4, r7, #3
 8002f1e:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8002f22:	1c4f      	adds	r7, r1, #1
 8002f24:	1859      	adds	r1, r3, r1
 8002f26:	1d03      	adds	r3, r0, #4
 8002f28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002f2c:	9400      	str	r4, [sp, #0]
 8002f2e:	f102 0110 	add.w	r1, r2, #16
 8002f32:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8002f36:	3c01      	subs	r4, #1
 8002f38:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8002f3c:	eb02 090a 	add.w	r9, r2, sl
 8002f40:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002f44:	46e0      	mov	r8, ip
 8002f46:	4618      	mov	r0, r3
 8002f48:	460e      	mov	r6, r1
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8002d94 <arm_correlate_f32+0x180>
 8002f50:	f105 0110 	add.w	r1, r5, #16
 8002f54:	4633      	mov	r3, r6
 8002f56:	465c      	mov	r4, fp
 8002f58:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002f5c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002f60:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002f64:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002f68:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002f6c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002f70:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002f74:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002f78:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002f7c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002f88:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f8c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	3c01      	subs	r4, #1
 8002f96:	f101 0110 	add.w	r1, r1, #16
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	f103 0310 	add.w	r3, r3, #16
 8002fa2:	d1d9      	bne.n	8002f58 <arm_correlate_f32+0x344>
 8002fa4:	9b00      	ldr	r3, [sp, #0]
 8002fa6:	4455      	add	r5, sl
 8002fa8:	b1d3      	cbz	r3, 8002fe0 <arm_correlate_f32+0x3cc>
 8002faa:	ed99 7a00 	vldr	s14, [r9]
 8002fae:	edd5 6a00 	vldr	s13, [r5]
 8002fb2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fba:	b18a      	cbz	r2, 8002fe0 <arm_correlate_f32+0x3cc>
 8002fbc:	ed99 7a01 	vldr	s14, [r9, #4]
 8002fc0:	edd5 6a01 	vldr	s13, [r5, #4]
 8002fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fc8:	2a01      	cmp	r2, #1
 8002fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fce:	d007      	beq.n	8002fe0 <arm_correlate_f32+0x3cc>
 8002fd0:	ed95 7a02 	vldr	s14, [r5, #8]
 8002fd4:	edd9 6a02 	vldr	s13, [r9, #8]
 8002fd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fe0:	463d      	mov	r5, r7
 8002fe2:	3704      	adds	r7, #4
 8002fe4:	42b8      	cmp	r0, r7
 8002fe6:	edc8 7a00 	vstr	s15, [r8]
 8002fea:	44f0      	add	r8, lr
 8002fec:	d1ae      	bne.n	8002f4c <arm_correlate_f32+0x338>
 8002fee:	9b01      	ldr	r3, [sp, #4]
 8002ff0:	9a05      	ldr	r2, [sp, #20]
 8002ff2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8002ff6:	fb0e cc03 	mla	ip, lr, r3, ip
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003000:	08b5      	lsrs	r5, r6, #2
 8003002:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8002d94 <arm_correlate_f32+0x180>
 8003006:	f000 80ac 	beq.w	8003162 <arm_correlate_f32+0x54e>
 800300a:	f100 0110 	add.w	r1, r0, #16
 800300e:	f102 0310 	add.w	r3, r2, #16
 8003012:	462c      	mov	r4, r5
 8003014:	ed51 6a04 	vldr	s13, [r1, #-16]
 8003018:	ed53 3a04 	vldr	s7, [r3, #-16]
 800301c:	ed11 7a03 	vldr	s14, [r1, #-12]
 8003020:	ed13 4a03 	vldr	s8, [r3, #-12]
 8003024:	ed51 7a02 	vldr	s15, [r1, #-8]
 8003028:	ed53 4a02 	vldr	s9, [r3, #-8]
 800302c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8003030:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003034:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003038:	ee27 7a04 	vmul.f32	s14, s14, s8
 800303c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003040:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003044:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003048:	ee66 6a05 	vmul.f32	s13, s12, s10
 800304c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003050:	3c01      	subs	r4, #1
 8003052:	f101 0110 	add.w	r1, r1, #16
 8003056:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800305a:	f103 0310 	add.w	r3, r3, #16
 800305e:	d1d9      	bne.n	8003014 <arm_correlate_f32+0x400>
 8003060:	012d      	lsls	r5, r5, #4
 8003062:	1941      	adds	r1, r0, r5
 8003064:	4415      	add	r5, r2
 8003066:	f016 0303 	ands.w	r3, r6, #3
 800306a:	d01b      	beq.n	80030a4 <arm_correlate_f32+0x490>
 800306c:	edd5 7a00 	vldr	s15, [r5]
 8003070:	ed91 7a00 	vldr	s14, [r1]
 8003074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003078:	3b01      	subs	r3, #1
 800307a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800307e:	d011      	beq.n	80030a4 <arm_correlate_f32+0x490>
 8003080:	edd5 7a01 	vldr	s15, [r5, #4]
 8003084:	ed91 7a01 	vldr	s14, [r1, #4]
 8003088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800308c:	2b01      	cmp	r3, #1
 800308e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003092:	d007      	beq.n	80030a4 <arm_correlate_f32+0x490>
 8003094:	edd1 7a02 	vldr	s15, [r1, #8]
 8003098:	ed95 7a02 	vldr	s14, [r5, #8]
 800309c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80030a4:	3e01      	subs	r6, #1
 80030a6:	edcc 5a00 	vstr	s11, [ip]
 80030aa:	f100 0004 	add.w	r0, r0, #4
 80030ae:	44f4      	add	ip, lr
 80030b0:	d1a6      	bne.n	8003000 <arm_correlate_f32+0x3ec>
 80030b2:	b00d      	add	sp, #52	; 0x34
 80030b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030b8:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80030bc:	4606      	mov	r6, r0
 80030be:	3c02      	subs	r4, #2
 80030c0:	4610      	mov	r0, r2
 80030c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80030c4:	440c      	add	r4, r1
 80030c6:	460d      	mov	r5, r1
 80030c8:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4632      	mov	r2, r6
 80030d0:	f06f 0e03 	mvn.w	lr, #3
 80030d4:	462b      	mov	r3, r5
 80030d6:	e5aa      	b.n	8002c2e <arm_correlate_f32+0x1a>
 80030d8:	9902      	ldr	r1, [sp, #8]
 80030da:	2900      	cmp	r1, #0
 80030dc:	d090      	beq.n	8003000 <arm_correlate_f32+0x3ec>
 80030de:	9902      	ldr	r1, [sp, #8]
 80030e0:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8002d94 <arm_correlate_f32+0x180>
 80030e4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80030e8:	eb00 0708 	add.w	r7, r0, r8
 80030ec:	4601      	mov	r1, r0
 80030ee:	4665      	mov	r5, ip
 80030f0:	e020      	b.n	8003134 <arm_correlate_f32+0x520>
 80030f2:	edd2 7a00 	vldr	s15, [r2]
 80030f6:	ecb4 7a01 	vldmia	r4!, {s14}
 80030fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003102:	b18e      	cbz	r6, 8003128 <arm_correlate_f32+0x514>
 8003104:	ed92 7a01 	vldr	s14, [r2, #4]
 8003108:	edd1 6a01 	vldr	s13, [r1, #4]
 800310c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003110:	2b02      	cmp	r3, #2
 8003112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003116:	d007      	beq.n	8003128 <arm_correlate_f32+0x514>
 8003118:	ed91 7a02 	vldr	s14, [r1, #8]
 800311c:	edd2 6a02 	vldr	s13, [r2, #8]
 8003120:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003124:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003128:	42bc      	cmp	r4, r7
 800312a:	edc5 7a00 	vstr	s15, [r5]
 800312e:	4621      	mov	r1, r4
 8003130:	4475      	add	r5, lr
 8003132:	d00b      	beq.n	800314c <arm_correlate_f32+0x538>
 8003134:	460c      	mov	r4, r1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1db      	bne.n	80030f2 <arm_correlate_f32+0x4de>
 800313a:	1d0c      	adds	r4, r1, #4
 800313c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800317c <arm_correlate_f32+0x568>
 8003140:	42bc      	cmp	r4, r7
 8003142:	edc5 7a00 	vstr	s15, [r5]
 8003146:	4621      	mov	r1, r4
 8003148:	4475      	add	r5, lr
 800314a:	d1f3      	bne.n	8003134 <arm_correlate_f32+0x520>
 800314c:	9b02      	ldr	r3, [sp, #8]
 800314e:	4440      	add	r0, r8
 8003150:	fb0e cc03 	mla	ip, lr, r3, ip
 8003154:	2e00      	cmp	r6, #0
 8003156:	d0ac      	beq.n	80030b2 <arm_correlate_f32+0x49e>
 8003158:	08b5      	lsrs	r5, r6, #2
 800315a:	eddf 5a08 	vldr	s11, [pc, #32]	; 800317c <arm_correlate_f32+0x568>
 800315e:	f47f af54 	bne.w	800300a <arm_correlate_f32+0x3f6>
 8003162:	4615      	mov	r5, r2
 8003164:	4601      	mov	r1, r0
 8003166:	e77e      	b.n	8003066 <arm_correlate_f32+0x452>
 8003168:	4605      	mov	r5, r0
 800316a:	e6cf      	b.n	8002f0c <arm_correlate_f32+0x2f8>
 800316c:	9902      	ldr	r1, [sp, #8]
 800316e:	2900      	cmp	r1, #0
 8003170:	d1b5      	bne.n	80030de <arm_correlate_f32+0x4ca>
 8003172:	e79e      	b.n	80030b2 <arm_correlate_f32+0x49e>
 8003174:	eddf 7a01 	vldr	s15, [pc, #4]	; 800317c <arm_correlate_f32+0x568>
 8003178:	4605      	mov	r5, r0
 800317a:	e5c7      	b.n	8002d0c <arm_correlate_f32+0xf8>
 800317c:	00000000 	.word	0x00000000

08003180 <arm_conv_f32>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	b08b      	sub	sp, #44	; 0x2c
 8003186:	4299      	cmp	r1, r3
 8003188:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800318a:	d205      	bcs.n	8003198 <arm_conv_f32+0x18>
 800318c:	4606      	mov	r6, r0
 800318e:	460c      	mov	r4, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	4632      	mov	r2, r6
 8003196:	4623      	mov	r3, r4
 8003198:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800319c:	3101      	adds	r1, #1
 800319e:	1ac9      	subs	r1, r1, r3
 80031a0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80031a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80031a8:	9101      	str	r1, [sp, #4]
 80031aa:	1e59      	subs	r1, r3, #1
 80031ac:	eb02 070b 	add.w	r7, r2, fp
 80031b0:	f000 8277 	beq.w	80036a2 <arm_conv_f32+0x522>
 80031b4:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003474 <arm_conv_f32+0x2f4>
 80031b8:	f102 0904 	add.w	r9, r2, #4
 80031bc:	46aa      	mov	sl, r5
 80031be:	4680      	mov	r8, r0
 80031c0:	2401      	movs	r4, #1
 80031c2:	f014 0603 	ands.w	r6, r4, #3
 80031c6:	d01b      	beq.n	8003200 <arm_conv_f32+0x80>
 80031c8:	ed92 7a00 	vldr	s14, [r2]
 80031cc:	edd8 6a00 	vldr	s13, [r8]
 80031d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031d4:	3e01      	subs	r6, #1
 80031d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031da:	d011      	beq.n	8003200 <arm_conv_f32+0x80>
 80031dc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80031e0:	edd8 6a01 	vldr	s13, [r8, #4]
 80031e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031e8:	2e01      	cmp	r6, #1
 80031ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031ee:	d007      	beq.n	8003200 <arm_conv_f32+0x80>
 80031f0:	ed98 7a02 	vldr	s14, [r8, #8]
 80031f4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80031f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003200:	3401      	adds	r4, #1
 8003202:	42a3      	cmp	r3, r4
 8003204:	ecea 7a01 	vstmia	sl!, {s15}
 8003208:	464a      	mov	r2, r9
 800320a:	d03a      	beq.n	8003282 <arm_conv_f32+0x102>
 800320c:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8003210:	f000 824c 	beq.w	80036ac <arm_conv_f32+0x52c>
 8003214:	f100 0210 	add.w	r2, r0, #16
 8003218:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800321c:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003474 <arm_conv_f32+0x2f4>
 8003220:	eb02 0c08 	add.w	ip, r2, r8
 8003224:	f1a9 0610 	sub.w	r6, r9, #16
 8003228:	ed12 7a04 	vldr	s14, [r2, #-16]
 800322c:	edd6 3a04 	vldr	s7, [r6, #16]
 8003230:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003234:	ed96 4a03 	vldr	s8, [r6, #12]
 8003238:	ed52 6a02 	vldr	s13, [r2, #-8]
 800323c:	edd6 4a02 	vldr	s9, [r6, #8]
 8003240:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003244:	ed96 5a01 	vldr	s10, [r6, #4]
 8003248:	ee27 7a23 	vmul.f32	s14, s14, s7
 800324c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003258:	ee76 7a27 	vadd.f32	s15, s12, s15
 800325c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	3210      	adds	r2, #16
 8003266:	4594      	cmp	ip, r2
 8003268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326c:	f1a6 0610 	sub.w	r6, r6, #16
 8003270:	d1da      	bne.n	8003228 <arm_conv_f32+0xa8>
 8003272:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8003276:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800327a:	4480      	add	r8, r0
 800327c:	f109 0904 	add.w	r9, r9, #4
 8003280:	e79f      	b.n	80031c2 <arm_conv_f32+0x42>
 8003282:	2b03      	cmp	r3, #3
 8003284:	445d      	add	r5, fp
 8003286:	f240 80e9 	bls.w	800345c <arm_conv_f32+0x2dc>
 800328a:	9b01      	ldr	r3, [sp, #4]
 800328c:	089a      	lsrs	r2, r3, #2
 800328e:	9202      	str	r2, [sp, #8]
 8003290:	f000 8203 	beq.w	800369a <arm_conv_f32+0x51a>
 8003294:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8003298:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	f004 0603 	and.w	r6, r4, #3
 80032a2:	9203      	str	r2, [sp, #12]
 80032a4:	f1a3 0a10 	sub.w	sl, r3, #16
 80032a8:	f1a3 020c 	sub.w	r2, r3, #12
 80032ac:	3b08      	subs	r3, #8
 80032ae:	9204      	str	r2, [sp, #16]
 80032b0:	9305      	str	r3, [sp, #20]
 80032b2:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 80032b6:	e9cd 7008 	strd	r7, r0, [sp, #32]
 80032ba:	9a03      	ldr	r2, [sp, #12]
 80032bc:	f100 0c1c 	add.w	ip, r0, #28
 80032c0:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80032c4:	464c      	mov	r4, r9
 80032c6:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80032ca:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80032ce:	f1a7 0310 	sub.w	r3, r7, #16
 80032d2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80032d6:	eb05 0b02 	add.w	fp, r5, r2
 80032da:	461f      	mov	r7, r3
 80032dc:	3510      	adds	r5, #16
 80032de:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003474 <arm_conv_f32+0x2f4>
 80032e2:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80032e6:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80032ea:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80032ee:	eeb0 5a46 	vmov.f32	s10, s12
 80032f2:	eef0 4a46 	vmov.f32	s9, s12
 80032f6:	eef0 5a46 	vmov.f32	s11, s12
 80032fa:	463a      	mov	r2, r7
 80032fc:	4663      	mov	r3, ip
 80032fe:	4641      	mov	r1, r8
 8003300:	edd2 6a04 	vldr	s13, [r2, #16]
 8003304:	ed13 0a04 	vldr	s0, [r3, #-16]
 8003308:	ed92 7a03 	vldr	s14, [r2, #12]
 800330c:	edd2 7a02 	vldr	s15, [r2, #8]
 8003310:	edd2 0a01 	vldr	s1, [r2, #4]
 8003314:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8003318:	ee62 3a26 	vmul.f32	s7, s4, s13
 800331c:	ee61 2a26 	vmul.f32	s5, s2, s13
 8003320:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003324:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003328:	ee21 4a87 	vmul.f32	s8, s3, s14
 800332c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8003330:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003334:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003338:	ed53 1a02 	vldr	s3, [r3, #-8]
 800333c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8003340:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003344:	ee60 3a07 	vmul.f32	s7, s0, s14
 8003348:	ee27 7a01 	vmul.f32	s14, s14, s2
 800334c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8003350:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003354:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003358:	ee60 4a27 	vmul.f32	s9, s0, s15
 800335c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8003360:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003364:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003368:	ee21 5a27 	vmul.f32	s10, s2, s15
 800336c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8003370:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003378:	ee34 4a22 	vadd.f32	s8, s8, s5
 800337c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8003380:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003384:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003388:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800338c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8003390:	3901      	subs	r1, #1
 8003392:	f1a2 0210 	sub.w	r2, r2, #16
 8003396:	ee75 5a84 	vadd.f32	s11, s11, s8
 800339a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800339e:	ee37 5a05 	vadd.f32	s10, s14, s10
 80033a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033a6:	f103 0310 	add.w	r3, r3, #16
 80033aa:	d1a9      	bne.n	8003300 <arm_conv_f32+0x180>
 80033ac:	eb0a 030c 	add.w	r3, sl, ip
 80033b0:	2e00      	cmp	r6, #0
 80033b2:	d042      	beq.n	800343a <arm_conv_f32+0x2ba>
 80033b4:	edde 7a00 	vldr	s15, [lr]
 80033b8:	ed93 4a00 	vldr	s8, [r3]
 80033bc:	ee61 6a27 	vmul.f32	s13, s2, s15
 80033c0:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80033c4:	ee22 7a27 	vmul.f32	s14, s4, s15
 80033c8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80033cc:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80033d0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80033d4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80033d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80033dc:	eb09 030c 	add.w	r3, r9, ip
 80033e0:	b35c      	cbz	r4, 800343a <arm_conv_f32+0x2ba>
 80033e2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80033e6:	edd3 6a00 	vldr	s13, [r3]
 80033ea:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80033ee:	ee22 3a27 	vmul.f32	s6, s4, s15
 80033f2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80033f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033fa:	2c01      	cmp	r4, #1
 80033fc:	ee75 5a87 	vadd.f32	s11, s11, s14
 8003400:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003404:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003408:	ee36 6a27 	vadd.f32	s12, s12, s15
 800340c:	eb00 030c 	add.w	r3, r0, ip
 8003410:	d013      	beq.n	800343a <arm_conv_f32+0x2ba>
 8003412:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8003416:	edd3 3a00 	vldr	s7, [r3]
 800341a:	ee62 7a07 	vmul.f32	s15, s4, s14
 800341e:	ee27 4a04 	vmul.f32	s8, s14, s8
 8003422:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003426:	ee27 7a23 	vmul.f32	s14, s14, s7
 800342a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800342e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003432:	ee35 5a26 	vadd.f32	s10, s10, s13
 8003436:	ee36 6a07 	vadd.f32	s12, s12, s14
 800343a:	45ab      	cmp	fp, r5
 800343c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8003440:	ed45 4a03 	vstr	s9, [r5, #-12]
 8003444:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003448:	ed05 6a01 	vstr	s12, [r5, #-4]
 800344c:	f10c 0c10 	add.w	ip, ip, #16
 8003450:	f105 0310 	add.w	r3, r5, #16
 8003454:	f000 809e 	beq.w	8003594 <arm_conv_f32+0x414>
 8003458:	461d      	mov	r5, r3
 800345a:	e740      	b.n	80032de <arm_conv_f32+0x15e>
 800345c:	9a01      	ldr	r2, [sp, #4]
 800345e:	46ac      	mov	ip, r5
 8003460:	2a00      	cmp	r2, #0
 8003462:	d037      	beq.n	80034d4 <arm_conv_f32+0x354>
 8003464:	9a01      	ldr	r2, [sp, #4]
 8003466:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003474 <arm_conv_f32+0x2f4>
 800346a:	0096      	lsls	r6, r2, #2
 800346c:	eb05 0c06 	add.w	ip, r5, r6
 8003470:	4604      	mov	r4, r0
 8003472:	e021      	b.n	80034b8 <arm_conv_f32+0x338>
 8003474:	00000000 	.word	0x00000000
 8003478:	edd7 7a00 	vldr	s15, [r7]
 800347c:	ecb2 7a01 	vldmia	r2!, {s14}
 8003480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003484:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003488:	b189      	cbz	r1, 80034ae <arm_conv_f32+0x32e>
 800348a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800348e:	edd4 6a01 	vldr	s13, [r4, #4]
 8003492:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003496:	2b02      	cmp	r3, #2
 8003498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800349c:	d007      	beq.n	80034ae <arm_conv_f32+0x32e>
 800349e:	ed94 7a02 	vldr	s14, [r4, #8]
 80034a2:	ed57 6a02 	vldr	s13, [r7, #-8]
 80034a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80034aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ae:	ece5 7a01 	vstmia	r5!, {s15}
 80034b2:	4565      	cmp	r5, ip
 80034b4:	4614      	mov	r4, r2
 80034b6:	d00a      	beq.n	80034ce <arm_conv_f32+0x34e>
 80034b8:	4622      	mov	r2, r4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1dc      	bne.n	8003478 <arm_conv_f32+0x2f8>
 80034be:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003474 <arm_conv_f32+0x2f4>
 80034c2:	ece5 7a01 	vstmia	r5!, {s15}
 80034c6:	1d22      	adds	r2, r4, #4
 80034c8:	4565      	cmp	r5, ip
 80034ca:	4614      	mov	r4, r2
 80034cc:	d1f4      	bne.n	80034b8 <arm_conv_f32+0x338>
 80034ce:	4430      	add	r0, r6
 80034d0:	2900      	cmp	r1, #0
 80034d2:	d059      	beq.n	8003588 <arm_conv_f32+0x408>
 80034d4:	088d      	lsrs	r5, r1, #2
 80034d6:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003474 <arm_conv_f32+0x2f4>
 80034da:	d058      	beq.n	800358e <arm_conv_f32+0x40e>
 80034dc:	f100 0210 	add.w	r2, r0, #16
 80034e0:	f1a7 0310 	sub.w	r3, r7, #16
 80034e4:	462c      	mov	r4, r5
 80034e6:	ed52 6a04 	vldr	s13, [r2, #-16]
 80034ea:	edd3 3a04 	vldr	s7, [r3, #16]
 80034ee:	ed12 7a03 	vldr	s14, [r2, #-12]
 80034f2:	ed93 4a03 	vldr	s8, [r3, #12]
 80034f6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80034fa:	edd3 4a02 	vldr	s9, [r3, #8]
 80034fe:	ed12 6a01 	vldr	s12, [r2, #-4]
 8003502:	ed93 5a01 	vldr	s10, [r3, #4]
 8003506:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800350a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800350e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003512:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003516:	ee37 7a26 	vadd.f32	s14, s14, s13
 800351a:	ee66 6a05 	vmul.f32	s13, s12, s10
 800351e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003522:	3c01      	subs	r4, #1
 8003524:	f102 0210 	add.w	r2, r2, #16
 8003528:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800352c:	f1a3 0310 	sub.w	r3, r3, #16
 8003530:	d1d9      	bne.n	80034e6 <arm_conv_f32+0x366>
 8003532:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8003536:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800353a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800353e:	f011 0203 	ands.w	r2, r1, #3
 8003542:	d01b      	beq.n	800357c <arm_conv_f32+0x3fc>
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ed95 7a00 	vldr	s14, [r5]
 800354c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003550:	3a01      	subs	r2, #1
 8003552:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003556:	d011      	beq.n	800357c <arm_conv_f32+0x3fc>
 8003558:	ed53 7a01 	vldr	s15, [r3, #-4]
 800355c:	ed95 7a01 	vldr	s14, [r5, #4]
 8003560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003564:	2a01      	cmp	r2, #1
 8003566:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800356a:	d007      	beq.n	800357c <arm_conv_f32+0x3fc>
 800356c:	edd5 7a02 	vldr	s15, [r5, #8]
 8003570:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003578:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800357c:	3901      	subs	r1, #1
 800357e:	ecec 5a01 	vstmia	ip!, {s11}
 8003582:	f100 0004 	add.w	r0, r0, #4
 8003586:	d1a5      	bne.n	80034d4 <arm_conv_f32+0x354>
 8003588:	b00b      	add	sp, #44	; 0x2c
 800358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358e:	463b      	mov	r3, r7
 8003590:	4605      	mov	r5, r0
 8003592:	e7d4      	b.n	800353e <arm_conv_f32+0x3be>
 8003594:	9b02      	ldr	r3, [sp, #8]
 8003596:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	9302      	str	r3, [sp, #8]
 800359e:	9b03      	ldr	r3, [sp, #12]
 80035a0:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80035a4:	4403      	add	r3, r0
 80035a6:	465d      	mov	r5, fp
 80035a8:	469e      	mov	lr, r3
 80035aa:	9b01      	ldr	r3, [sp, #4]
 80035ac:	f013 0c03 	ands.w	ip, r3, #3
 80035b0:	d075      	beq.n	800369e <arm_conv_f32+0x51e>
 80035b2:	9b02      	ldr	r3, [sp, #8]
 80035b4:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 80035b8:	f004 0403 	and.w	r4, r4, #3
 80035bc:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80035c0:	f103 0801 	add.w	r8, r3, #1
 80035c4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80035c8:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80035cc:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80035d0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80035d4:	f1a7 0210 	sub.w	r2, r7, #16
 80035d8:	4618      	mov	r0, r3
 80035da:	465b      	mov	r3, fp
 80035dc:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80035e0:	468b      	mov	fp, r1
 80035e2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80035e6:	4621      	mov	r1, r4
 80035e8:	4617      	mov	r7, r2
 80035ea:	461c      	mov	r4, r3
 80035ec:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003474 <arm_conv_f32+0x2f4>
 80035f0:	f10e 0210 	add.w	r2, lr, #16
 80035f4:	463b      	mov	r3, r7
 80035f6:	4656      	mov	r6, sl
 80035f8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80035fc:	edd3 3a04 	vldr	s7, [r3, #16]
 8003600:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003604:	ed93 4a03 	vldr	s8, [r3, #12]
 8003608:	ed52 6a02 	vldr	s13, [r2, #-8]
 800360c:	edd3 4a02 	vldr	s9, [r3, #8]
 8003610:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003614:	ed93 5a01 	vldr	s10, [r3, #4]
 8003618:	ee27 7a23 	vmul.f32	s14, s14, s7
 800361c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003624:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003628:	ee76 7a27 	vadd.f32	s15, s12, s15
 800362c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8003630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003634:	3e01      	subs	r6, #1
 8003636:	f102 0210 	add.w	r2, r2, #16
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363e:	f1a3 0310 	sub.w	r3, r3, #16
 8003642:	d1d9      	bne.n	80035f8 <arm_conv_f32+0x478>
 8003644:	4486      	add	lr, r0
 8003646:	b1d1      	cbz	r1, 800367e <arm_conv_f32+0x4fe>
 8003648:	ed99 7a00 	vldr	s14, [r9]
 800364c:	edde 6a00 	vldr	s13, [lr]
 8003650:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003658:	b18c      	cbz	r4, 800367e <arm_conv_f32+0x4fe>
 800365a:	ed19 7a01 	vldr	s14, [r9, #-4]
 800365e:	edde 6a01 	vldr	s13, [lr, #4]
 8003662:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003666:	2c01      	cmp	r4, #1
 8003668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800366c:	d007      	beq.n	800367e <arm_conv_f32+0x4fe>
 800366e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8003672:	ed59 6a02 	vldr	s13, [r9, #-8]
 8003676:	ee27 7a26 	vmul.f32	s14, s14, s13
 800367a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800367e:	ece5 7a01 	vstmia	r5!, {s15}
 8003682:	4565      	cmp	r5, ip
 8003684:	46c6      	mov	lr, r8
 8003686:	f108 0804 	add.w	r8, r8, #4
 800368a:	d1af      	bne.n	80035ec <arm_conv_f32+0x46c>
 800368c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8003690:	4659      	mov	r1, fp
 8003692:	9b01      	ldr	r3, [sp, #4]
 8003694:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003698:	e71c      	b.n	80034d4 <arm_conv_f32+0x354>
 800369a:	4686      	mov	lr, r0
 800369c:	e785      	b.n	80035aa <arm_conv_f32+0x42a>
 800369e:	46ac      	mov	ip, r5
 80036a0:	e7f7      	b.n	8003692 <arm_conv_f32+0x512>
 80036a2:	9a01      	ldr	r2, [sp, #4]
 80036a4:	2a00      	cmp	r2, #0
 80036a6:	f47f aedd 	bne.w	8003464 <arm_conv_f32+0x2e4>
 80036aa:	e76d      	b.n	8003588 <arm_conv_f32+0x408>
 80036ac:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003474 <arm_conv_f32+0x2f4>
 80036b0:	4680      	mov	r8, r0
 80036b2:	e5e3      	b.n	800327c <arm_conv_f32+0xfc>

080036b4 <arm_sub_f32>:
 80036b4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80036b8:	b4f0      	push	{r4, r5, r6, r7}
 80036ba:	d033      	beq.n	8003724 <arm_sub_f32+0x70>
 80036bc:	f100 0610 	add.w	r6, r0, #16
 80036c0:	f101 0510 	add.w	r5, r1, #16
 80036c4:	f102 0410 	add.w	r4, r2, #16
 80036c8:	4667      	mov	r7, ip
 80036ca:	ed15 7a04 	vldr	s14, [r5, #-16]
 80036ce:	ed56 7a04 	vldr	s15, [r6, #-16]
 80036d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036d6:	3f01      	subs	r7, #1
 80036d8:	ed44 7a04 	vstr	s15, [r4, #-16]
 80036dc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80036e0:	ed56 7a03 	vldr	s15, [r6, #-12]
 80036e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036e8:	f106 0610 	add.w	r6, r6, #16
 80036ec:	ed44 7a03 	vstr	s15, [r4, #-12]
 80036f0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80036f4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80036f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036fc:	f105 0510 	add.w	r5, r5, #16
 8003700:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003704:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003708:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 800370c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003710:	f104 0410 	add.w	r4, r4, #16
 8003714:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003718:	d1d7      	bne.n	80036ca <arm_sub_f32+0x16>
 800371a:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800371e:	4420      	add	r0, r4
 8003720:	4421      	add	r1, r4
 8003722:	4422      	add	r2, r4
 8003724:	f013 0303 	ands.w	r3, r3, #3
 8003728:	d01b      	beq.n	8003762 <arm_sub_f32+0xae>
 800372a:	edd0 7a00 	vldr	s15, [r0]
 800372e:	ed91 7a00 	vldr	s14, [r1]
 8003732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003736:	3b01      	subs	r3, #1
 8003738:	edc2 7a00 	vstr	s15, [r2]
 800373c:	d011      	beq.n	8003762 <arm_sub_f32+0xae>
 800373e:	edd0 7a01 	vldr	s15, [r0, #4]
 8003742:	ed91 7a01 	vldr	s14, [r1, #4]
 8003746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800374a:	2b01      	cmp	r3, #1
 800374c:	edc2 7a01 	vstr	s15, [r2, #4]
 8003750:	d007      	beq.n	8003762 <arm_sub_f32+0xae>
 8003752:	edd0 7a02 	vldr	s15, [r0, #8]
 8003756:	ed91 7a02 	vldr	s14, [r1, #8]
 800375a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800375e:	edc2 7a02 	vstr	s15, [r2, #8]
 8003762:	bcf0      	pop	{r4, r5, r6, r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop

08003768 <arm_mult_f32>:
 8003768:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800376c:	b4f0      	push	{r4, r5, r6, r7}
 800376e:	d033      	beq.n	80037d8 <arm_mult_f32+0x70>
 8003770:	f100 0610 	add.w	r6, r0, #16
 8003774:	f101 0510 	add.w	r5, r1, #16
 8003778:	f102 0410 	add.w	r4, r2, #16
 800377c:	4667      	mov	r7, ip
 800377e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003782:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378a:	3f01      	subs	r7, #1
 800378c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003790:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003794:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379c:	f106 0610 	add.w	r6, r6, #16
 80037a0:	ed44 7a03 	vstr	s15, [r4, #-12]
 80037a4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80037a8:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80037ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b0:	f105 0510 	add.w	r5, r5, #16
 80037b4:	ed44 7a02 	vstr	s15, [r4, #-8]
 80037b8:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80037bc:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80037c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c4:	f104 0410 	add.w	r4, r4, #16
 80037c8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80037cc:	d1d7      	bne.n	800377e <arm_mult_f32+0x16>
 80037ce:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80037d2:	4420      	add	r0, r4
 80037d4:	4421      	add	r1, r4
 80037d6:	4422      	add	r2, r4
 80037d8:	f013 0303 	ands.w	r3, r3, #3
 80037dc:	d01b      	beq.n	8003816 <arm_mult_f32+0xae>
 80037de:	edd1 7a00 	vldr	s15, [r1]
 80037e2:	ed90 7a00 	vldr	s14, [r0]
 80037e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ea:	3b01      	subs	r3, #1
 80037ec:	edc2 7a00 	vstr	s15, [r2]
 80037f0:	d011      	beq.n	8003816 <arm_mult_f32+0xae>
 80037f2:	edd0 7a01 	vldr	s15, [r0, #4]
 80037f6:	ed91 7a01 	vldr	s14, [r1, #4]
 80037fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037fe:	2b01      	cmp	r3, #1
 8003800:	edc2 7a01 	vstr	s15, [r2, #4]
 8003804:	d007      	beq.n	8003816 <arm_mult_f32+0xae>
 8003806:	edd0 7a02 	vldr	s15, [r0, #8]
 800380a:	ed91 7a02 	vldr	s14, [r1, #8]
 800380e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003812:	edc2 7a02 	vstr	s15, [r2, #8]
 8003816:	bcf0      	pop	{r4, r5, r6, r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop

0800381c <arm_add_f32>:
 800381c:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003820:	b4f0      	push	{r4, r5, r6, r7}
 8003822:	d033      	beq.n	800388c <arm_add_f32+0x70>
 8003824:	f100 0610 	add.w	r6, r0, #16
 8003828:	f101 0510 	add.w	r5, r1, #16
 800382c:	f102 0410 	add.w	r4, r2, #16
 8003830:	4667      	mov	r7, ip
 8003832:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003836:	ed56 7a04 	vldr	s15, [r6, #-16]
 800383a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800383e:	3f01      	subs	r7, #1
 8003840:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003844:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003848:	ed56 7a03 	vldr	s15, [r6, #-12]
 800384c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003850:	f106 0610 	add.w	r6, r6, #16
 8003854:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003858:	ed15 7a02 	vldr	s14, [r5, #-8]
 800385c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8003860:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003864:	f105 0510 	add.w	r5, r5, #16
 8003868:	ed44 7a02 	vstr	s15, [r4, #-8]
 800386c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003870:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003878:	f104 0410 	add.w	r4, r4, #16
 800387c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003880:	d1d7      	bne.n	8003832 <arm_add_f32+0x16>
 8003882:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8003886:	4420      	add	r0, r4
 8003888:	4421      	add	r1, r4
 800388a:	4422      	add	r2, r4
 800388c:	f013 0303 	ands.w	r3, r3, #3
 8003890:	d01b      	beq.n	80038ca <arm_add_f32+0xae>
 8003892:	edd1 7a00 	vldr	s15, [r1]
 8003896:	ed90 7a00 	vldr	s14, [r0]
 800389a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389e:	3b01      	subs	r3, #1
 80038a0:	edc2 7a00 	vstr	s15, [r2]
 80038a4:	d011      	beq.n	80038ca <arm_add_f32+0xae>
 80038a6:	edd0 7a01 	vldr	s15, [r0, #4]
 80038aa:	ed91 7a01 	vldr	s14, [r1, #4]
 80038ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	edc2 7a01 	vstr	s15, [r2, #4]
 80038b8:	d007      	beq.n	80038ca <arm_add_f32+0xae>
 80038ba:	edd0 7a02 	vldr	s15, [r0, #8]
 80038be:	ed91 7a02 	vldr	s14, [r1, #8]
 80038c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038c6:	edc2 7a02 	vstr	s15, [r2, #8]
 80038ca:	bcf0      	pop	{r4, r5, r6, r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	; (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	200001a4 	.word	0x200001a4

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	4e0d      	ldr	r6, [pc, #52]	; (8003914 <__libc_init_array+0x38>)
 80038e0:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <__libc_init_array+0x3c>)
 80038e2:	1ba4      	subs	r4, r4, r6
 80038e4:	10a4      	asrs	r4, r4, #2
 80038e6:	2500      	movs	r5, #0
 80038e8:	42a5      	cmp	r5, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	4e0b      	ldr	r6, [pc, #44]	; (800391c <__libc_init_array+0x40>)
 80038ee:	4c0c      	ldr	r4, [pc, #48]	; (8003920 <__libc_init_array+0x44>)
 80038f0:	f000 f980 	bl	8003bf4 <_init>
 80038f4:	1ba4      	subs	r4, r4, r6
 80038f6:	10a4      	asrs	r4, r4, #2
 80038f8:	2500      	movs	r5, #0
 80038fa:	42a5      	cmp	r5, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003904:	4798      	blx	r3
 8003906:	3501      	adds	r5, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800390e:	4798      	blx	r3
 8003910:	3501      	adds	r5, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	08003c58 	.word	0x08003c58
 8003918:	08003c58 	.word	0x08003c58
 800391c:	08003c58 	.word	0x08003c58
 8003920:	08003c5c 	.word	0x08003c5c

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <sqrt>:
 8003934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003938:	ed2d 8b02 	vpush	{d8}
 800393c:	b08b      	sub	sp, #44	; 0x2c
 800393e:	ec55 4b10 	vmov	r4, r5, d0
 8003942:	f000 f8a1 	bl	8003a88 <__ieee754_sqrt>
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <sqrt+0xac>)
 8003948:	eeb0 8a40 	vmov.f32	s16, s0
 800394c:	eef0 8a60 	vmov.f32	s17, s1
 8003950:	f993 6000 	ldrsb.w	r6, [r3]
 8003954:	1c73      	adds	r3, r6, #1
 8003956:	d02a      	beq.n	80039ae <sqrt+0x7a>
 8003958:	4622      	mov	r2, r4
 800395a:	462b      	mov	r3, r5
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fd f8de 	bl	8000b20 <__aeabi_dcmpun>
 8003964:	4607      	mov	r7, r0
 8003966:	bb10      	cbnz	r0, 80039ae <sqrt+0x7a>
 8003968:	f04f 0800 	mov.w	r8, #0
 800396c:	f04f 0900 	mov.w	r9, #0
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	4620      	mov	r0, r4
 8003976:	4629      	mov	r1, r5
 8003978:	f7fd f8aa 	bl	8000ad0 <__aeabi_dcmplt>
 800397c:	b1b8      	cbz	r0, 80039ae <sqrt+0x7a>
 800397e:	2301      	movs	r3, #1
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <sqrt+0xb0>)
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	9708      	str	r7, [sp, #32]
 8003988:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800398c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003990:	b9b6      	cbnz	r6, 80039c0 <sqrt+0x8c>
 8003992:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003996:	4668      	mov	r0, sp
 8003998:	f000 f929 	bl	8003bee <matherr>
 800399c:	b1d0      	cbz	r0, 80039d4 <sqrt+0xa0>
 800399e:	9b08      	ldr	r3, [sp, #32]
 80039a0:	b11b      	cbz	r3, 80039aa <sqrt+0x76>
 80039a2:	f7ff ff95 	bl	80038d0 <__errno>
 80039a6:	9b08      	ldr	r3, [sp, #32]
 80039a8:	6003      	str	r3, [r0, #0]
 80039aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 80039ae:	eeb0 0a48 	vmov.f32	s0, s16
 80039b2:	eef0 0a68 	vmov.f32	s1, s17
 80039b6:	b00b      	add	sp, #44	; 0x2c
 80039b8:	ecbd 8b02 	vpop	{d8}
 80039bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	4640      	mov	r0, r8
 80039c6:	4649      	mov	r1, r9
 80039c8:	f7fc ff3a 	bl	8000840 <__aeabi_ddiv>
 80039cc:	2e02      	cmp	r6, #2
 80039ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80039d2:	d1e0      	bne.n	8003996 <sqrt+0x62>
 80039d4:	f7ff ff7c 	bl	80038d0 <__errno>
 80039d8:	2321      	movs	r3, #33	; 0x21
 80039da:	6003      	str	r3, [r0, #0]
 80039dc:	e7df      	b.n	800399e <sqrt+0x6a>
 80039de:	bf00      	nop
 80039e0:	20000208 	.word	0x20000208
 80039e4:	08003c4c 	.word	0x08003c4c

080039e8 <sqrtf>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	ed2d 8b02 	vpush	{d8}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	eeb0 8a40 	vmov.f32	s16, s0
 80039f4:	f000 f8f8 	bl	8003be8 <__ieee754_sqrtf>
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <sqrtf+0x98>)
 80039fa:	f993 4000 	ldrsb.w	r4, [r3]
 80039fe:	1c63      	adds	r3, r4, #1
 8003a00:	d02c      	beq.n	8003a5c <sqrtf+0x74>
 8003a02:	eeb4 8a48 	vcmp.f32	s16, s16
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	d627      	bvs.n	8003a5c <sqrtf+0x74>
 8003a0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	d522      	bpl.n	8003a5c <sqrtf+0x74>
 8003a16:	2301      	movs	r3, #1
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <sqrtf+0x9c>)
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	ee18 0a10 	vmov	r0, s16
 8003a22:	2300      	movs	r3, #0
 8003a24:	9308      	str	r3, [sp, #32]
 8003a26:	f7fc fd89 	bl	800053c <__aeabi_f2d>
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a34:	2300      	movs	r3, #0
 8003a36:	b9ac      	cbnz	r4, 8003a64 <sqrtf+0x7c>
 8003a38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a3c:	4668      	mov	r0, sp
 8003a3e:	f000 f8d6 	bl	8003bee <matherr>
 8003a42:	b1b8      	cbz	r0, 8003a74 <sqrtf+0x8c>
 8003a44:	9b08      	ldr	r3, [sp, #32]
 8003a46:	b11b      	cbz	r3, 8003a50 <sqrtf+0x68>
 8003a48:	f7ff ff42 	bl	80038d0 <__errno>
 8003a4c:	9b08      	ldr	r3, [sp, #32]
 8003a4e:	6003      	str	r3, [r0, #0]
 8003a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a54:	f7fd f87a 	bl	8000b4c <__aeabi_d2f>
 8003a58:	ee00 0a10 	vmov	s0, r0
 8003a5c:	b00a      	add	sp, #40	; 0x28
 8003a5e:	ecbd 8b02 	vpop	{d8}
 8003a62:	bd10      	pop	{r4, pc}
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7fc feea 	bl	8000840 <__aeabi_ddiv>
 8003a6c:	2c02      	cmp	r4, #2
 8003a6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a72:	d1e3      	bne.n	8003a3c <sqrtf+0x54>
 8003a74:	f7ff ff2c 	bl	80038d0 <__errno>
 8003a78:	2321      	movs	r3, #33	; 0x21
 8003a7a:	6003      	str	r3, [r0, #0]
 8003a7c:	e7e2      	b.n	8003a44 <sqrtf+0x5c>
 8003a7e:	bf00      	nop
 8003a80:	20000208 	.word	0x20000208
 8003a84:	08003c51 	.word	0x08003c51

08003a88 <__ieee754_sqrt>:
 8003a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8c:	4955      	ldr	r1, [pc, #340]	; (8003be4 <__ieee754_sqrt+0x15c>)
 8003a8e:	ec55 4b10 	vmov	r4, r5, d0
 8003a92:	43a9      	bics	r1, r5
 8003a94:	462b      	mov	r3, r5
 8003a96:	462a      	mov	r2, r5
 8003a98:	d112      	bne.n	8003ac0 <__ieee754_sqrt+0x38>
 8003a9a:	ee10 2a10 	vmov	r2, s0
 8003a9e:	ee10 0a10 	vmov	r0, s0
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7fc fda2 	bl	80005ec <__aeabi_dmul>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4620      	mov	r0, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7fc fbe6 	bl	8000280 <__adddf3>
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	460d      	mov	r5, r1
 8003ab8:	ec45 4b10 	vmov	d0, r4, r5
 8003abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac0:	2d00      	cmp	r5, #0
 8003ac2:	ee10 0a10 	vmov	r0, s0
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	dc0f      	bgt.n	8003aea <__ieee754_sqrt+0x62>
 8003aca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003ace:	4330      	orrs	r0, r6
 8003ad0:	d0f2      	beq.n	8003ab8 <__ieee754_sqrt+0x30>
 8003ad2:	b155      	cbz	r5, 8003aea <__ieee754_sqrt+0x62>
 8003ad4:	ee10 2a10 	vmov	r2, s0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	4629      	mov	r1, r5
 8003adc:	f7fc fbce 	bl	800027c <__aeabi_dsub>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	f7fc feac 	bl	8000840 <__aeabi_ddiv>
 8003ae8:	e7e4      	b.n	8003ab4 <__ieee754_sqrt+0x2c>
 8003aea:	151b      	asrs	r3, r3, #20
 8003aec:	d073      	beq.n	8003bd6 <__ieee754_sqrt+0x14e>
 8003aee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003af2:	07dd      	lsls	r5, r3, #31
 8003af4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003af8:	bf48      	it	mi
 8003afa:	0fc8      	lsrmi	r0, r1, #31
 8003afc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b00:	bf44      	itt	mi
 8003b02:	0049      	lslmi	r1, r1, #1
 8003b04:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8003b08:	2500      	movs	r5, #0
 8003b0a:	1058      	asrs	r0, r3, #1
 8003b0c:	0fcb      	lsrs	r3, r1, #31
 8003b0e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003b12:	0049      	lsls	r1, r1, #1
 8003b14:	2316      	movs	r3, #22
 8003b16:	462c      	mov	r4, r5
 8003b18:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003b1c:	19a7      	adds	r7, r4, r6
 8003b1e:	4297      	cmp	r7, r2
 8003b20:	bfde      	ittt	le
 8003b22:	19bc      	addle	r4, r7, r6
 8003b24:	1bd2      	suble	r2, r2, r7
 8003b26:	19ad      	addle	r5, r5, r6
 8003b28:	0fcf      	lsrs	r7, r1, #31
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8003b30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003b34:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003b38:	d1f0      	bne.n	8003b1c <__ieee754_sqrt+0x94>
 8003b3a:	f04f 0c20 	mov.w	ip, #32
 8003b3e:	469e      	mov	lr, r3
 8003b40:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003b44:	42a2      	cmp	r2, r4
 8003b46:	eb06 070e 	add.w	r7, r6, lr
 8003b4a:	dc02      	bgt.n	8003b52 <__ieee754_sqrt+0xca>
 8003b4c:	d112      	bne.n	8003b74 <__ieee754_sqrt+0xec>
 8003b4e:	428f      	cmp	r7, r1
 8003b50:	d810      	bhi.n	8003b74 <__ieee754_sqrt+0xec>
 8003b52:	2f00      	cmp	r7, #0
 8003b54:	eb07 0e06 	add.w	lr, r7, r6
 8003b58:	da42      	bge.n	8003be0 <__ieee754_sqrt+0x158>
 8003b5a:	f1be 0f00 	cmp.w	lr, #0
 8003b5e:	db3f      	blt.n	8003be0 <__ieee754_sqrt+0x158>
 8003b60:	f104 0801 	add.w	r8, r4, #1
 8003b64:	1b12      	subs	r2, r2, r4
 8003b66:	428f      	cmp	r7, r1
 8003b68:	bf88      	it	hi
 8003b6a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8003b6e:	1bc9      	subs	r1, r1, r7
 8003b70:	4433      	add	r3, r6
 8003b72:	4644      	mov	r4, r8
 8003b74:	0052      	lsls	r2, r2, #1
 8003b76:	f1bc 0c01 	subs.w	ip, ip, #1
 8003b7a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003b7e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003b82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003b86:	d1dd      	bne.n	8003b44 <__ieee754_sqrt+0xbc>
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	d006      	beq.n	8003b9a <__ieee754_sqrt+0x112>
 8003b8c:	1c5c      	adds	r4, r3, #1
 8003b8e:	bf13      	iteet	ne
 8003b90:	3301      	addne	r3, #1
 8003b92:	3501      	addeq	r5, #1
 8003b94:	4663      	moveq	r3, ip
 8003b96:	f023 0301 	bicne.w	r3, r3, #1
 8003b9a:	106a      	asrs	r2, r5, #1
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	07e9      	lsls	r1, r5, #31
 8003ba0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003ba4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003ba8:	bf48      	it	mi
 8003baa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003bb2:	461c      	mov	r4, r3
 8003bb4:	e780      	b.n	8003ab8 <__ieee754_sqrt+0x30>
 8003bb6:	0aca      	lsrs	r2, r1, #11
 8003bb8:	3815      	subs	r0, #21
 8003bba:	0549      	lsls	r1, r1, #21
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	d0fa      	beq.n	8003bb6 <__ieee754_sqrt+0x12e>
 8003bc0:	02d6      	lsls	r6, r2, #11
 8003bc2:	d50a      	bpl.n	8003bda <__ieee754_sqrt+0x152>
 8003bc4:	f1c3 0420 	rsb	r4, r3, #32
 8003bc8:	fa21 f404 	lsr.w	r4, r1, r4
 8003bcc:	1e5d      	subs	r5, r3, #1
 8003bce:	4099      	lsls	r1, r3
 8003bd0:	4322      	orrs	r2, r4
 8003bd2:	1b43      	subs	r3, r0, r5
 8003bd4:	e78b      	b.n	8003aee <__ieee754_sqrt+0x66>
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	e7f0      	b.n	8003bbc <__ieee754_sqrt+0x134>
 8003bda:	0052      	lsls	r2, r2, #1
 8003bdc:	3301      	adds	r3, #1
 8003bde:	e7ef      	b.n	8003bc0 <__ieee754_sqrt+0x138>
 8003be0:	46a0      	mov	r8, r4
 8003be2:	e7bf      	b.n	8003b64 <__ieee754_sqrt+0xdc>
 8003be4:	7ff00000 	.word	0x7ff00000

08003be8 <__ieee754_sqrtf>:
 8003be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003bec:	4770      	bx	lr

08003bee <matherr>:
 8003bee:	2000      	movs	r0, #0
 8003bf0:	4770      	bx	lr
	...

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
