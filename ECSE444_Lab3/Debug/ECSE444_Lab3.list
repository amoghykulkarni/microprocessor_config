
ECSE444_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa4  08002fa4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa4  08002fa4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa4  08002fa4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000014  08002fc0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002fc0  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f697  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd1  00000000  00000000  0002f6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  000312b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a413  00000000  00000000  00032a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a090  00000000  00000000  0005ce33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010766a  00000000  00000000  00066ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0016e52d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  0016e620  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  001717f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000014 	.word	0x20000014
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002748 	.word	0x08002748

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000018 	.word	0x20000018
 80001f8:	08002748 	.word	0x08002748

080001fc <main>:




int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 faf6 	bl	80007f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f8a3 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f981 	bl	8000510 <MX_GPIO_Init>
  MX_DAC1_Init();
 800020e:	f000 f8f1 	bl	80003f4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000212:	f000 f92f 	bl	8000474 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000216:	2100      	movs	r1, #0
 8000218:	4844      	ldr	r0, [pc, #272]	; (800032c <main+0x130>)
 800021a:	f000 fc88 	bl	8000b2e <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800021e:	2110      	movs	r1, #16
 8000220:	4842      	ldr	r0, [pc, #264]	; (800032c <main+0x130>)
 8000222:	f000 fc84 	bl	8000b2e <HAL_DAC_Start>
  float x = 0;
 8000226:	f04f 0300 	mov.w	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  int deltaS = (threshold2 + 1)/16;
 800022c:	4b40      	ldr	r3, [pc, #256]	; (8000330 <main+0x134>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	da00      	bge.n	8000238 <main+0x3c>
 8000236:	330f      	adds	r3, #15
 8000238:	111b      	asrs	r3, r3, #4
 800023a:	60bb      	str	r3, [r7, #8]
  int deltaT = 2*deltaS;
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	607b      	str	r3, [r7, #4]
  int flag = 1;
 8000242:	2301      	movs	r3, #1
 8000244:	603b      	str	r3, [r7, #0]
	  //timeS = HAL_GetTick();
	  //HAL_Delay(delay);



	  if(saw <= threshold2){
 8000246:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <main+0x138>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	461a      	mov	r2, r3
 800024c:	4b38      	ldr	r3, [pc, #224]	; (8000330 <main+0x134>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	429a      	cmp	r2, r3
 8000252:	dc08      	bgt.n	8000266 <main+0x6a>
		  saw += deltaS;
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	b29a      	uxth	r2, r3
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <main+0x138>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4413      	add	r3, r2
 800025e:	b29a      	uxth	r2, r3
 8000260:	4b34      	ldr	r3, [pc, #208]	; (8000334 <main+0x138>)
 8000262:	801a      	strh	r2, [r3, #0]
 8000264:	e002      	b.n	800026c <main+0x70>

	  } else {
		  saw = 0;
 8000266:	4b33      	ldr	r3, [pc, #204]	; (8000334 <main+0x138>)
 8000268:	2200      	movs	r2, #0
 800026a:	801a      	strh	r2, [r3, #0]
	  }

	  //deltaTimeS = HAL_GetTick() - timeS;
	  //Fs = (float) 1000/deltaTimeS;

	 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, saw);
 800026c:	4b31      	ldr	r3, [pc, #196]	; (8000334 <main+0x138>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	2200      	movs	r2, #0
 8000272:	2100      	movs	r1, #0
 8000274:	482d      	ldr	r0, [pc, #180]	; (800032c <main+0x130>)
 8000276:	f000 fcac 	bl	8000bd2 <HAL_DAC_SetValue>
//#endif

//#ifdef TRIANGLE

	 if(increment && triangleWave >= threshold2){
 800027a:	4b2f      	ldr	r3, [pc, #188]	; (8000338 <main+0x13c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d00a      	beq.n	8000298 <main+0x9c>
 8000282:	4b2e      	ldr	r3, [pc, #184]	; (800033c <main+0x140>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	4b29      	ldr	r3, [pc, #164]	; (8000330 <main+0x134>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	db03      	blt.n	8000298 <main+0x9c>
		 increment =0;
 8000290:	4b29      	ldr	r3, [pc, #164]	; (8000338 <main+0x13c>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	e01c      	b.n	80002d2 <main+0xd6>
	 } else if(increment){
 8000298:	4b27      	ldr	r3, [pc, #156]	; (8000338 <main+0x13c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d008      	beq.n	80002b2 <main+0xb6>
		 triangleWave+=deltaT;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	4b25      	ldr	r3, [pc, #148]	; (800033c <main+0x140>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	4413      	add	r3, r2
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	4b23      	ldr	r3, [pc, #140]	; (800033c <main+0x140>)
 80002ae:	801a      	strh	r2, [r3, #0]
 80002b0:	e00f      	b.n	80002d2 <main+0xd6>
	 }else if(triangleWave == 0){
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <main+0x140>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d103      	bne.n	80002c2 <main+0xc6>
		 increment =1;
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <main+0x13c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	e007      	b.n	80002d2 <main+0xd6>
	 }else{
		 triangleWave-= deltaT;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <main+0x140>)
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	b29b      	uxth	r3, r3
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <main+0x140>)
 80002d0:	801a      	strh	r2, [r3, #0]
	  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, triangleWave);
//#endif



	  HAL_Delay(delay);
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <main+0x144>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fb00 	bl	80008dc <HAL_Delay>




//#ifdef SINE
	  output = (2047.5)*(1+arm_sin_f32(x));
 80002dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80002e0:	f002 f9c0 	bl	8002664 <arm_sin_f32>
 80002e4:	eeb0 7a40 	vmov.f32	s14, s0
 80002e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80002ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000344 <main+0x148>
 80002f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <main+0x14c>)
 80002fa:	edc3 7a00 	vstr	s15, [r3]
	  // samples 0 -15 --> 16 --> (2*3.14)/16 = 0.3926
	  x += ((2*PI)/16);//0.3926; //(2*0.19634);
 80002fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000302:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800034c <main+0x150>
 8000306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800030a:	edc7 7a03 	vstr	s15, [r7, #12]
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint16_t)output);
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <main+0x14c>)
 8000310:	edd3 7a00 	vldr	s15, [r3]
 8000314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000318:	ee17 3a90 	vmov	r3, s15
 800031c:	b29b      	uxth	r3, r3
 800031e:	2200      	movs	r2, #0
 8000320:	2110      	movs	r1, #16
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <main+0x130>)
 8000324:	f000 fc55 	bl	8000bd2 <HAL_DAC_SetValue>
	  if(saw <= threshold2){
 8000328:	e78d      	b.n	8000246 <main+0x4a>
 800032a:	bf00      	nop
 800032c:	20000034 	.word	0x20000034
 8000330:	20000004 	.word	0x20000004
 8000334:	200000b4 	.word	0x200000b4
 8000338:	20000000 	.word	0x20000000
 800033c:	20000054 	.word	0x20000054
 8000340:	20000030 	.word	0x20000030
 8000344:	44fff000 	.word	0x44fff000
 8000348:	20000048 	.word	0x20000048
 800034c:	3ec90fdb 	.word	0x3ec90fdb

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0314 	add.w	r3, r7, #20
 800035a:	2244      	movs	r2, #68	; 0x44
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 f9ea 	bl	8002738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000372:	2000      	movs	r0, #0
 8000374:	f000 ff5c 	bl	8001230 <HAL_PWREx_ControlVoltageScaling>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800037e:	f000 f92b 	bl	80005d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000382:	2310      	movs	r3, #16
 8000384:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000396:	2301      	movs	r3, #1
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800039a:	2301      	movs	r3, #1
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800039e:	233c      	movs	r3, #60	; 0x3c
 80003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003aa:	2302      	movs	r3, #2
 80003ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ffe0 	bl	8001378 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003be:	f000 f90b 	bl	80005d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2303      	movs	r3, #3
 80003c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	2105      	movs	r1, #5
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fbf2 	bl	8001bc4 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003e6:	f000 f8f7 	bl	80005d8 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3758      	adds	r7, #88	; 0x58
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	; 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003fa:	463b      	mov	r3, r7
 80003fc:	2228      	movs	r2, #40	; 0x28
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 f999 	bl	8002738 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_DAC1_Init+0x78>)
 8000408:	4a19      	ldr	r2, [pc, #100]	; (8000470 <MX_DAC1_Init+0x7c>)
 800040a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800040c:	4817      	ldr	r0, [pc, #92]	; (800046c <MX_DAC1_Init+0x78>)
 800040e:	f000 fb6c 	bl	8000aea <HAL_DAC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000418:	f000 f8de 	bl	80005d8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000420:	2300      	movs	r3, #0
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000424:	2300      	movs	r3, #0
 8000426:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	480c      	ldr	r0, [pc, #48]	; (800046c <MX_DAC1_Init+0x78>)
 800043c:	f000 fbee 	bl	8000c1c <HAL_DAC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000446:	f000 f8c7 	bl	80005d8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	2210      	movs	r2, #16
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_DAC1_Init+0x78>)
 8000456:	f000 fbe1 	bl	8000c1c <HAL_DAC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8000460:	f000 f8ba 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3728      	adds	r7, #40	; 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000034 	.word	0x20000034
 8000470:	40007400 	.word	0x40007400

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_TIM2_Init+0x98>)
 8000494:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000498:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <MX_TIM2_Init+0x98>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <MX_TIM2_Init+0x98>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004a6:	4b19      	ldr	r3, [pc, #100]	; (800050c <MX_TIM2_Init+0x98>)
 80004a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_TIM2_Init+0x98>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_TIM2_Init+0x98>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ba:	4814      	ldr	r0, [pc, #80]	; (800050c <MX_TIM2_Init+0x98>)
 80004bc:	f001 fe06 	bl	80020cc <HAL_TIM_Base_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80004c6:	f000 f887 	bl	80005d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_TIM2_Init+0x98>)
 80004d8:	f001 fe4f 	bl	800217a <HAL_TIM_ConfigClockSource>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80004e2:	f000 f879 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <MX_TIM2_Init+0x98>)
 80004f4:	f002 f82e 	bl	8002554 <HAL_TIMEx_MasterConfigSynchronization>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004fe:	f000 f86b 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000068 	.word	0x20000068

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b29      	ldr	r3, [pc, #164]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a28      	ldr	r2, [pc, #160]	; (80005cc <MX_GPIO_Init+0xbc>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b26      	ldr	r3, [pc, #152]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a22      	ldr	r2, [pc, #136]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <MX_GPIO_Init+0xbc>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b1d      	ldr	r3, [pc, #116]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_GPIO_Init+0xbc>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_GPIO_Init+0xbc>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <MX_GPIO_Init+0xc0>)
 8000576:	f000 fe23 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <MX_GPIO_Init+0xc4>)
 8000582:	f000 fe1d 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4619      	mov	r1, r3
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_GPIO_Init+0xc0>)
 80005a0:	f000 fc7c 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_GPIO_Init+0xc4>)
 80005be:	f000 fc6d 	bl	8000e9c <HAL_GPIO_Init>

}
 80005c2:	bf00      	nop
 80005c4:	3720      	adds	r7, #32
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800
 80005d4:	48000400 	.word	0x48000400

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005de:	e7fe      	b.n	80005de <Error_Handler+0x6>

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x44>)
 80005e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6613      	str	r3, [r2, #96]	; 0x60
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x44>)
 8000600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6593      	str	r3, [r2, #88]	; 0x58
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <HAL_DAC_MspInit+0x74>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d124      	bne.n	8000694 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 8000650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000654:	6593      	str	r3, [r2, #88]	; 0x58
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_DAC_MspInit+0x78>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800067a:	2330      	movs	r3, #48	; 0x30
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fc04 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40007400 	.word	0x40007400
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b4:	d10b      	bne.n	80006ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_TIM_Base_MspInit+0x38>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_TIM_Base_MspInit+0x38>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_TIM_Base_MspInit+0x38>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f8b6 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x64>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <SystemInit+0x64>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <SystemInit+0x68>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <SystemInit+0x68>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <SystemInit+0x68>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SystemInit+0x68>)
 8000760:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000764:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000768:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <SystemInit+0x68>)
 800076c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000770:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <SystemInit+0x68>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <SystemInit+0x68>)
 8000778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <SystemInit+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x64>)
 8000786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078a:	609a      	str	r2, [r3, #8]
#endif
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	40021000 	.word	0x40021000

080007a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff ffc6 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007aa:	e003      	b.n	80007b4 <LoopCopyDataInit>

080007ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80007ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80007b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80007b2:	3104      	adds	r1, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80007b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80007ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80007bc:	d3f6      	bcc.n	80007ac <CopyDataInit>
	ldr	r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80007c0:	e002      	b.n	80007c8 <LoopFillZerobss>

080007c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80007c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80007c4:	f842 3b04 	str.w	r3, [r2], #4

080007c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <LoopForever+0x16>)
	cmp	r2, r3
 80007ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80007cc:	d3f9      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f001 ff8f 	bl	80026f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d2:	f7ff fd13 	bl	80001fc <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80007dc:	08002fac 	.word	0x08002fac
	ldr	r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007e4:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80007e8:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80007ec:	200000cc 	.word	0x200000cc

080007f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_IRQHandler>

080007f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f941 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f80e 	bl	8000824 <HAL_InitTick>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	e001      	b.n	8000818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000814:	f7ff fee4 	bl	80005e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000818:	79fb      	ldrb	r3, [r7, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_InitTick+0x6c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d023      	beq.n	8000880 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <HAL_InitTick+0x70>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_InitTick+0x6c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f93f 	bl	8000ad2 <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10f      	bne.n	800087a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d809      	bhi.n	8000874 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000868:	f000 f917 	bl	8000a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_InitTick+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	e007      	b.n	8000884 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e004      	b.n	8000884 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
 800087e:	e001      	b.n	8000884 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000010 	.word	0x20000010
 8000894:	20000008 	.word	0x20000008
 8000898:	2000000c 	.word	0x2000000c

0800089c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x20>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_IncTick+0x24>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_IncTick+0x24>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000010 	.word	0x20000010
 80008c0:	200000c8 	.word	0x200000c8

080008c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <HAL_GetTick+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	200000c8 	.word	0x200000c8

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff ffee 	bl	80008c4 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_Delay+0x40>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000902:	bf00      	nop
 8000904:	f7ff ffde 	bl	80008c4 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000010 	.word	0x20000010

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff47 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff5c 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffb0 	bl	8000a40 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e014      	b.n	8000b26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d105      	bne.n	8000b12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fd8b 	bl	8000628 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2202      	movs	r2, #2
 8000b16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_DAC_Start+0x16>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e040      	b.n	8000bc6 <HAL_DAC_Start+0x98>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10f      	bne.n	8000b8e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d11d      	bne.n	8000bb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0201 	orr.w	r2, r2, #1
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	e014      	b.n	8000bb8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d107      	bne.n	8000bb8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f042 0202 	orr.w	r2, r2, #2
 8000bb6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b087      	sub	sp, #28
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e004      	b.n	8000c06 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	3314      	adds	r3, #20
 8000c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	371c      	adds	r7, #28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	795b      	ldrb	r3, [r3, #5]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_DAC_ConfigChannel+0x1c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e12a      	b.n	8000e8e <HAL_DAC_ConfigChannel+0x272>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2202      	movs	r2, #2
 8000c42:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d174      	bne.n	8000d36 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000c4c:	f7ff fe3a 	bl	80008c4 <HAL_GetTick>
 8000c50:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d134      	bne.n	8000cc2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c58:	e011      	b.n	8000c7e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c5a:	f7ff fe33 	bl	80008c4 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d90a      	bls.n	8000c7e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	f043 0208 	orr.w	r2, r3, #8
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2203      	movs	r2, #3
 8000c78:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e107      	b.n	8000e8e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d1e6      	bne.n	8000c5a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fe25 	bl	80008dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	69d2      	ldr	r2, [r2, #28]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9c:	e01e      	b.n	8000cdc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c9e:	f7ff fe11 	bl	80008c4 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d90a      	bls.n	8000cc2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f043 0208 	orr.w	r2, r3, #8
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e0e5      	b.n	8000e8e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	dbe8      	blt.n	8000c9e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff fe05 	bl	80008dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	69d2      	ldr	r2, [r2, #28]
 8000cda:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	ea02 0103 	and.w	r1, r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	6a1a      	ldr	r2, [r3, #32]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	409a      	lsls	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	21ff      	movs	r1, #255	; 0xff
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	ea02 0103 	and.w	r1, r2, r3
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d11d      	bne.n	8000d7a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	4013      	ands	r3, r2
 8000d58:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	69fa      	ldr	r2, [r7, #28]
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d80:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	2207      	movs	r2, #7
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e1e:	d104      	bne.n	8000e2a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	e018      	b.n	8000e5c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e00f      	b.n	8000e5c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000e3c:	f001 f878 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8000e40:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_DAC_ConfigChannel+0x27c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d904      	bls.n	8000e54 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e003      	b.n	8000e5c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e5a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	22c0      	movs	r2, #192	; 0xc0
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	04c4b400 	.word	0x04c4b400

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e166      	b.n	800117a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8158 	beq.w	8001174 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d00b      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	2b11      	cmp	r3, #17
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b12      	cmp	r3, #18
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0xea>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b2 	beq.w	8001174 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b61      	ldr	r3, [pc, #388]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b5e      	ldr	r3, [pc, #376]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a5c      	ldr	r2, [pc, #368]	; (800119c <HAL_GPIO_Init+0x300>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001052:	d02b      	beq.n	80010ac <HAL_GPIO_Init+0x210>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a52      	ldr	r2, [pc, #328]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d025      	beq.n	80010a8 <HAL_GPIO_Init+0x20c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x308>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d01f      	beq.n	80010a4 <HAL_GPIO_Init+0x208>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d019      	beq.n	80010a0 <HAL_GPIO_Init+0x204>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d013      	beq.n	800109c <HAL_GPIO_Init+0x200>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_GPIO_Init+0x314>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d00d      	beq.n	8001098 <HAL_GPIO_Init+0x1fc>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <HAL_GPIO_Init+0x318>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x1f8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4c      	ldr	r2, [pc, #304]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d101      	bne.n	8001090 <HAL_GPIO_Init+0x1f4>
 800108c:	2307      	movs	r3, #7
 800108e:	e00e      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001090:	2308      	movs	r3, #8
 8001092:	e00c      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001094:	2306      	movs	r3, #6
 8001096:	e00a      	b.n	80010ae <HAL_GPIO_Init+0x212>
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <HAL_GPIO_Init+0x212>
 800109c:	2304      	movs	r3, #4
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x212>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x300>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f0:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x320>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111a:	4a28      	ldr	r2, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x320>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_GPIO_Init+0x320>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_GPIO_Init+0x320>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f ae91 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48001400 	.word	0x48001400
 80011b4:	48001800 	.word	0x48001800
 80011b8:	48001c00 	.word	0x48001c00
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_PWREx_GetVoltageRange+0x3c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001200:	d102      	bne.n	8001208 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	e00b      	b.n	8001220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_PWREx_GetVoltageRange+0x3c>)
 800120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001216:	d102      	bne.n	800121e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121c:	e000      	b.n	8001220 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800121e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000

08001230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d141      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123e:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800124a:	d131      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001252:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2232      	movs	r2, #50	; 0x32
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	4a3f      	ldr	r2, [pc, #252]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001282:	e002      	b.n	800128a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3b01      	subs	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800128a:	4b38      	ldr	r3, [pc, #224]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001296:	d102      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f2      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d158      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e057      	b.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b6:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012c0:	e04d      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c8:	d141      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d6:	d131      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012f0:	4a1e      	ldr	r2, [pc, #120]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2232      	movs	r2, #50	; 0x32
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9b      	lsrs	r3, r3, #18
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130e:	e002      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3b01      	subs	r3, #1
 8001314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001322:	d102      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f2      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001336:	d112      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e011      	b.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800134c:	e007      	b.n	800135e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40007000 	.word	0x40007000
 8001370:	20000008 	.word	0x20000008
 8001374:	431bde83 	.word	0x431bde83

08001378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	f000 bc16 	b.w	8001bb8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138c:	4ba0      	ldr	r3, [pc, #640]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 030c 	and.w	r3, r3, #12
 8001394:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001396:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80e4 	beq.w	8001576 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <HAL_RCC_OscConfig+0x4c>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	f040 808b 	bne.w	80014d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 8087 	bne.w	80014d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_OscConfig+0x64>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e3ed      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	4b8b      	ldr	r3, [pc, #556]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_RCC_OscConfig+0x7e>
 80013ec:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f4:	e005      	b.n	8001402 <HAL_RCC_OscConfig+0x8a>
 80013f6:	4b86      	ldr	r3, [pc, #536]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80013f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001402:	4293      	cmp	r3, r2
 8001404:	d223      	bcs.n	800144e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fd9c 	bl	8001f48 <RCC_SetFlashLatencyFromMSIRange>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e3ce      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b7d      	ldr	r3, [pc, #500]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4977      	ldr	r1, [pc, #476]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4972      	ldr	r1, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e025      	b.n	800149a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	496a      	ldr	r1, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	4965      	ldr	r1, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd5c 	bl	8001f48 <RCC_SetFlashLatencyFromMSIRange>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e38e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800149a:	f000 fcbf 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 800149e:	4601      	mov	r1, r0
 80014a0:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	4a5a      	ldr	r2, [pc, #360]	; (8001614 <HAL_RCC_OscConfig+0x29c>)
 80014ac:	5cd3      	ldrb	r3, [r2, r3]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	fa21 f303 	lsr.w	r3, r1, r3
 80014b6:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x2a0>)
 80014b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <HAL_RCC_OscConfig+0x2a4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f9b0 	bl	8000824 <HAL_InitTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d052      	beq.n	8001574 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	e372      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d032      	beq.n	8001540 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014da:	4b4d      	ldr	r3, [pc, #308]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a4c      	ldr	r2, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e6:	f7ff f9ed 	bl	80008c4 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ee:	f7ff f9e9 	bl	80008c4 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e35b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3f      	ldr	r2, [pc, #252]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	493a      	ldr	r1, [pc, #232]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e01a      	b.n	8001576 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001540:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a32      	ldr	r2, [pc, #200]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154c:	f7ff f9ba 	bl	80008c4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001554:	f7ff f9b6 	bl	80008c4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e328      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1dc>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d073      	beq.n	800166a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b08      	cmp	r3, #8
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x21c>
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b0c      	cmp	r3, #12
 800158c:	d10e      	bne.n	80015ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b03      	cmp	r3, #3
 8001592:	d10b      	bne.n	80015ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d063      	beq.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d15f      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e305      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_OscConfig+0x24c>
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e01d      	b.n	8001600 <HAL_RCC_OscConfig+0x288>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x270>
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x288>
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_RCC_OscConfig+0x298>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01b      	beq.n	8001640 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff f95c 	bl	80008c4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800160e:	e010      	b.n	8001632 <HAL_RCC_OscConfig+0x2ba>
 8001610:	40021000 	.word	0x40021000
 8001614:	08002760 	.word	0x08002760
 8001618:	20000008 	.word	0x20000008
 800161c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff f950 	bl	80008c4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e2c2      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001632:	4baf      	ldr	r3, [pc, #700]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x2a8>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f940 	bl	80008c4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff f93c 	bl	80008c4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e2ae      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165a:	4ba5      	ldr	r3, [pc, #660]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d0>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x310>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d119      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	4b99      	ldr	r3, [pc, #612]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x328>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e28b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b93      	ldr	r3, [pc, #588]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4990      	ldr	r1, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e040      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d023      	beq.n	8001706 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016be:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a8b      	ldr	r2, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff f8fb 	bl	80008c4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff f8f7 	bl	80008c4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e269      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e4:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	497c      	ldr	r1, [pc, #496]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e018      	b.n	8001738 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff f8d7 	bl	80008c4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff f8d3 	bl	80008c4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e245      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800172c:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d03c      	beq.n	80017be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01c      	beq.n	8001786 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800174e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001752:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f8b2 	bl	80008c4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff f8ae 	bl	80008c4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e220      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ef      	beq.n	8001764 <HAL_RCC_OscConfig+0x3ec>
 8001784:	e01b      	b.n	80017be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f895 	bl	80008c4 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff f891 	bl	80008c4 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e203      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ef      	bne.n	800179e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80a6 	beq.w	8001918 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10d      	bne.n	80017f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	4a43      	ldr	r2, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6593      	str	r3, [r2, #88]	; 0x58
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f4:	2301      	movs	r3, #1
 80017f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d118      	bne.n	8001836 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a3a      	ldr	r2, [pc, #232]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001810:	f7ff f858 	bl	80008c4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001818:	f7ff f854 	bl	80008c4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1c6      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182a:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_RCC_OscConfig+0x57c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d108      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d8>
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184e:	e024      	b.n	800189a <HAL_RCC_OscConfig+0x522>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d110      	bne.n	800187a <HAL_RCC_OscConfig+0x502>
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001878:	e00f      	b.n	800189a <HAL_RCC_OscConfig+0x522>
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 8001892:	f023 0304 	bic.w	r3, r3, #4
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d016      	beq.n	80018d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f80f 	bl	80008c4 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff f80b 	bl	80008c4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e17b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ed      	beq.n	80018aa <HAL_RCC_OscConfig+0x532>
 80018ce:	e01a      	b.n	8001906 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7fe fff8 	bl	80008c4 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d6:	e00f      	b.n	80018f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7fe fff4 	bl	80008c4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d906      	bls.n	80018f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e164      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	4ba8      	ldr	r3, [pc, #672]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e8      	bne.n	80018d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4ba3      	ldr	r3, [pc, #652]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4aa2      	ldr	r2, [pc, #648]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800192c:	4b9b      	ldr	r3, [pc, #620]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 800192e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001932:	4a9a      	ldr	r2, [pc, #616]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7fe ffc2 	bl	80008c4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001944:	f7fe ffbe 	bl	80008c4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e130      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001956:	4b91      	ldr	r3, [pc, #580]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001958:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x5cc>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001966:	4b8d      	ldr	r3, [pc, #564]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196c:	4a8b      	ldr	r2, [pc, #556]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7fe ffa5 	bl	80008c4 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197e:	f7fe ffa1 	bl	80008c4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e113      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001990:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8107 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f040 80cb 	bne.w	8001b48 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d12c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	3b01      	subs	r3, #1
 80019d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d123      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d11b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d113      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d109      	bne.n	8001a20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d06d      	beq.n	8001afc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d068      	beq.n	8001af8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0ba      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a4e:	f7fe ff39 	bl	80008c4 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7fe ff35 	bl	80008c4 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0a7      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a74:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCC_OscConfig+0x828>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a84:	3a01      	subs	r2, #1
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8e:	0212      	lsls	r2, r2, #8
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0552      	lsls	r2, r2, #21
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aa2:	0852      	lsrs	r2, r2, #1
 8001aa4:	3a01      	subs	r2, #1
 8001aa6:	0652      	lsls	r2, r2, #25
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aae:	06d2      	lsls	r2, r2, #27
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	493a      	ldr	r1, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a37      	ldr	r2, [pc, #220]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a34      	ldr	r2, [pc, #208]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad0:	f7fe fef8 	bl	80008c4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7fe fef4 	bl	80008c4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e066      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af6:	e05e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e05d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d156      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b20:	f7fe fed0 	bl	80008c4 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe fecc 	bl	80008c4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e03e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x7b0>
 8001b46:	e036      	b.n	8001bb6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	d031      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b6c:	f023 0303 	bic.w	r3, r3, #3
 8001b70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_RCC_OscConfig+0x824>)
 8001b78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7fe fe9f 	bl	80008c4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b88:	e00c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8a:	f7fe fe9b 	bl	80008c4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d905      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e00d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x848>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ec      	bne.n	8001b8a <HAL_RCC_OscConfig+0x812>
 8001bb0:	e001      	b.n	8001bb6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e10f      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	4984      	ldr	r1, [pc, #528]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0f7      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8089 	beq.w	8001d2c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d133      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0e4      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c32:	f000 f9e3 	bl	8001ffc <RCC_GetSysClockFreqFromPLLSource>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b74      	ldr	r3, [pc, #464]	; (8001e0c <HAL_RCC_ClockConfig+0x248>)
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d955      	bls.n	8001cea <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c52:	4a6d      	ldr	r2, [pc, #436]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e044      	b.n	8001cea <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03e      	beq.n	8001cea <HAL_RCC_ClockConfig+0x126>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13a      	bne.n	8001cea <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c74:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7c:	4a62      	ldr	r2, [pc, #392]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e02f      	b.n	8001cea <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0ac      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001caa:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0a0      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e098      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cca:	f000 f8a7 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_RCC_ClockConfig+0x248>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d909      	bls.n	8001cea <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cde:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4944      	ldr	r1, [pc, #272]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fde2 	bl	80008c4 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe fdde 	bl	80008c4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e070      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d38:	4b33      	ldr	r3, [pc, #204]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4930      	ldr	r1, [pc, #192]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	608b      	str	r3, [r1, #8]
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d5c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d210      	bcs.n	8001d8e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 020f 	bic.w	r2, r3, #15
 8001d74:	4923      	ldr	r1, [pc, #140]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7c:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <HAL_RCC_ClockConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e036      	b.n	8001dfc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4918      	ldr	r1, [pc, #96]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4910      	ldr	r1, [pc, #64]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dcc:	f000 f826 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_ClockConfig+0x244>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_RCC_ClockConfig+0x24c>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa21 f303 	lsr.w	r3, r1, r3
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_RCC_ClockConfig+0x250>)
 8001dea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x254>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fd17 	bl	8000824 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	04c4b400 	.word	0x04c4b400
 8001e10:	08002760 	.word	0x08002760
 8001e14:	20000008 	.word	0x20000008
 8001e18:	2000000c 	.word	0x2000000c

08001e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x34>
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d121      	bne.n	8001e8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d11e      	bne.n	8001e8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e50:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e5c:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e78:	4a2a      	ldr	r2, [pc, #168]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	e004      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d133      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xaa>
 8001ebe:	e005      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ec2:	617b      	str	r3, [r7, #20]
      break;
 8001ec4:	e005      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	617b      	str	r3, [r7, #20]
      break;
 8001ed0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	3301      	adds	r3, #1
 8001ede:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	fb02 f203 	mul.w	r2, r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0e5b      	lsrs	r3, r3, #25
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f12:	69bb      	ldr	r3, [r7, #24]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3724      	adds	r7, #36	; 0x24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08002770 	.word	0x08002770
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000008 	.word	0x20000008

08001f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f60:	f7ff f946 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001f64:	6178      	str	r0, [r7, #20]
 8001f66:	e014      	b.n	8001f92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f72:	6593      	str	r3, [r2, #88]	; 0x58
 8001f74:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f936 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f98:	d10b      	bne.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d913      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fa4:	d902      	bls.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e00d      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e00a      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fb6:	d902      	bls.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e004      	b.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b70      	cmp	r3, #112	; 0x70
 8001fc2:	d101      	bne.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 020f 	bic.w	r2, r3, #15
 8001fd0:	4909      	ldr	r1, [pc, #36]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40022000 	.word	0x40022000

08001ffc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d118      	bne.n	8002044 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e005      	b.n	800203a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d002      	beq.n	800205a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002054:	2b03      	cmp	r3, #3
 8002056:	d003      	beq.n	8002060 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002058:	e005      	b.n	8002066 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800205c:	613b      	str	r3, [r7, #16]
    break;
 800205e:	e005      	b.n	800206c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002062:	613b      	str	r3, [r7, #16]
    break;
 8002064:	e002      	b.n	800206c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	613b      	str	r3, [r7, #16]
    break;
 800206a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	3301      	adds	r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	0a1b      	lsrs	r3, r3, #8
 8002080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	0e5b      	lsrs	r3, r3, #25
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	3301      	adds	r3, #1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020ac:	683b      	ldr	r3, [r7, #0]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08002770 	.word	0x08002770
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200

080020cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e049      	b.n	8002172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fad6 	bl	80006a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3304      	adds	r3, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4610      	mov	r0, r2
 800210c:	f000 f8ee 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_TIM_ConfigClockSource+0x18>
 800218e:	2302      	movs	r3, #2
 8002190:	e0a8      	b.n	80022e4 <HAL_TIM_ConfigClockSource+0x16a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021bc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d067      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x124>
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d80b      	bhi.n	80021ea <HAL_TIM_ConfigClockSource+0x70>
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d073      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x144>
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d802      	bhi.n	80021e0 <HAL_TIM_ConfigClockSource+0x66>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d06f      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021de:	e078      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d06c      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x144>
 80021e4:	2b30      	cmp	r3, #48	; 0x30
 80021e6:	d06a      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x144>
      break;
 80021e8:	e073      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021ea:	2b70      	cmp	r3, #112	; 0x70
 80021ec:	d00d      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x90>
 80021ee:	2b70      	cmp	r3, #112	; 0x70
 80021f0:	d804      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x82>
 80021f2:	2b50      	cmp	r3, #80	; 0x50
 80021f4:	d033      	beq.n	800225e <HAL_TIM_ConfigClockSource+0xe4>
 80021f6:	2b60      	cmp	r3, #96	; 0x60
 80021f8:	d041      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80021fa:	e06a      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002200:	d066      	beq.n	80022d0 <HAL_TIM_ConfigClockSource+0x156>
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d017      	beq.n	8002238 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002208:	e063      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f000 f97b 	bl	8002514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800222c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
      break;
 8002236:	e04c      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f000 f964 	bl	8002514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225a:	609a      	str	r2, [r3, #8]
      break;
 800225c:	e039      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	f000 f8d8 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2150      	movs	r1, #80	; 0x50
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f931 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 800227c:	e029      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	f000 f8f7 	bl	800247e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2160      	movs	r1, #96	; 0x60
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f921 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 800229c:	e019      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f000 f8b8 	bl	8002420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f911 	bl	80024de <TIM_ITRx_SetConfig>
      break;
 80022bc:	e009      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f000 f908 	bl	80024de <TIM_ITRx_SetConfig>
        break;
 80022ce:	e000      	b.n	80022d2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80022d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00f      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3b      	ldr	r2, [pc, #236]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <TIM_Base_SetConfig+0x124>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d01b      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d017      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2a      	ldr	r2, [pc, #168]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00f      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <TIM_Base_SetConfig+0x124>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00b      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a28      	ldr	r2, [pc, #160]	; (8002414 <TIM_Base_SetConfig+0x128>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d003      	beq.n	8002386 <TIM_Base_SetConfig+0x9a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <TIM_Base_SetConfig+0x130>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d108      	bne.n	8002398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <TIM_Base_SetConfig+0x114>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00f      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <TIM_Base_SetConfig+0x124>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a11      	ldr	r2, [pc, #68]	; (8002414 <TIM_Base_SetConfig+0x128>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0f      	ldr	r2, [pc, #60]	; (800241c <TIM_Base_SetConfig+0x130>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	615a      	str	r2, [r3, #20]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40013400 	.word	0x40013400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800

08002420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f023 030a 	bic.w	r3, r3, #10
 800245c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	621a      	str	r2, [r3, #32]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800247e:	b480      	push	{r7}
 8002480:	b087      	sub	sp, #28
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0210 	bic.w	r2, r3, #16
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	031b      	lsls	r3, r3, #12
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	621a      	str	r2, [r3, #32]
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f043 0307 	orr.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800252e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	021a      	lsls	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	431a      	orrs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	609a      	str	r2, [r3, #8]
}
 8002548:	bf00      	nop
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002568:	2302      	movs	r3, #2
 800256a:	e068      	b.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d108      	bne.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d018      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1b      	ldr	r2, [pc, #108]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10c      	bne.n	800262c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4313      	orrs	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40013400 	.word	0x40013400
 8002654:	40000400 	.word	0x40000400
 8002658:	40000800 	.word	0x40000800
 800265c:	40000c00 	.word	0x40000c00
 8002660:	40014000 	.word	0x40014000

08002664 <arm_sin_f32>:
 8002664:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80026e4 <arm_sin_f32+0x80>
 8002668:	ee20 0a27 	vmul.f32	s0, s0, s15
 800266c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002678:	d504      	bpl.n	8002684 <arm_sin_f32+0x20>
 800267a:	ee17 3a90 	vmov	r3, s15
 800267e:	3b01      	subs	r3, #1
 8002680:	ee07 3a90 	vmov	s15, r3
 8002684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002688:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80026e8 <arm_sin_f32+0x84>
 800268c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002690:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002694:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002698:	ee17 3a90 	vmov	r3, s15
 800269c:	b29b      	uxth	r3, r3
 800269e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a2:	d21a      	bcs.n	80026da <arm_sin_f32+0x76>
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	1c59      	adds	r1, r3, #1
 80026ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <arm_sin_f32+0x88>)
 80026b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80026b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80026bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80026c0:	ed93 7a00 	vldr	s14, [r3]
 80026c4:	edd2 6a00 	vldr	s13, [r2]
 80026c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80026cc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80026d8:	4770      	bx	lr
 80026da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80026de:	2101      	movs	r1, #1
 80026e0:	2300      	movs	r3, #0
 80026e2:	e7e6      	b.n	80026b2 <arm_sin_f32+0x4e>
 80026e4:	3e22f983 	.word	0x3e22f983
 80026e8:	44000000 	.word	0x44000000
 80026ec:	080027a0 	.word	0x080027a0

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	4e0d      	ldr	r6, [pc, #52]	; (8002728 <__libc_init_array+0x38>)
 80026f4:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f6:	1ba4      	subs	r4, r4, r6
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	2500      	movs	r5, #0
 80026fc:	42a5      	cmp	r5, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	4e0b      	ldr	r6, [pc, #44]	; (8002730 <__libc_init_array+0x40>)
 8002702:	4c0c      	ldr	r4, [pc, #48]	; (8002734 <__libc_init_array+0x44>)
 8002704:	f000 f820 	bl	8002748 <_init>
 8002708:	1ba4      	subs	r4, r4, r6
 800270a:	10a4      	asrs	r4, r4, #2
 800270c:	2500      	movs	r5, #0
 800270e:	42a5      	cmp	r5, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002718:	4798      	blx	r3
 800271a:	3501      	adds	r5, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002722:	4798      	blx	r3
 8002724:	3501      	adds	r5, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	08002fa4 	.word	0x08002fa4
 800272c:	08002fa4 	.word	0x08002fa4
 8002730:	08002fa4 	.word	0x08002fa4
 8002734:	08002fa8 	.word	0x08002fa8

08002738 <memset>:
 8002738:	4402      	add	r2, r0
 800273a:	4603      	mov	r3, r0
 800273c:	4293      	cmp	r3, r2
 800273e:	d100      	bne.n	8002742 <memset+0xa>
 8002740:	4770      	bx	lr
 8002742:	f803 1b01 	strb.w	r1, [r3], #1
 8002746:	e7f9      	b.n	800273c <memset+0x4>

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
