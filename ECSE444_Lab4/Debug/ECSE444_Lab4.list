
ECSE444_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000759c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007948  08007948  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007950  08007950  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007950  08007950  00017950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007954  08007954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08007958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001480  200000d0  08007a28  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001550  08007a28  00021550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f775  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d83  00000000  00000000  0003f875  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  000435f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00044fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e931  00000000  00000000  00046770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016508  00000000  00000000  000750a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001197a1  00000000  00000000  0008b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d08  00000000  00000000  001a4dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007744 	.word	0x08007744

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	08007744 	.word	0x08007744

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000ec 	.word	0x200000ec
 80005e0:	20000140 	.word	0x20000140

080005e4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2120      	movs	r1, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ffcd 	bl	8001594 <SENSOR_IO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f023 0304 	bic.w	r3, r3, #4
 8000604:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f023 0303 	bic.w	r3, r3, #3
 8000614:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000624:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000626:	88fb      	ldrh	r3, [r7, #6]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	7bfa      	ldrb	r2, [r7, #15]
 800062c:	2120      	movs	r1, #32
 800062e:	4618      	mov	r0, r3
 8000630:	f000 ff96 	bl	8001560 <SENSOR_IO_Write>
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000646:	2300      	movs	r3, #0
 8000648:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800064a:	f000 ff7f 	bl	800154c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	210f      	movs	r1, #15
 8000654:	4618      	mov	r0, r3
 8000656:	f000 ff9d 	bl	8001594 <SENSOR_IO_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	f107 020c 	add.w	r2, r7, #12
 800067a:	2302      	movs	r3, #2
 800067c:	21b0      	movs	r1, #176	; 0xb0
 800067e:	f000 ffa7 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	085b      	lsrs	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800068a:	7b7b      	ldrb	r3, [r7, #13]
 800068c:	085b      	lsrs	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	b2d8      	uxtb	r0, r3
 8000696:	f107 020c 	add.w	r2, r7, #12
 800069a:	2302      	movs	r3, #2
 800069c:	21b6      	movs	r1, #182	; 0xb6
 800069e:	f000 ff97 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006a2:	7b7b      	ldrb	r3, [r7, #13]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b21a      	sxth	r2, r3
 80006a8:	7b3b      	ldrb	r3, [r7, #12]
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	4313      	orrs	r3, r2
 80006ae:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	b2d8      	uxtb	r0, r3
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	2302      	movs	r3, #2
 80006ba:	21ba      	movs	r1, #186	; 0xba
 80006bc:	f000 ff88 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006c0:	7b7b      	ldrb	r3, [r7, #13]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	7b3b      	ldrb	r3, [r7, #12]
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	b2d8      	uxtb	r0, r3
 80006d2:	f107 020c 	add.w	r2, r7, #12
 80006d6:	2302      	movs	r3, #2
 80006d8:	21a8      	movs	r1, #168	; 0xa8
 80006da:	f000 ff79 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006de:	7b7b      	ldrb	r3, [r7, #13]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	7b3b      	ldrb	r3, [r7, #12]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	ee07 3a90 	vmov	s15, r3
 800070c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000710:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000714:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000718:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800072a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800073a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800073e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000742:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800074a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800074e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000752:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000798 <HTS221_H_ReadHumidity+0x130>
 8000756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	dd01      	ble.n	8000764 <HTS221_H_ReadHumidity+0xfc>
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HTS221_H_ReadHumidity+0x134>)
 8000762:	e00a      	b.n	800077a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000764:	edd7 7a04 	vldr	s15, [r7, #16]
 8000768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000770:	d502      	bpl.n	8000778 <HTS221_H_ReadHumidity+0x110>
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	e000      	b.n	800077a <HTS221_H_ReadHumidity+0x112>
 8000778:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800077a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800077c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000780:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000784:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000788:	eef0 7a66 	vmov.f32	s15, s13
}
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	447a0000 	.word	0x447a0000
 800079c:	447a0000 	.word	0x447a0000

080007a0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2120      	movs	r1, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 feee 	bl	8001594 <SENSOR_IO_Read>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f023 0304 	bic.w	r3, r3, #4
 80007c2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f023 0303 	bic.w	r3, r3, #3
 80007d2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007e2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	2120      	movs	r1, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 feb7 	bl	8001560 <SENSOR_IO_Write>
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b088      	sub	sp, #32
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	f107 0208 	add.w	r2, r7, #8
 800080c:	2302      	movs	r3, #2
 800080e:	21b2      	movs	r1, #178	; 0xb2
 8000810:	f000 fede 	bl	80015d0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2135      	movs	r1, #53	; 0x35
 800081a:	4618      	mov	r0, r3
 800081c:	f000 feba 	bl	8001594 <SENSOR_IO_Read>
 8000820:	4603      	mov	r3, r0
 8000822:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000824:	7ffb      	ldrb	r3, [r7, #31]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21b      	sxth	r3, r3
 800082a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800082e:	b21a      	sxth	r2, r3
 8000830:	7a3b      	ldrb	r3, [r7, #8]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000838:	7ffb      	ldrb	r3, [r7, #31]
 800083a:	019b      	lsls	r3, r3, #6
 800083c:	b21b      	sxth	r3, r3
 800083e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000842:	b21a      	sxth	r2, r3
 8000844:	7a7b      	ldrb	r3, [r7, #9]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800084c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000850:	10db      	asrs	r3, r3, #3
 8000852:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000854:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000858:	10db      	asrs	r3, r3, #3
 800085a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800085c:	88fb      	ldrh	r3, [r7, #6]
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	2304      	movs	r3, #4
 8000866:	21bc      	movs	r1, #188	; 0xbc
 8000868:	f000 feb2 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800086c:	7a7b      	ldrb	r3, [r7, #9]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	7a3b      	ldrb	r3, [r7, #8]
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800087a:	7afb      	ldrb	r3, [r7, #11]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	b21a      	sxth	r2, r3
 8000880:	7abb      	ldrb	r3, [r7, #10]
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	2302      	movs	r3, #2
 8000892:	21aa      	movs	r1, #170	; 0xaa
 8000894:	f000 fe9c 	bl	80015d0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000898:	7a7b      	ldrb	r3, [r7, #9]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	b21a      	sxth	r2, r3
 800089e:	7a3b      	ldrb	r3, [r7, #8]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80008a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80008aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	ee07 3a90 	vmov	s15, r3
 80008b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80008bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80008ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	ee07 3a90 	vmov	s15, r3
}
 80008fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f87b 	bl	8000a10 <LPS22HB_Init>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000930:	f000 fe0c 	bl	800154c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	210f      	movs	r1, #15
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fe2a 	bl	8001594 <SENSOR_IO_Read>
 8000940:	4603      	mov	r3, r0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	74fb      	strb	r3, [r7, #19]
 8000962:	e013      	b.n	800098c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	3328      	adds	r3, #40	; 0x28
 800096c:	b2db      	uxtb	r3, r3
 800096e:	7cfc      	ldrb	r4, [r7, #19]
 8000970:	4619      	mov	r1, r3
 8000972:	4610      	mov	r0, r2
 8000974:	f000 fe0e 	bl	8001594 <SENSOR_IO_Read>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4423      	add	r3, r4
 8000982:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8000986:	7cfb      	ldrb	r3, [r7, #19]
 8000988:	3301      	adds	r3, #1
 800098a:	74fb      	strb	r3, [r7, #19]
 800098c:	7cfb      	ldrb	r3, [r7, #19]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d9e8      	bls.n	8000964 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	74fb      	strb	r3, [r7, #19]
 8000996:	e010      	b.n	80009ba <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8000998:	7cfb      	ldrb	r3, [r7, #19]
 800099a:	f107 0218 	add.w	r2, r7, #24
 800099e:	4413      	add	r3, r2
 80009a0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009a4:	461a      	mov	r2, r3
 80009a6:	7cfb      	ldrb	r3, [r7, #19]
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	697a      	ldr	r2, [r7, #20]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	3301      	adds	r3, #1
 80009b8:	74fb      	strb	r3, [r7, #19]
 80009ba:	7cfb      	ldrb	r3, [r7, #19]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d9eb      	bls.n	8000998 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80009d0:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2264      	movs	r2, #100	; 0x64
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da01      	bge.n	80009e6 <LPS22HB_P_ReadPressure+0x96>
 80009e2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009e6:	131b      	asrs	r3, r3, #12
 80009e8:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	ee07 3a90 	vmov	s15, r3
 80009f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a0c <LPS22HB_P_ReadPressure+0xbc>
 80009f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a00:	eeb0 0a67 	vmov.f32	s0, s15
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	42c80000 	.word	0x42c80000

08000a10 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	211a      	movs	r1, #26
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fdb7 	bl	8001594 <SENSOR_IO_Read>
 8000a26:	4603      	mov	r3, r0
 8000a28:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	7bfa      	ldrb	r2, [r7, #15]
 8000a40:	211a      	movs	r1, #26
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fd8c 	bl	8001560 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fda0 	bl	8001594 <SENSOR_IO_Read>
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a5e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a66:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	f023 0302 	bic.w	r3, r3, #2
 8000a6e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	7bfa      	ldrb	r2, [r7, #15]
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fd6d 	bl	8001560 <SENSOR_IO_Write>
}  
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a9c:	2110      	movs	r1, #16
 8000a9e:	20d4      	movs	r0, #212	; 0xd4
 8000aa0:	f000 fd78 	bl	8001594 <SENSOR_IO_Read>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000ab4:	7bba      	ldrb	r2, [r7, #14]
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	20d4      	movs	r0, #212	; 0xd4
 8000ac4:	f000 fd4c 	bl	8001560 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000ac8:	2112      	movs	r1, #18
 8000aca:	20d4      	movs	r0, #212	; 0xd4
 8000acc:	f000 fd62 	bl	8001594 <SENSOR_IO_Read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000ae2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ae4:	7bba      	ldrb	r2, [r7, #14]
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	461a      	mov	r2, r3
 8000af0:	2112      	movs	r1, #18
 8000af2:	20d4      	movs	r0, #212	; 0xd4
 8000af4:	f000 fd34 	bl	8001560 <SENSOR_IO_Write>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	20d4      	movs	r0, #212	; 0xd4
 8000b0e:	f000 fd41 	bl	8001594 <SENSOR_IO_Read>
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	461a      	mov	r2, r3
 8000b22:	2110      	movs	r1, #16
 8000b24:	20d4      	movs	r0, #212	; 0xd4
 8000b26:	f000 fd1b 	bl	8001560 <SENSOR_IO_Write>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000b36:	f000 fd09 	bl	800154c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	20d4      	movs	r0, #212	; 0xd4
 8000b3e:	f000 fd29 	bl	8001594 <SENSOR_IO_Read>
 8000b42:	4603      	mov	r3, r0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000b56:	2115      	movs	r1, #21
 8000b58:	20d4      	movs	r0, #212	; 0xd4
 8000b5a:	f000 fd1b 	bl	8001594 <SENSOR_IO_Read>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f023 0310 	bic.w	r3, r3, #16
 8000b68:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	2115      	movs	r1, #21
 8000b7e:	20d4      	movs	r0, #212	; 0xd4
 8000b80:	f000 fcee 	bl	8001560 <SENSOR_IO_Write>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	20d4      	movs	r0, #212	; 0xd4
 8000ba6:	f000 fcf5 	bl	8001594 <SENSOR_IO_Read>
 8000baa:	4603      	mov	r3, r0
 8000bac:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000bae:	f107 0208 	add.w	r2, r7, #8
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	2128      	movs	r1, #40	; 0x28
 8000bb6:	20d4      	movs	r0, #212	; 0xd4
 8000bb8:	f000 fd0a 	bl	80015d0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	77fb      	strb	r3, [r7, #31]
 8000bc0:	e01f      	b.n	8000c02 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f107 0220 	add.w	r2, r7, #32
 8000bcc:	4413      	add	r3, r2
 8000bce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	f107 0120 	add.w	r1, r7, #32
 8000be0:	440b      	add	r3, r1
 8000be2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	b212      	sxth	r2, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	f107 0120 	add.w	r1, r7, #32
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	77fb      	strb	r3, [r7, #31]
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d9dc      	bls.n	8000bc2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b0c      	cmp	r3, #12
 8000c10:	d828      	bhi.n	8000c64 <LSM6DSL_AccReadXYZ+0xd8>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <LSM6DSL_AccReadXYZ+0x8c>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c4d 	.word	0x08000c4d
 8000c1c:	08000c65 	.word	0x08000c65
 8000c20:	08000c65 	.word	0x08000c65
 8000c24:	08000c65 	.word	0x08000c65
 8000c28:	08000c5f 	.word	0x08000c5f
 8000c2c:	08000c65 	.word	0x08000c65
 8000c30:	08000c65 	.word	0x08000c65
 8000c34:	08000c65 	.word	0x08000c65
 8000c38:	08000c53 	.word	0x08000c53
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	08000c65 	.word	0x08000c65
 8000c44:	08000c65 	.word	0x08000c65
 8000c48:	08000c59 	.word	0x08000c59
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <LSM6DSL_AccReadXYZ+0x124>)
 8000c4e:	61bb      	str	r3, [r7, #24]
    break;
 8000c50:	e008      	b.n	8000c64 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <LSM6DSL_AccReadXYZ+0x128>)
 8000c54:	61bb      	str	r3, [r7, #24]
    break;
 8000c56:	e005      	b.n	8000c64 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <LSM6DSL_AccReadXYZ+0x12c>)
 8000c5a:	61bb      	str	r3, [r7, #24]
    break;
 8000c5c:	e002      	b.n	8000c64 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <LSM6DSL_AccReadXYZ+0x130>)
 8000c60:	61bb      	str	r3, [r7, #24]
    break;    
 8000c62:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	77fb      	strb	r3, [r7, #31]
 8000c68:	e01b      	b.n	8000ca2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	f107 0220 	add.w	r2, r7, #32
 8000c72:	4413      	add	r3, r2
 8000c74:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	4413      	add	r3, r2
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 2a90 	vmov	r2, s15
 8000c98:	b212      	sxth	r2, r2
 8000c9a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c9c:	7ffb      	ldrb	r3, [r7, #31]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	77fb      	strb	r3, [r7, #31]
 8000ca2:	7ffb      	ldrb	r3, [r7, #31]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d9e0      	bls.n	8000c6a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	3d79db23 	.word	0x3d79db23
 8000cb4:	3df9db23 	.word	0x3df9db23
 8000cb8:	3e79db23 	.word	0x3e79db23
 8000cbc:	3ef9db23 	.word	0x3ef9db23

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b096      	sub	sp, #88	; 0x58
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 ff64 	bl	8001b92 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_HSENSOR_Init();
 8000cca:	f000 fcf5 	bl	80016b8 <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000cce:	f000 fd4f 	bl	8001770 <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 8000cd2:	f000 fc9b 	bl	800160c <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8000cd6:	f000 fd1d 	bl	8001714 <BSP_PSENSOR_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f84d 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f000 f951 	bl	8000f84 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ce2:	f000 f8c3 	bl	8000e6c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000ce6:	f000 f901 	bl	8000eec <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of checkButton */
  osThreadDef(checkButton, ButtonPressedTask, osPriorityNormal, 0, 128);
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <main+0xa0>)
 8000cec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000cf0:	461d      	mov	r5, r3
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkButtonHandle = osThreadCreate(osThread(checkButton), NULL);
 8000cfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f004 fede 	bl	8005ac6 <osThreadCreate>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <main+0xa4>)
 8000d0e:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmitData */
  osThreadDef(transmitData, TransmitDataTask, osPriorityIdle, 0, 128);
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <main+0xa8>)
 8000d12:	f107 0420 	add.w	r4, r7, #32
 8000d16:	461d      	mov	r5, r3
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDataHandle = osThreadCreate(osThread(transmitData), NULL);
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fecb 	bl	8005ac6 <osThreadCreate>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <main+0xac>)
 8000d34:	601a      	str	r2, [r3, #0]

  /* definition and creation of readSensorData */
  osThreadDef(readSensorData, ReadSensorDataTask, osPriorityIdle, 0, 128);
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <main+0xb0>)
 8000d38:	1d3c      	adds	r4, r7, #4
 8000d3a:	461d      	mov	r5, r3
 8000d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorDataHandle = osThreadCreate(osThread(readSensorData), NULL);
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f004 feba 	bl	8005ac6 <osThreadCreate>
 8000d52:	4602      	mov	r2, r0
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <main+0xb4>)
 8000d56:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d58:	f004 feae 	bl	8005ab8 <osKernelStart>
  tValue = BSP_TSENSOR_ReadTemp();
  psensor = BSP_PSENSOR_ReadPressure();
  BSP_ACCELERO_AccGetXYZ(accelero);
#endif

  while (1){
 8000d5c:	e7fe      	b.n	8000d5c <main+0x9c>
 8000d5e:	bf00      	nop
 8000d60:	08007768 	.word	0x08007768
 8000d64:	200012e0 	.word	0x200012e0
 8000d68:	08007794 	.word	0x08007794
 8000d6c:	200012dc 	.word	0x200012dc
 8000d70:	080077c0 	.word	0x080077c0
 8000d74:	20001420 	.word	0x20001420

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0bc      	sub	sp, #240	; 0xf0
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d82:	2244      	movs	r2, #68	; 0x44
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 f8d7 	bl	8006f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2294      	movs	r2, #148	; 0x94
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f8c9 	bl	8006f3a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000da8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dac:	f002 f8a4 	bl	8002ef8 <HAL_PWREx_ControlVoltageScaling>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000db6:	f000 fad5 	bl	8001364 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dcc:	2360      	movs	r3, #96	; 0x60
 8000dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000de4:	2328      	movs	r3, #40	; 0x28
 8000de6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 f91d 	bl	8003040 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e0c:	f000 faaa 	bl	8001364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	230f      	movs	r3, #15
 8000e12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2303      	movs	r3, #3
 8000e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e32:	2103      	movs	r1, #3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 fd29 	bl	800388c <HAL_RCC_ClockConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e40:	f000 fa90 	bl	8001364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000e44:	2381      	movs	r3, #129	; 0x81
 8000e46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fffc 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e5e:	f000 fa81 	bl	8001364 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	37f0      	adds	r7, #240	; 0xf0
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C2_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <MX_I2C2_Init+0x7c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e88:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ea8:	f001 fa65 	bl	8002376 <HAL_I2C_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eb2:	f000 fa57 	bl	8001364 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000eba:	f001 ff65 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec4:	f000 fa4e 	bl	8001364 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_I2C2_Init+0x74>)
 8000ecc:	f001 ffa7 	bl	8002e1e <HAL_I2CEx_ConfigDigitalFilter>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 fa45 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200010c8 	.word	0x200010c8
 8000ee4:	40005800 	.word	0x40005800
 8000ee8:	10909cec 	.word	0x10909cec

08000eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <MX_USART1_UART_Init+0x94>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f36:	f003 ff65 	bl	8004e04 <HAL_UART_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f40:	f000 fa10 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f44:	2100      	movs	r1, #0
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f48:	f004 fcb9 	bl	80058be <HAL_UARTEx_SetTxFifoThreshold>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f52:	f000 fa07 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f56:	2100      	movs	r1, #0
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f5a:	f004 fcee 	bl	800593a <HAL_UARTEx_SetRxFifoThreshold>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f64:	f000 f9fe 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_USART1_UART_Init+0x90>)
 8000f6a:	f004 fc6f 	bl	800584c <HAL_UARTEx_DisableFifoMode>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f74:	f000 f9f6 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20001250 	.word	0x20001250
 8000f80:	40013800 	.word	0x40013800

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a22      	ldr	r2, [pc, #136]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_GPIO_Init+0xa4>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <MX_GPIO_Init+0xa8>)
 8000fd2:	f001 f995 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_GPIO_Init+0xac>)
 8000fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0xb0>)
 8000fec:	f000 feec 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ff0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <MX_GPIO_Init+0xa8>)
 800100a:	f000 fedd 	bl	8001dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2028      	movs	r0, #40	; 0x28
 8001014:	f000 feae 	bl	8001d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f000 fec7 	bl	8001dac <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	48000400 	.word	0x48000400
 8001030:	10110000 	.word	0x10110000
 8001034:	48000800 	.word	0x48000800

08001038 <ButtonPressedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void ButtonPressedTask(void const * argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(OSDELAY);
 8001040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001044:	f004 fd8b 	bl	8005b5e <osDelay>
    //Check if button pressed and increment state
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <ButtonPressedTask+0x60>)
 800104e:	f001 f93f 	bl	80022d0 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f3      	bne.n	8001040 <ButtonPressedTask+0x8>
    	state = (state+1)%4;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <ButtonPressedTask+0x64>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	425a      	negs	r2, r3
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	f002 0203 	and.w	r2, r2, #3
 8001068:	bf58      	it	pl
 800106a:	4253      	negpl	r3, r2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <ButtonPressedTask+0x64>)
 8001070:	701a      	strb	r2, [r3, #0]
    	sprintf(msgBuff, "----- Button Pressed! Now in State: %d ------ \r", state);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <ButtonPressedTask+0x64>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4909      	ldr	r1, [pc, #36]	; (80010a0 <ButtonPressedTask+0x68>)
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <ButtonPressedTask+0x6c>)
 800107c:	f005 ff66 	bl	8006f4c <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*)msgBuff, strlen(msgBuff), HAL_UART_TIMEOUT_VALUE);
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <ButtonPressedTask+0x6c>)
 8001082:	f7ff f8bd 	bl	8000200 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800108e:	4905      	ldr	r1, [pc, #20]	; (80010a4 <ButtonPressedTask+0x6c>)
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <ButtonPressedTask+0x70>)
 8001092:	f003 ff07 	bl	8004ea4 <HAL_UART_Transmit>
    osDelay(OSDELAY);
 8001096:	e7d3      	b.n	8001040 <ButtonPressedTask+0x8>
 8001098:	48000800 	.word	0x48000800
 800109c:	20000340 	.word	0x20000340
 80010a0:	080077dc 	.word	0x080077dc
 80010a4:	20001348 	.word	0x20001348
 80010a8:	20001250 	.word	0x20001250

080010ac <TransmitDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void TransmitDataTask(void const * argument)
{
 80010ac:	b5b0      	push	{r4, r5, r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	{
		osDelay(OSDELAY2);
 80010b4:	20fa      	movs	r0, #250	; 0xfa
 80010b6:	f004 fd52 	bl	8005b5e <osDelay>
		if(state == 0){
 80010ba:	4b48      	ldr	r3, [pc, #288]	; (80011dc <TransmitDataTask+0x130>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d120      	bne.n	8001104 <TransmitDataTask+0x58>
			hValue = BSP_HSENSOR_ReadHumidity();
 80010c2:	f000 fb19 	bl	80016f8 <BSP_HSENSOR_ReadHumidity>
 80010c6:	eef0 7a40 	vmov.f32	s15, s0
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <TransmitDataTask+0x134>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msgBuff2, "\n Transmitting...\r");
 80010d0:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <TransmitDataTask+0x138>)
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <TransmitDataTask+0x13c>)
 80010d4:	4615      	mov	r5, r2
 80010d6:	461c      	mov	r4, r3
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	6028      	str	r0, [r5, #0]
 80010dc:	6069      	str	r1, [r5, #4]
 80010de:	60aa      	str	r2, [r5, #8]
 80010e0:	60eb      	str	r3, [r5, #12]
 80010e2:	8823      	ldrh	r3, [r4, #0]
 80010e4:	78a2      	ldrb	r2, [r4, #2]
 80010e6:	822b      	strh	r3, [r5, #16]
 80010e8:	4613      	mov	r3, r2
 80010ea:	74ab      	strb	r3, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*)msgBuff2, strlen(msgBuff2), HAL_UART_TIMEOUT_VALUE);
 80010ec:	483d      	ldr	r0, [pc, #244]	; (80011e4 <TransmitDataTask+0x138>)
 80010ee:	f7ff f887 	bl	8000200 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80010fa:	493a      	ldr	r1, [pc, #232]	; (80011e4 <TransmitDataTask+0x138>)
 80010fc:	483b      	ldr	r0, [pc, #236]	; (80011ec <TransmitDataTask+0x140>)
 80010fe:	f003 fed1 	bl	8004ea4 <HAL_UART_Transmit>
 8001102:	e7d7      	b.n	80010b4 <TransmitDataTask+0x8>
		}
		else if(state == 1){
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <TransmitDataTask+0x130>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d120      	bne.n	800114e <TransmitDataTask+0xa2>
			tValue = BSP_TSENSOR_ReadTemp();
 800110c:	f000 fb4c 	bl	80017a8 <BSP_TSENSOR_ReadTemp>
 8001110:	eef0 7a40 	vmov.f32	s15, s0
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <TransmitDataTask+0x144>)
 8001116:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msgBuff2, "\n Transmitting...\r");
 800111a:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <TransmitDataTask+0x138>)
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <TransmitDataTask+0x13c>)
 800111e:	4615      	mov	r5, r2
 8001120:	461c      	mov	r4, r3
 8001122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001124:	6028      	str	r0, [r5, #0]
 8001126:	6069      	str	r1, [r5, #4]
 8001128:	60aa      	str	r2, [r5, #8]
 800112a:	60eb      	str	r3, [r5, #12]
 800112c:	8823      	ldrh	r3, [r4, #0]
 800112e:	78a2      	ldrb	r2, [r4, #2]
 8001130:	822b      	strh	r3, [r5, #16]
 8001132:	4613      	mov	r3, r2
 8001134:	74ab      	strb	r3, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*)msgBuff2, strlen(msgBuff2), HAL_UART_TIMEOUT_VALUE);
 8001136:	482b      	ldr	r0, [pc, #172]	; (80011e4 <TransmitDataTask+0x138>)
 8001138:	f7ff f862 	bl	8000200 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001144:	4927      	ldr	r1, [pc, #156]	; (80011e4 <TransmitDataTask+0x138>)
 8001146:	4829      	ldr	r0, [pc, #164]	; (80011ec <TransmitDataTask+0x140>)
 8001148:	f003 feac 	bl	8004ea4 <HAL_UART_Transmit>
 800114c:	e7b2      	b.n	80010b4 <TransmitDataTask+0x8>

		}
		else if(state == 2){
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <TransmitDataTask+0x130>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d11c      	bne.n	8001190 <TransmitDataTask+0xe4>
			BSP_ACCELERO_AccGetXYZ(accelero);
 8001156:	4827      	ldr	r0, [pc, #156]	; (80011f4 <TransmitDataTask+0x148>)
 8001158:	f000 fa96 	bl	8001688 <BSP_ACCELERO_AccGetXYZ>
			sprintf(msgBuff2, "\n Transmitting...\r");
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <TransmitDataTask+0x138>)
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <TransmitDataTask+0x13c>)
 8001160:	4615      	mov	r5, r2
 8001162:	461c      	mov	r4, r3
 8001164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001166:	6028      	str	r0, [r5, #0]
 8001168:	6069      	str	r1, [r5, #4]
 800116a:	60aa      	str	r2, [r5, #8]
 800116c:	60eb      	str	r3, [r5, #12]
 800116e:	8823      	ldrh	r3, [r4, #0]
 8001170:	78a2      	ldrb	r2, [r4, #2]
 8001172:	822b      	strh	r3, [r5, #16]
 8001174:	4613      	mov	r3, r2
 8001176:	74ab      	strb	r3, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*)msgBuff2, strlen(msgBuff2), HAL_UART_TIMEOUT_VALUE);
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <TransmitDataTask+0x138>)
 800117a:	f7ff f841 	bl	8000200 <strlen>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001186:	4917      	ldr	r1, [pc, #92]	; (80011e4 <TransmitDataTask+0x138>)
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <TransmitDataTask+0x140>)
 800118a:	f003 fe8b 	bl	8004ea4 <HAL_UART_Transmit>
 800118e:	e791      	b.n	80010b4 <TransmitDataTask+0x8>

		}
		else if(state == 3){
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <TransmitDataTask+0x130>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d18d      	bne.n	80010b4 <TransmitDataTask+0x8>
			psensor = BSP_PSENSOR_ReadPressure();
 8001198:	f000 fadc 	bl	8001754 <BSP_PSENSOR_ReadPressure>
 800119c:	eef0 7a40 	vmov.f32	s15, s0
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <TransmitDataTask+0x14c>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
			sprintf(msgBuff2, "\n Transmitting...\r");
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <TransmitDataTask+0x138>)
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <TransmitDataTask+0x13c>)
 80011aa:	4615      	mov	r5, r2
 80011ac:	461c      	mov	r4, r3
 80011ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b0:	6028      	str	r0, [r5, #0]
 80011b2:	6069      	str	r1, [r5, #4]
 80011b4:	60aa      	str	r2, [r5, #8]
 80011b6:	60eb      	str	r3, [r5, #12]
 80011b8:	8823      	ldrh	r3, [r4, #0]
 80011ba:	78a2      	ldrb	r2, [r4, #2]
 80011bc:	822b      	strh	r3, [r5, #16]
 80011be:	4613      	mov	r3, r2
 80011c0:	74ab      	strb	r3, [r5, #18]
			HAL_UART_Transmit(&huart1, (uint8_t*)msgBuff2, strlen(msgBuff2), HAL_UART_TIMEOUT_VALUE);
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <TransmitDataTask+0x138>)
 80011c4:	f7ff f81c 	bl	8000200 <strlen>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80011d0:	4904      	ldr	r1, [pc, #16]	; (80011e4 <TransmitDataTask+0x138>)
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <TransmitDataTask+0x140>)
 80011d4:	f003 fe66 	bl	8004ea4 <HAL_UART_Transmit>
		osDelay(OSDELAY2);
 80011d8:	e76c      	b.n	80010b4 <TransmitDataTask+0x8>
 80011da:	bf00      	nop
 80011dc:	20000340 	.word	0x20000340
 80011e0:	200013ac 	.word	0x200013ac
 80011e4:	200013b0 	.word	0x200013b0
 80011e8:	0800780c 	.word	0x0800780c
 80011ec:	20001250 	.word	0x20001250
 80011f0:	20001240 	.word	0x20001240
 80011f4:	20001418 	.word	0x20001418
 80011f8:	20001414 	.word	0x20001414

080011fc <ReadSensorDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void ReadSensorDataTask(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(OSDELAY2);
 8001204:	20fa      	movs	r0, #250	; 0xfa
 8001206:	f004 fcaa 	bl	8005b5e <osDelay>
	if(state%4 == 0){
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <ReadSensorDataTask+0x10c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d116      	bne.n	8001246 <ReadSensorDataTask+0x4a>
		sprintf(hSensor_buffer, "\n Humidity Value: %d\r", (int)hValue);
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <ReadSensorDataTask+0x110>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001222:	ee17 2a90 	vmov	r2, s15
 8001226:	493a      	ldr	r1, [pc, #232]	; (8001310 <ReadSensorDataTask+0x114>)
 8001228:	483a      	ldr	r0, [pc, #232]	; (8001314 <ReadSensorDataTask+0x118>)
 800122a:	f005 fe8f 	bl	8006f4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)hSensor_buffer, strlen(hSensor_buffer), HAL_UART_TIMEOUT_VALUE);
 800122e:	4839      	ldr	r0, [pc, #228]	; (8001314 <ReadSensorDataTask+0x118>)
 8001230:	f7fe ffe6 	bl	8000200 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <ReadSensorDataTask+0x118>)
 800123e:	4836      	ldr	r0, [pc, #216]	; (8001318 <ReadSensorDataTask+0x11c>)
 8001240:	f003 fe30 	bl	8004ea4 <HAL_UART_Transmit>
 8001244:	e7de      	b.n	8001204 <ReadSensorDataTask+0x8>
	}
	else if(state%4 == 1){
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <ReadSensorDataTask+0x10c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d116      	bne.n	8001282 <ReadSensorDataTask+0x86>
		sprintf(tSensor_buffer, "\n Temperature Value: %d C\r", (int)tValue);
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <ReadSensorDataTask+0x120>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125e:	ee17 2a90 	vmov	r2, s15
 8001262:	492f      	ldr	r1, [pc, #188]	; (8001320 <ReadSensorDataTask+0x124>)
 8001264:	482f      	ldr	r0, [pc, #188]	; (8001324 <ReadSensorDataTask+0x128>)
 8001266:	f005 fe71 	bl	8006f4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tSensor_buffer, strlen(tSensor_buffer), HAL_UART_TIMEOUT_VALUE);
 800126a:	482e      	ldr	r0, [pc, #184]	; (8001324 <ReadSensorDataTask+0x128>)
 800126c:	f7fe ffc8 	bl	8000200 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001278:	492a      	ldr	r1, [pc, #168]	; (8001324 <ReadSensorDataTask+0x128>)
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <ReadSensorDataTask+0x11c>)
 800127c:	f003 fe12 	bl	8004ea4 <HAL_UART_Transmit>
 8001280:	e7c0      	b.n	8001204 <ReadSensorDataTask+0x8>
	}
	else if(state%4 == 2){
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <ReadSensorDataTask+0x10c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d11c      	bne.n	80012ca <ReadSensorDataTask+0xce>
		sprintf(accelero_buffer, "\n Accelerometer Values: X: %d Y: %d Z: %d\r", accelero[0], accelero[1], accelero[2]);
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <ReadSensorDataTask+0x12c>)
 8001292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001296:	461a      	mov	r2, r3
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <ReadSensorDataTask+0x12c>)
 800129a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800129e:	4619      	mov	r1, r3
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <ReadSensorDataTask+0x12c>)
 80012a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	4920      	ldr	r1, [pc, #128]	; (800132c <ReadSensorDataTask+0x130>)
 80012ac:	4820      	ldr	r0, [pc, #128]	; (8001330 <ReadSensorDataTask+0x134>)
 80012ae:	f005 fe4d 	bl	8006f4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelero_buffer, strlen(accelero_buffer), HAL_UART_TIMEOUT_VALUE);
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <ReadSensorDataTask+0x134>)
 80012b4:	f7fe ffa4 	bl	8000200 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012c0:	491b      	ldr	r1, [pc, #108]	; (8001330 <ReadSensorDataTask+0x134>)
 80012c2:	4815      	ldr	r0, [pc, #84]	; (8001318 <ReadSensorDataTask+0x11c>)
 80012c4:	f003 fdee 	bl	8004ea4 <HAL_UART_Transmit>
 80012c8:	e79c      	b.n	8001204 <ReadSensorDataTask+0x8>
	}
	else if(state%4 == 3){
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <ReadSensorDataTask+0x10c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d195      	bne.n	8001204 <ReadSensorDataTask+0x8>
		sprintf(pressure_buff, "\n Pressure Value: %d Pa\r", (int)psensor);
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <ReadSensorDataTask+0x138>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e2:	ee17 2a90 	vmov	r2, s15
 80012e6:	4914      	ldr	r1, [pc, #80]	; (8001338 <ReadSensorDataTask+0x13c>)
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <ReadSensorDataTask+0x140>)
 80012ea:	f005 fe2f 	bl	8006f4c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pressure_buff, strlen(pressure_buff), HAL_UART_TIMEOUT_VALUE);
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <ReadSensorDataTask+0x140>)
 80012f0:	f7fe ff86 	bl	8000200 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012fc:	490f      	ldr	r1, [pc, #60]	; (800133c <ReadSensorDataTask+0x140>)
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <ReadSensorDataTask+0x11c>)
 8001300:	f003 fdd0 	bl	8004ea4 <HAL_UART_Transmit>
    osDelay(OSDELAY2);
 8001304:	e77e      	b.n	8001204 <ReadSensorDataTask+0x8>
 8001306:	bf00      	nop
 8001308:	20000340 	.word	0x20000340
 800130c:	200013ac 	.word	0x200013ac
 8001310:	08007820 	.word	0x08007820
 8001314:	20001178 	.word	0x20001178
 8001318:	20001250 	.word	0x20001250
 800131c:	20001240 	.word	0x20001240
 8001320:	08007838 	.word	0x08007838
 8001324:	200011dc 	.word	0x200011dc
 8001328:	20001418 	.word	0x20001418
 800132c:	08007854 	.word	0x08007854
 8001330:	20001114 	.word	0x20001114
 8001334:	20001414 	.word	0x20001414
 8001338:	08007880 	.word	0x08007880
 800133c:	200012e4 	.word	0x200012e4

08001340 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001352:	f000 fc37 	bl	8001bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40001000 	.word	0x40001000

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136a:	e7fe      	b.n	800136a <Error_Handler+0x6>

0800136c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <I2Cx_MspInit+0xa8>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <I2Cx_MspInit+0xa8>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <I2Cx_MspInit+0xa8>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800138c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001390:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800139e:	2304      	movs	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	481b      	ldr	r0, [pc, #108]	; (8001418 <I2Cx_MspInit+0xac>)
 80013aa:	f000 fd0d 	bl	8001dc8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4818      	ldr	r0, [pc, #96]	; (8001418 <I2Cx_MspInit+0xac>)
 80013b6:	f000 fd07 	bl	8001dc8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <I2Cx_MspInit+0xa8>)
 80013e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	210f      	movs	r1, #15
 80013ee:	2021      	movs	r0, #33	; 0x21
 80013f0:	f000 fcc0 	bl	8001d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80013f4:	2021      	movs	r0, #33	; 0x21
 80013f6:	f000 fcd9 	bl	8001dac <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	2022      	movs	r0, #34	; 0x22
 8001400:	f000 fcb8 	bl	8001d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001404:	2022      	movs	r0, #34	; 0x22
 8001406:	f000 fcd1 	bl	8001dac <HAL_NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	48000400 	.word	0x48000400

0800141c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <I2Cx_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <I2Cx_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff89 	bl	800136c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 ff8b 	bl	8002376 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001460:	2100      	movs	r1, #0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f001 fc90 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40005800 	.word	0x40005800
 8001474:	00702681 	.word	0x00702681

08001478 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af04      	add	r7, sp, #16
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4603      	mov	r3, r0
 8001488:	72fb      	strb	r3, [r7, #11]
 800148a:	460b      	mov	r3, r1
 800148c:	813b      	strh	r3, [r7, #8]
 800148e:	4613      	mov	r3, r2
 8001490:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	b299      	uxth	r1, r3
 800149a:	88f8      	ldrh	r0, [r7, #6]
 800149c:	893a      	ldrh	r2, [r7, #8]
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	4603      	mov	r3, r0
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f001 f934 	bl	800271c <HAL_I2C_Mem_Read>
 80014b4:	4603      	mov	r3, r0
 80014b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	4619      	mov	r1, r3
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 f832 	bl	800152c <I2Cx_Error>
  }
  return status;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b08a      	sub	sp, #40	; 0x28
 80014d6:	af04      	add	r7, sp, #16
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	4608      	mov	r0, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	72fb      	strb	r3, [r7, #11]
 80014e4:	460b      	mov	r3, r1
 80014e6:	813b      	strh	r3, [r7, #8]
 80014e8:	4613      	mov	r3, r2
 80014ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80014f0:	7afb      	ldrb	r3, [r7, #11]
 80014f2:	b299      	uxth	r1, r3
 80014f4:	88f8      	ldrh	r0, [r7, #6]
 80014f6:	893a      	ldrh	r2, [r7, #8]
 80014f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4603      	mov	r3, r0
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fff3 	bl	80024f4 <HAL_I2C_Mem_Write>
 800150e:	4603      	mov	r3, r0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001518:	7afb      	ldrb	r3, [r7, #11]
 800151a:	4619      	mov	r1, r3
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f805 	bl	800152c <I2Cx_Error>
  }
  return status;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 ffab 	bl	8002494 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff6c 	bl	800141c <I2Cx_Init>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <SENSOR_IO_Init+0x10>)
 8001552:	f7ff ff63 	bl	800141c <I2Cx_Init>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200014b0 	.word	0x200014b0

08001560 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	b29a      	uxth	r2, r3
 8001576:	79f9      	ldrb	r1, [r7, #7]
 8001578:	2301      	movs	r3, #1
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	1d7b      	adds	r3, r7, #5
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <SENSOR_IO_Write+0x30>)
 8001584:	f7ff ffa5 	bl	80014d2 <I2Cx_WriteMultiple>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200014b0 	.word	0x200014b0

08001594 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	79f9      	ldrb	r1, [r7, #7]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	f107 030f 	add.w	r3, r7, #15
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2301      	movs	r3, #1
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <SENSOR_IO_Read+0x38>)
 80015bc:	f7ff ff5c 	bl	8001478 <I2Cx_ReadMultiple>

  return read_value;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200014b0 	.word	0x200014b0

080015d0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	603a      	str	r2, [r7, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	460b      	mov	r3, r1
 80015e0:	71bb      	strb	r3, [r7, #6]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	79f9      	ldrb	r1, [r7, #7]
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <SENSOR_IO_ReadMultiple+0x38>)
 80015f8:	f7ff ff3e 	bl	8001478 <I2Cx_ReadMultiple>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29b      	uxth	r3, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200014b0 	.word	0x200014b0

0800160c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001616:	2300      	movs	r3, #0
 8001618:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <BSP_ACCELERO_Init+0x74>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	4798      	blx	r3
 8001620:	4603      	mov	r3, r0
 8001622:	2b6a      	cmp	r3, #106	; 0x6a
 8001624:	d002      	beq.n	800162c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e024      	b.n	8001676 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <BSP_ACCELERO_Init+0x78>)
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <BSP_ACCELERO_Init+0x74>)
 8001630:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001632:	2330      	movs	r3, #48	; 0x30
 8001634:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800163a:	2300      	movs	r3, #0
 800163c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800163e:	2340      	movs	r3, #64	; 0x40
 8001640:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800164a:	797a      	ldrb	r2, [r7, #5]
 800164c:	7abb      	ldrb	r3, [r7, #10]
 800164e:	4313      	orrs	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001654:	7a3b      	ldrb	r3, [r7, #8]
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	b21b      	sxth	r3, r3
 8001668:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <BSP_ACCELERO_Init+0x78>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	89ba      	ldrh	r2, [r7, #12]
 8001672:	4610      	mov	r0, r2
 8001674:	4798      	blx	r3
  }  

  return ret;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000028 	.word	0x20000028
 8001684:	20000344 	.word	0x20000344

08001688 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d009      	beq.n	80016ac <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000344 	.word	0x20000344

080016b8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <BSP_HSENSOR_Init+0x38>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	20be      	movs	r0, #190	; 0xbe
 80016c4:	4798      	blx	r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	2bbc      	cmp	r3, #188	; 0xbc
 80016ca:	d002      	beq.n	80016d2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	e009      	b.n	80016e6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <BSP_HSENSOR_Init+0x3c>)
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <BSP_HSENSOR_Init+0x38>)
 80016d6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <BSP_HSENSOR_Init+0x3c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	20be      	movs	r0, #190	; 0xbe
 80016e0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80016e6:	687b      	ldr	r3, [r7, #4]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000348 	.word	0x20000348

080016f8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <BSP_HSENSOR_ReadHumidity+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	20be      	movs	r0, #190	; 0xbe
 8001704:	4798      	blx	r3
 8001706:	eef0 7a40 	vmov.f32	s15, s0
}
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000348 	.word	0x20000348

08001714 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <BSP_PSENSOR_Init+0x38>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	20ba      	movs	r0, #186	; 0xba
 8001720:	4798      	blx	r3
 8001722:	4603      	mov	r3, r0
 8001724:	2bb1      	cmp	r3, #177	; 0xb1
 8001726:	d002      	beq.n	800172e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	e009      	b.n	8001742 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <BSP_PSENSOR_Init+0x3c>)
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <BSP_PSENSOR_Init+0x38>)
 8001732:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <BSP_PSENSOR_Init+0x3c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	20ba      	movs	r0, #186	; 0xba
 800173c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001742:	687b      	ldr	r3, [r7, #4]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000001c 	.word	0x2000001c
 8001750:	2000034c 	.word	0x2000034c

08001754 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <BSP_PSENSOR_ReadPressure+0x18>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	20ba      	movs	r0, #186	; 0xba
 8001760:	4798      	blx	r3
 8001762:	eef0 7a40 	vmov.f32	s15, s0
}
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000034c 	.word	0x2000034c

08001770 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <BSP_TSENSOR_Init+0x30>)
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <BSP_TSENSOR_Init+0x34>)
 800177e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001780:	f7ff fee4 	bl	800154c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <BSP_TSENSOR_Init+0x30>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2100      	movs	r1, #0
 800178c:	20be      	movs	r0, #190	; 0xbe
 800178e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000350 	.word	0x20000350
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <BSP_TSENSOR_ReadTemp+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	20be      	movs	r0, #190	; 0xbe
 80017b4:	4798      	blx	r3
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
}
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000350 	.word	0x20000350

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_MspInit+0x4c>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_MspInit+0x4c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6613      	str	r3, [r2, #96]	; 0x60
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_MspInit+0x4c>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_MspInit+0x4c>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_MspInit+0x4c>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	210f      	movs	r1, #15
 80017fe:	f06f 0001 	mvn.w	r0, #1
 8001802:	f000 fab7 	bl	8001d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_I2C_MspInit+0x7c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d128      	bne.n	8001888 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_I2C_MspInit+0x80>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800184e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001854:	2312      	movs	r3, #18
 8001856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001858:	2301      	movs	r3, #1
 800185a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001860:	2304      	movs	r3, #4
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_I2C_MspInit+0x84>)
 800186c:	f000 faac 	bl	8001dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_I2C_MspInit+0x80>)
 8001876:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800187a:	6593      	str	r3, [r2, #88]	; 0x58
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_I2C_MspInit+0x80>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40005800 	.word	0x40005800
 8001894:	40021000 	.word	0x40021000
 8001898:	48000400 	.word	0x48000400

0800189c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_I2C_MspDeInit+0x3c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d10f      	bne.n	80018ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_I2C_MspDeInit+0x40>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_I2C_MspDeInit+0x40>)
 80018b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80018ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <HAL_I2C_MspDeInit+0x44>)
 80018c0:	f000 fc14 	bl	80020ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80018c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_I2C_MspDeInit+0x44>)
 80018ca:	f000 fc0f 	bl	80020ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40005800 	.word	0x40005800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400

080018e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x7c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d127      	bne.n	8001956 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_UART_MspInit+0x80>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a10      	ldr	r2, [pc, #64]	; (8001964 <HAL_UART_MspInit+0x80>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_UART_MspInit+0x80>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001936:	23c0      	movs	r3, #192	; 0xc0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001946:	2307      	movs	r3, #7
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <HAL_UART_MspInit+0x84>)
 8001952:	f000 fa39 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40013800 	.word	0x40013800
 8001964:	40021000 	.word	0x40021000
 8001968:	48000400 	.word	0x48000400

0800196c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	2036      	movs	r0, #54	; 0x36
 8001982:	f000 f9f7 	bl	8001d74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001986:	2036      	movs	r0, #54	; 0x36
 8001988:	f000 fa10 	bl	8001dac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_InitTick+0x9c>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_InitTick+0x9c>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_InitTick+0x9c>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a4:	f107 0210 	add.w	r2, r7, #16
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f95a 	bl	8003c68 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019b4:	f002 f92c 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 80019b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_InitTick+0xa0>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	3b01      	subs	r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_InitTick+0xa4>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <HAL_InitTick+0xa8>)
 80019cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_InitTick+0xa4>)
 80019d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019d6:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_InitTick+0xa4>)
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_InitTick+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_InitTick+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <HAL_InitTick+0xa4>)
 80019ea:	f002 ff39 	bl	8004860 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d104      	bne.n	80019fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <HAL_InitTick+0xa4>)
 80019f6:	f002 ff95 	bl	8004924 <HAL_TIM_Base_Start_IT>
 80019fa:	4603      	mov	r3, r0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	431bde83 	.word	0x431bde83
 8001a10:	200014fc 	.word	0x200014fc
 8001a14:	40001000 	.word	0x40001000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a4c:	f000 fc70 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM6_DAC_IRQHandler+0x10>)
 8001a5a:	f002 ffd3 	bl	8004a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200014fc 	.word	0x200014fc

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f005 fa1a 	bl	8006ed0 <__errno>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200a0000 	.word	0x200a0000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000354 	.word	0x20000354
 8001ad0:	20001550 	.word	0x20001550

08001ad4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <SystemInit+0x64>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <SystemInit+0x64>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <SystemInit+0x68>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <SystemInit+0x68>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <SystemInit+0x68>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <SystemInit+0x68>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <SystemInit+0x68>)
 8001b00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <SystemInit+0x68>)
 8001b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <SystemInit+0x68>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <SystemInit+0x68>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <SystemInit+0x68>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <SystemInit+0x64>)
 8001b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00
 8001b3c:	40021000 	.word	0x40021000

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b44:	f7ff ffc6 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b4a:	e003      	b.n	8001b54 <LoopCopyDataInit>

08001b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b52:	3104      	adds	r1, #4

08001b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b5c:	d3f6      	bcc.n	8001b4c <CopyDataInit>
	ldr	r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b60:	e002      	b.n	8001b68 <LoopFillZerobss>

08001b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b64:	f842 3b04 	str.w	r3, [r2], #4

08001b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <LoopForever+0x16>)
	cmp	r2, r3
 8001b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b6c:	d3f9      	bcc.n	8001b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f005 f9b5 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b72:	f7ff f8a5 	bl	8000cc0 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b78:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b7c:	08007958 	.word	0x08007958
	ldr	r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b84:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 8001b88:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 8001b8c:	20001550 	.word	0x20001550

08001b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 f8de 	bl	8001d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fee2 	bl	800196c <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fe06 	bl	80017c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000064 	.word	0x20000064
 8001be8:	20001548 	.word	0x20001548

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20001548 	.word	0x20001548

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ff4c 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d86:	f7ff ff61 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	6978      	ldr	r0, [r7, #20]
 8001d92:	f7ff ffb1 	bl	8001cf8 <NVIC_EncodePriority>
 8001d96:	4602      	mov	r2, r0
 8001d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff80 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001da4:	bf00      	nop
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff54 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e166      	b.n	80020a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8158 	beq.w	80020a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00b      	beq.n	8001e10 <HAL_GPIO_Init+0x48>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e04:	2b11      	cmp	r3, #17
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0xea>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d123      	bne.n	8001efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3208      	adds	r2, #8
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0203 	and.w	r2, r3, #3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80b2 	beq.w	80020a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_GPIO_Init+0x2fc>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f40:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_GPIO_Init+0x2fc>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6613      	str	r3, [r2, #96]	; 0x60
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_GPIO_Init+0x2fc>)
 8001f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f54:	4a5c      	ldr	r2, [pc, #368]	; (80020c8 <HAL_GPIO_Init+0x300>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f7e:	d02b      	beq.n	8001fd8 <HAL_GPIO_Init+0x210>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_GPIO_Init+0x304>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d025      	beq.n	8001fd4 <HAL_GPIO_Init+0x20c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_GPIO_Init+0x308>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d01f      	beq.n	8001fd0 <HAL_GPIO_Init+0x208>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_GPIO_Init+0x30c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d019      	beq.n	8001fcc <HAL_GPIO_Init+0x204>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_GPIO_Init+0x310>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_GPIO_Init+0x200>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <HAL_GPIO_Init+0x314>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1fc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <HAL_GPIO_Init+0x318>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1f8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <HAL_GPIO_Init+0x31c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1f4>
 8001fb8:	2307      	movs	r3, #7
 8001fba:	e00e      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	e00c      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	e00a      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	e008      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x212>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fea:	4937      	ldr	r1, [pc, #220]	; (80020c8 <HAL_GPIO_Init+0x300>)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201c:	4a32      	ldr	r2, [pc, #200]	; (80020e8 <HAL_GPIO_Init+0x320>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002046:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_GPIO_Init+0x320>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_GPIO_Init+0x320>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_GPIO_Init+0x320>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f ae91 	bne.w	8001dd8 <HAL_GPIO_Init+0x10>
  }
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010000 	.word	0x40010000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	48000800 	.word	0x48000800
 80020d4:	48000c00 	.word	0x48000c00
 80020d8:	48001000 	.word	0x48001000
 80020dc:	48001400 	.word	0x48001400
 80020e0:	48001800 	.word	0x48001800
 80020e4:	48001c00 	.word	0x48001c00
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80020fa:	e0c9      	b.n	8002290 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020fc:	2201      	movs	r2, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80bc 	beq.w	800228a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002112:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_GPIO_DeInit+0x1c0>)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213a:	d02b      	beq.n	8002194 <HAL_GPIO_DeInit+0xa8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a5c      	ldr	r2, [pc, #368]	; (80022b0 <HAL_GPIO_DeInit+0x1c4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d025      	beq.n	8002190 <HAL_GPIO_DeInit+0xa4>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a5b      	ldr	r2, [pc, #364]	; (80022b4 <HAL_GPIO_DeInit+0x1c8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d01f      	beq.n	800218c <HAL_GPIO_DeInit+0xa0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a5a      	ldr	r2, [pc, #360]	; (80022b8 <HAL_GPIO_DeInit+0x1cc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d019      	beq.n	8002188 <HAL_GPIO_DeInit+0x9c>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a59      	ldr	r2, [pc, #356]	; (80022bc <HAL_GPIO_DeInit+0x1d0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_GPIO_DeInit+0x98>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_GPIO_DeInit+0x1d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00d      	beq.n	8002180 <HAL_GPIO_DeInit+0x94>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_GPIO_DeInit+0x1d8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_DeInit+0x90>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_GPIO_DeInit+0x1dc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_GPIO_DeInit+0x8c>
 8002174:	2307      	movs	r3, #7
 8002176:	e00e      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002178:	2308      	movs	r3, #8
 800217a:	e00c      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 800217c:	2306      	movs	r3, #6
 800217e:	e00a      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002180:	2305      	movs	r3, #5
 8002182:	e008      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002184:	2304      	movs	r3, #4
 8002186:	e006      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002188:	2303      	movs	r3, #3
 800218a:	e004      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 800218c:	2302      	movs	r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_GPIO_DeInit+0xaa>
 8002194:	2300      	movs	r3, #0
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d132      	bne.n	800220c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4947      	ldr	r1, [pc, #284]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80021b4:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	4943      	ldr	r1, [pc, #268]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4940      	ldr	r1, [pc, #256]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80021d0:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	493c      	ldr	r1, [pc, #240]	; (80022cc <HAL_GPIO_DeInit+0x1e0>)
 80021da:	4013      	ands	r3, r2
 80021dc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_GPIO_DeInit+0x1c0>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	482b      	ldr	r0, [pc, #172]	; (80022ac <HAL_GPIO_DeInit+0x1c0>)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	400a      	ands	r2, r1
 8002206:	3302      	adds	r3, #2
 8002208:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2103      	movs	r1, #3
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	220f      	movs	r2, #15
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	08d2      	lsrs	r2, r2, #3
 8002240:	4019      	ands	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2103      	movs	r1, #3
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2103      	movs	r1, #3
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f af2f 	bne.w	80020fc <HAL_GPIO_DeInit+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	48000c00 	.word	0x48000c00
 80022bc:	48001000 	.word	0x48001000
 80022c0:	48001400 	.word	0x48001400
 80022c4:	48001800 	.word	0x48001800
 80022c8:	48001c00 	.word	0x48001c00
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e001      	b.n	80022f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800231c:	e002      	b.n	8002324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f806 	bl	8002360 <HAL_GPIO_EXTI_Callback>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e081      	b.n	800248c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fa39 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2224      	movs	r2, #36	; 0x24
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e006      	b.n	80023fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d104      	bne.n	8002410 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800240e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002432:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69d9      	ldr	r1, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e021      	b.n	80024ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2224      	movs	r2, #36	; 0x24
 80024aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff f9ec 	bl	800189c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4603      	mov	r3, r0
 8002504:	817b      	strh	r3, [r7, #10]
 8002506:	460b      	mov	r3, r1
 8002508:	813b      	strh	r3, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 80f9 	bne.w	800270e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_I2C_Mem_Write+0x34>
 8002522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0ed      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_I2C_Mem_Write+0x4e>
 800253e:	2302      	movs	r3, #2
 8002540:	e0e6      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800254a:	f7ff fb4f 	bl	8001bec <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2319      	movs	r3, #25
 8002556:	2201      	movs	r2, #1
 8002558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fac3 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0d1      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2221      	movs	r2, #33	; 0x21
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2240      	movs	r2, #64	; 0x40
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a3a      	ldr	r2, [r7, #32]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800258c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002594:	88f8      	ldrh	r0, [r7, #6]
 8002596:	893a      	ldrh	r2, [r7, #8]
 8002598:	8979      	ldrh	r1, [r7, #10]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4603      	mov	r3, r0
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f9d3 	bl	8002950 <I2C_RequestMemoryWrite>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0a9      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2bff      	cmp	r3, #255	; 0xff
 80025c4:	d90e      	bls.n	80025e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	22ff      	movs	r2, #255	; 0xff
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fba5 	bl	8002d2c <I2C_TransferConfig>
 80025e2:	e00f      	b.n	8002604 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 fb94 	bl	8002d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 faad 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e07b      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d034      	beq.n	80026bc <HAL_I2C_Mem_Write+0x1c8>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d130      	bne.n	80026bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	2200      	movs	r2, #0
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fa3f 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e04d      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2bff      	cmp	r3, #255	; 0xff
 800267c:	d90e      	bls.n	800269c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	22ff      	movs	r2, #255	; 0xff
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	b2da      	uxtb	r2, r3
 800268a:	8979      	ldrh	r1, [r7, #10]
 800268c:	2300      	movs	r3, #0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fb49 	bl	8002d2c <I2C_TransferConfig>
 800269a:	e00f      	b.n	80026bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	8979      	ldrh	r1, [r7, #10]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fb38 	bl	8002d2c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d19e      	bne.n	8002604 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa8c 	bl	8002be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e01a      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2220      	movs	r2, #32
 80026e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_I2C_Mem_Write+0x224>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	fe00e800 	.word	0xfe00e800

0800271c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	460b      	mov	r3, r1
 8002730:	813b      	strh	r3, [r7, #8]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	f040 80fd 	bne.w	800293e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_I2C_Mem_Read+0x34>
 800274a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002756:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0f1      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_I2C_Mem_Read+0x4e>
 8002766:	2302      	movs	r3, #2
 8002768:	e0ea      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002772:	f7ff fa3b 	bl	8001bec <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2319      	movs	r3, #25
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f9af 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d5      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2222      	movs	r2, #34	; 0x22
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027bc:	88f8      	ldrh	r0, [r7, #6]
 80027be:	893a      	ldrh	r2, [r7, #8]
 80027c0:	8979      	ldrh	r1, [r7, #10]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	4603      	mov	r3, r0
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f913 	bl	80029f8 <I2C_RequestMemoryRead>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0ad      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d90e      	bls.n	800280c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	22ff      	movs	r2, #255	; 0xff
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_I2C_Mem_Read+0x22c>)
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fa91 	bl	8002d2c <I2C_TransferConfig>
 800280a:	e00f      	b.n	800282c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	b2da      	uxtb	r2, r3
 800281c:	8979      	ldrh	r1, [r7, #10]
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_I2C_Mem_Read+0x22c>)
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fa80 	bl	8002d2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	2200      	movs	r2, #0
 8002834:	2104      	movs	r1, #4
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f956 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07c      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d034      	beq.n	80028ec <HAL_I2C_Mem_Read+0x1d0>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d130      	bne.n	80028ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f927 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04d      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2bff      	cmp	r3, #255	; 0xff
 80028ac:	d90e      	bls.n	80028cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	2300      	movs	r3, #0
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fa31 	bl	8002d2c <I2C_TransferConfig>
 80028ca:	e00f      	b.n	80028ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fa20 	bl	8002d2c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d19a      	bne.n	800282c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f974 	bl	8002be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e01a      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_I2C_Mem_Read+0x230>)
 800291e:	400b      	ands	r3, r1
 8002920:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	80002400 	.word	0x80002400
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	8979      	ldrh	r1, [r7, #10]
 8002970:	4b20      	ldr	r3, [pc, #128]	; (80029f4 <I2C_RequestMemoryWrite+0xa4>)
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f9d7 	bl	8002d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8f0 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e02c      	b.n	80029ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
 80029a2:	e015      	b.n	80029d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	69b9      	ldr	r1, [r7, #24]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8d6 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e012      	b.n	80029ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c6:	893b      	ldrh	r3, [r7, #8]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f884 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	80002000 	.word	0x80002000

080029f8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <I2C_RequestMemoryRead+0xa4>)
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f984 	bl	8002d2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f89d 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e02c      	b.n	8002a92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
 8002a48:	e015      	b.n	8002a76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a4a:	893b      	ldrh	r3, [r7, #8]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f883 	bl	8002b68 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e012      	b.n	8002a92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f831 	bl	8002ae8 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	80002000 	.word	0x80002000

08002aa0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d103      	bne.n	8002abe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d007      	beq.n	8002adc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	619a      	str	r2, [r3, #24]
  }
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	603b      	str	r3, [r7, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af8:	e022      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d01e      	beq.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7ff f873 	bl	8001bec <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d113      	bne.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00f      	b.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	bf0c      	ite	eq
 8002b50:	2301      	moveq	r3, #1
 8002b52:	2300      	movne	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d0cd      	beq.n	8002afa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b74:	e02c      	b.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f870 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e02a      	b.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b90:	d01e      	beq.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b92:	f7ff f82b 	bl	8001bec <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d302      	bcc.n	8002ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d113      	bne.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d1cb      	bne.n	8002b76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf4:	e028      	b.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f830 	bl	8002c60 <I2C_IsAcknowledgeFailed>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e026      	b.n	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe ffef 	bl	8001bec <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d113      	bne.n	8002c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e007      	b.n	8002c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d1cf      	bne.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d151      	bne.n	8002d1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7a:	e022      	b.n	8002cc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c82:	d01e      	beq.n	8002cc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe ffb2 	bl	8001bec <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <I2C_IsAcknowledgeFailed+0x3a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e02e      	b.n	8002d20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d1d5      	bne.n	8002c7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fedd 	bl	8002aa0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <I2C_IsAcknowledgeFailed+0xc8>)
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	fe00e800 	.word	0xfe00e800

08002d2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	0d5b      	lsrs	r3, r3, #21
 8002d48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <I2C_TransferConfig+0x58>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	43db      	mvns	r3, r3
 8002d52:	ea02 0103 	and.w	r1, r2, r3
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d5c:	7a7b      	ldrb	r3, [r7, #9]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	03ff63ff 	.word	0x03ff63ff

08002d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d138      	bne.n	8002e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e032      	b.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0201 	bic.w	r2, r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d139      	bne.n	8002ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e033      	b.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2224      	movs	r2, #36	; 0x24
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0201 	bic.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d102      	bne.n	8002ed0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ece:	e00b      	b.n	8002ee8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d102      	bne.n	8002ee6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee4:	e000      	b.n	8002ee8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ee6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40007000 	.word	0x40007000

08002ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d141      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f06:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d131      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f24:	4b43      	ldr	r3, [pc, #268]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f2c:	4a41      	ldr	r2, [pc, #260]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f34:	4b40      	ldr	r3, [pc, #256]	; (8003038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2232      	movs	r2, #50	; 0x32
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
 8002f3e:	4a3f      	ldr	r2, [pc, #252]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4a:	e002      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f52:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d102      	bne.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f2      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f66:	4b33      	ldr	r3, [pc, #204]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d158      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e057      	b.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f78:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7e:	4a2d      	ldr	r2, [pc, #180]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f88:	e04d      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d141      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d131      	bne.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa6:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb0:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2232      	movs	r2, #50	; 0x32
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	0c9b      	lsrs	r3, r3, #18
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd6:	e002      	b.n	8002fde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d102      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f2      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d112      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e011      	b.n	8003028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003014:	e007      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800301e:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003024:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40007000 	.word	0x40007000
 8003038:	2000005c 	.word	0x2000005c
 800303c:	431bde83 	.word	0x431bde83

08003040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f000 bc16 	b.w	8003880 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003054:	4ba0      	ldr	r3, [pc, #640]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305e:	4b9e      	ldr	r3, [pc, #632]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80e4 	beq.w	800323e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_RCC_OscConfig+0x4c>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	f040 808b 	bne.w	800319a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b01      	cmp	r3, #1
 8003088:	f040 8087 	bne.w	800319a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800308c:	4b92      	ldr	r3, [pc, #584]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_OscConfig+0x64>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e3ed      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	4b8b      	ldr	r3, [pc, #556]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_RCC_OscConfig+0x7e>
 80030b4:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030bc:	e005      	b.n	80030ca <HAL_RCC_OscConfig+0x8a>
 80030be:	4b86      	ldr	r3, [pc, #536]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d223      	bcs.n	8003116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fdfa 	bl	8003ccc <RCC_SetFlashLatencyFromMSIRange>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e3ce      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030e2:	4b7d      	ldr	r3, [pc, #500]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7c      	ldr	r2, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b7a      	ldr	r3, [pc, #488]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4977      	ldr	r1, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	4972      	ldr	r1, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
 8003114:	e025      	b.n	8003162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003116:	4b70      	ldr	r3, [pc, #448]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6f      	ldr	r2, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6d      	ldr	r3, [pc, #436]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	496a      	ldr	r1, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003134:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	4965      	ldr	r1, [pc, #404]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fdba 	bl	8003ccc <RCC_SetFlashLatencyFromMSIRange>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e38e      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003162:	f000 fcbf 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003166:	4601      	mov	r1, r0
 8003168:	4b5b      	ldr	r3, [pc, #364]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	4a5a      	ldr	r2, [pc, #360]	; (80032dc <HAL_RCC_OscConfig+0x29c>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	fa21 f303 	lsr.w	r3, r1, r3
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_RCC_OscConfig+0x2a0>)
 8003180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003182:	4b58      	ldr	r3, [pc, #352]	; (80032e4 <HAL_RCC_OscConfig+0x2a4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fbf0 	bl	800196c <HAL_InitTick>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d052      	beq.n	800323c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	e372      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d032      	beq.n	8003208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fd1d 	bl	8001bec <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b6:	f7fe fd19 	bl	8001bec <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e35b      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c8:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031d4:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3f      	ldr	r2, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031da:	f043 0308 	orr.w	r3, r3, #8
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	493a      	ldr	r1, [pc, #232]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031f2:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	4935      	ldr	r1, [pc, #212]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
 8003206:	e01a      	b.n	800323e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a32      	ldr	r2, [pc, #200]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003214:	f7fe fcea 	bl	8001bec <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800321c:	f7fe fce6 	bl	8001bec <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e328      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1dc>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d073      	beq.n	8003332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d005      	beq.n	800325c <HAL_RCC_OscConfig+0x21c>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b0c      	cmp	r3, #12
 8003254:	d10e      	bne.n	8003274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d10b      	bne.n	8003274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d063      	beq.n	8003330 <HAL_RCC_OscConfig+0x2f0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d15f      	bne.n	8003330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e305      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x24c>
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0x288>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x270>
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x288>
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <HAL_RCC_OscConfig+0x298>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fc8c 	bl	8001bec <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	e010      	b.n	80032fa <HAL_RCC_OscConfig+0x2ba>
 80032d8:	40021000 	.word	0x40021000
 80032dc:	080078b4 	.word	0x080078b4
 80032e0:	2000005c 	.word	0x2000005c
 80032e4:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fc80 	bl	8001bec <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e2c2      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	4baf      	ldr	r3, [pc, #700]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2a8>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fc70 	bl	8001bec <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe fc6c 	bl	8001bec <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e2ae      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	4ba5      	ldr	r3, [pc, #660]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x2d0>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d060      	beq.n	8003400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x310>
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d119      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d116      	bne.n	800337e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003350:	4b99      	ldr	r3, [pc, #612]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_OscConfig+0x328>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e28b      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b93      	ldr	r3, [pc, #588]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	4990      	ldr	r1, [pc, #576]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	e040      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d023      	beq.n	80033ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003386:	4b8c      	ldr	r3, [pc, #560]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a8b      	ldr	r2, [pc, #556]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fc2b 	bl	8001bec <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339a:	f7fe fc27 	bl	8001bec <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e269      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b7f      	ldr	r3, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	497c      	ldr	r1, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
 80033cc:	e018      	b.n	8003400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a79      	ldr	r2, [pc, #484]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fc07 	bl	8001bec <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe fc03 	bl	8001bec <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e245      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033f4:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03c      	beq.n	8003486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01c      	beq.n	800344e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341a:	4a67      	ldr	r2, [pc, #412]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003424:	f7fe fbe2 	bl	8001bec <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342c:	f7fe fbde 	bl	8001bec <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e220      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x3ec>
 800344c:	e01b      	b.n	8003486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345e:	f7fe fbc5 	bl	8001bec <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003466:	f7fe fbc1 	bl	8001bec <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e203      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1ef      	bne.n	8003466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80a6 	beq.w	80035e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003498:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	4a43      	ldr	r2, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	; 0x58
 80034b0:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c0:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCC_OscConfig+0x57c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d118      	bne.n	80034fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x57c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3a      	ldr	r2, [pc, #232]	; (80035bc <HAL_RCC_OscConfig+0x57c>)
 80034d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d8:	f7fe fb88 	bl	8001bec <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e0:	f7fe fb84 	bl	8001bec <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1c6      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f2:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_RCC_OscConfig+0x57c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d108      	bne.n	8003518 <HAL_RCC_OscConfig+0x4d8>
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350c:	4a2a      	ldr	r2, [pc, #168]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003516:	e024      	b.n	8003562 <HAL_RCC_OscConfig+0x522>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d110      	bne.n	8003542 <HAL_RCC_OscConfig+0x502>
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003526:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003540:	e00f      	b.n	8003562 <HAL_RCC_OscConfig+0x522>
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800355a:	f023 0304 	bic.w	r3, r3, #4
 800355e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356a:	f7fe fb3f 	bl	8001bec <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fb3b 	bl	8001bec <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e17b      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x578>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ed      	beq.n	8003572 <HAL_RCC_OscConfig+0x532>
 8003596:	e01a      	b.n	80035ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe fb28 	bl	8001bec <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359e:	e00f      	b.n	80035c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fe fb24 	bl	8001bec <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d906      	bls.n	80035c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e164      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c0:	4ba8      	ldr	r3, [pc, #672]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e8      	bne.n	80035a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4ba3      	ldr	r3, [pc, #652]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	4aa2      	ldr	r2, [pc, #648]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d03c      	beq.n	8003666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01c      	beq.n	800362e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035f4:	4b9b      	ldr	r3, [pc, #620]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80035f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fa:	4a9a      	ldr	r2, [pc, #616]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe faf2 	bl	8001bec <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360c:	f7fe faee 	bl	8001bec <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e130      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800361e:	4b91      	ldr	r3, [pc, #580]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ef      	beq.n	800360c <HAL_RCC_OscConfig+0x5cc>
 800362c:	e01b      	b.n	8003666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800362e:	4b8d      	ldr	r3, [pc, #564]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003634:	4a8b      	ldr	r2, [pc, #556]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe fad5 	bl	8001bec <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003646:	f7fe fad1 	bl	8001bec <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e113      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003658:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800365a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ef      	bne.n	8003646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8107 	beq.w	800387e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b02      	cmp	r3, #2
 8003676:	f040 80cb 	bne.w	8003810 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800367a:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	429a      	cmp	r2, r3
 800368c:	d12c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	3b01      	subs	r3, #1
 800369a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d123      	bne.n	80036e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d11b      	bne.n	80036e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d113      	bne.n	80036e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d109      	bne.n	80036e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	3b01      	subs	r3, #1
 80036e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d06d      	beq.n	80037c4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d068      	beq.n	80037c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036fa:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0ba      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800370a:	4b56      	ldr	r3, [pc, #344]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a55      	ldr	r2, [pc, #340]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003716:	f7fe fa69 	bl	8001bec <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fa65 	bl	8001bec <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0a7      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f0      	bne.n	800371e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373c:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	4b49      	ldr	r3, [pc, #292]	; (8003868 <HAL_RCC_OscConfig+0x828>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800374c:	3a01      	subs	r2, #1
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003756:	0212      	lsls	r2, r2, #8
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0552      	lsls	r2, r2, #21
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0652      	lsls	r2, r2, #25
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003776:	06d2      	lsls	r2, r2, #27
 8003778:	430a      	orrs	r2, r1
 800377a:	493a      	ldr	r1, [pc, #232]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800377c:	4313      	orrs	r3, r2
 800377e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003780:	4b38      	ldr	r3, [pc, #224]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a37      	ldr	r2, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003798:	f7fe fa28 	bl	8001bec <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe fa24 	bl	8001bec <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e066      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037be:	e05e      	b.n	800387e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e05d      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d156      	bne.n	800387e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a20      	ldr	r2, [pc, #128]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037e8:	f7fe fa00 	bl	8001bec <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe f9fc 	bl	8001bec <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e03e      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x7b0>
 800380e:	e036      	b.n	800387e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d031      	beq.n	800387a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b13      	ldr	r3, [pc, #76]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800381c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003820:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003834:	f023 0303 	bic.w	r3, r3, #3
 8003838:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_OscConfig+0x824>)
 8003840:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003848:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe f9cf 	bl	8001bec <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	e00c      	b.n	800386c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fe f9cb 	bl	8001bec <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d905      	bls.n	800386c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e00d      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
 8003864:	40021000 	.word	0x40021000
 8003868:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <HAL_RCC_OscConfig+0x848>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ec      	bne.n	8003852 <HAL_RCC_OscConfig+0x812>
 8003878:	e001      	b.n	800387e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e10f      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b89      	ldr	r3, [pc, #548]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d910      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b86      	ldr	r3, [pc, #536]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 020f 	bic.w	r2, r3, #15
 80038ba:	4984      	ldr	r1, [pc, #528]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b82      	ldr	r3, [pc, #520]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0f7      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8089 	beq.w	80039f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d133      	bne.n	8003952 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e0e4      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038fa:	f000 fa41 	bl	8003d80 <RCC_GetSysClockFreqFromPLLSource>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b74      	ldr	r3, [pc, #464]	; (8003ad4 <HAL_RCC_ClockConfig+0x248>)
 8003902:	429a      	cmp	r2, r3
 8003904:	d955      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003912:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800391a:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e044      	b.n	80039b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03e      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x126>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d13a      	bne.n	80039b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003944:	4a62      	ldr	r2, [pc, #392]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e02f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e0ac      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003972:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e0a0      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e098      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003992:	f000 f8a7 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b4e      	ldr	r3, [pc, #312]	; (8003ad4 <HAL_RCC_ClockConfig+0x248>)
 800399a:	429a      	cmp	r2, r3
 800399c:	d909      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4944      	ldr	r1, [pc, #272]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe f912 	bl	8001bec <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe f90e 	bl	8001bec <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e070      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b33      	ldr	r3, [pc, #204]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4930      	ldr	r1, [pc, #192]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b80      	cmp	r3, #128	; 0x80
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a24:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d210      	bcs.n	8003a56 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 020f 	bic.w	r2, r3, #15
 8003a3c:	4923      	ldr	r1, [pc, #140]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e036      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4918      	ldr	r1, [pc, #96]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	4910      	ldr	r1, [pc, #64]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a94:	f000 f826 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_RCC_ClockConfig+0x24c>)
 8003aa6:	5cd3      	ldrb	r3, [r2, r3]
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_RCC_ClockConfig+0x250>)
 8003ab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x254>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd ff57 	bl	800196c <HAL_InitTick>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	04c4b400 	.word	0x04c4b400
 8003ad8:	080078b4 	.word	0x080078b4
 8003adc:	2000005c 	.word	0x2000005c
 8003ae0:	20000060 	.word	0x20000060

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b3a      	ldr	r3, [pc, #232]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d121      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d11e      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b24:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e004      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b68:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d133      	bne.n	8003bda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0xaa>
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	e005      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b90:	617b      	str	r3, [r7, #20]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	617b      	str	r3, [r7, #20]
      break;
 8003b98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	fb02 f203 	mul.w	r2, r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc0:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0e5b      	lsrs	r3, r3, #25
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bda:	69bb      	ldr	r3, [r7, #24]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3724      	adds	r7, #36	; 0x24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40021000 	.word	0x40021000
 8003bec:	080078cc 	.word	0x080078cc
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	007a1200 	.word	0x007a1200

08003bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	2000005c 	.word	0x2000005c

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c14:	f7ff fff0 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	080078c4 	.word	0x080078c4

08003c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c40:	f7ff ffda 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c44:	4601      	mov	r1, r0
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0adb      	lsrs	r3, r3, #11
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	080078c4 	.word	0x080078c4

08003c68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	220f      	movs	r2, #15
 8003c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0203 	and.w	r2, r3, #3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_RCC_GetClockConfig+0x60>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 020f 	and.w	r2, r3, #15
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	601a      	str	r2, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40022000 	.word	0x40022000

08003ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ce4:	f7ff f8e8 	bl	8002eb8 <HAL_PWREx_GetVoltageRange>
 8003ce8:	6178      	str	r0, [r7, #20]
 8003cea:	e014      	b.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d04:	f7ff f8d8 	bl	8002eb8 <HAL_PWREx_GetVoltageRange>
 8003d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d10b      	bne.n	8003d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d913      	bls.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2ba0      	cmp	r3, #160	; 0xa0
 8003d28:	d902      	bls.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	e00d      	b.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d30:	2301      	movs	r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	e00a      	b.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b7f      	cmp	r3, #127	; 0x7f
 8003d3a:	d902      	bls.n	8003d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	e004      	b.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b70      	cmp	r3, #112	; 0x70
 8003d46:	d101      	bne.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d48:	2301      	movs	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 020f 	bic.w	r2, r3, #15
 8003d54:	4909      	ldr	r1, [pc, #36]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d001      	beq.n	8003d6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40022000 	.word	0x40022000

08003d80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003d8a:	4b2d      	ldr	r3, [pc, #180]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d118      	bne.n	8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d107      	bne.n	8003db2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003da2:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e005      	b.n	8003dbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003db2:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	091b      	lsrs	r3, r3, #4
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dbe:	4a21      	ldr	r2, [pc, #132]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d002      	beq.n	8003dde <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d003      	beq.n	8003de4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003ddc:	e005      	b.n	8003dea <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003de0:	613b      	str	r3, [r7, #16]
    break;
 8003de2:	e005      	b.n	8003df0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003de6:	613b      	str	r3, [r7, #16]
    break;
 8003de8:	e002      	b.n	8003df0 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	613b      	str	r3, [r7, #16]
    break;
 8003dee:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	fb02 f203 	mul.w	r2, r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	0e5b      	lsrs	r3, r3, #25
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	3301      	adds	r3, #1
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e30:	683b      	ldr	r3, [r7, #0]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	080078cc 	.word	0x080078cc
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03d      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d00b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e74:	2b40      	cmp	r3, #64	; 0x40
 8003e76:	d804      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d015      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e80:	e01d      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e82:	2b60      	cmp	r3, #96	; 0x60
 8003e84:	d01e      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d01c      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e8a:	e018      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e8c:	4b86      	ldr	r3, [pc, #536]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a85      	ldr	r2, [pc, #532]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e98:	e015      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fafd 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eaa:	e00c      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3320      	adds	r3, #32
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fbe4 	bl	8004680 <RCCEx_PLLSAI2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ebc:	e003      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ecc:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ed2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eda:	4973      	ldr	r1, [pc, #460]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ee2:	e001      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d042      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d00f      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f02:	d805      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0c:	d017      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003f0e:	e01f      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f14:	d01f      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d01c      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f1c:	e018      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f1e:	4b62      	ldr	r3, [pc, #392]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a61      	ldr	r2, [pc, #388]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e015      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fab4 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3320      	adds	r3, #32
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb9b 	bl	8004680 <RCCEx_PLLSAI2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	74fb      	strb	r3, [r7, #19]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5e:	4b52      	ldr	r3, [pc, #328]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	494e      	ldr	r1, [pc, #312]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f74:	e001      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 809f 	beq.w	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6593      	str	r3, [r2, #88]	; 0x58
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fbe:	4b3b      	ldr	r3, [pc, #236]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fca:	f7fd fe0f 	bl	8001bec <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd0:	e009      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd fe0b 	bl	8001bec <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ef      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d15b      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01f      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d019      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004016:	4b24      	ldr	r3, [pc, #144]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800402a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800403a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d016      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd fdca 	bl	8001bec <HAL_GetTick>
 8004058:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405a:	e00b      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd fdc6 	bl	8001bec <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d902      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	74fb      	strb	r3, [r7, #19]
            break;
 8004072:	e006      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0ec      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10c      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040a0:	e008      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
 80040a6:	e005      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7c7b      	ldrb	r3, [r7, #17]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4ba0      	ldr	r3, [pc, #640]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	4a9f      	ldr	r2, [pc, #636]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d2:	4b9a      	ldr	r3, [pc, #616]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f023 0203 	bic.w	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	4996      	ldr	r1, [pc, #600]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040f4:	4b91      	ldr	r3, [pc, #580]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f023 020c 	bic.w	r2, r3, #12
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	498e      	ldr	r1, [pc, #568]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004116:	4b89      	ldr	r3, [pc, #548]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	4985      	ldr	r1, [pc, #532]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b80      	ldr	r3, [pc, #512]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	497d      	ldr	r1, [pc, #500]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800415a:	4b78      	ldr	r3, [pc, #480]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	4974      	ldr	r1, [pc, #464]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417c:	4b6f      	ldr	r3, [pc, #444]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	496c      	ldr	r1, [pc, #432]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419e:	4b67      	ldr	r3, [pc, #412]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ac:	4963      	ldr	r1, [pc, #396]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c0:	4b5e      	ldr	r3, [pc, #376]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041ce:	495b      	ldr	r1, [pc, #364]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	4952      	ldr	r1, [pc, #328]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004204:	4b4d      	ldr	r3, [pc, #308]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	494a      	ldr	r1, [pc, #296]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004226:	4b45      	ldr	r3, [pc, #276]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	4941      	ldr	r1, [pc, #260]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004248:	4b3c      	ldr	r3, [pc, #240]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	4939      	ldr	r1, [pc, #228]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d028      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426a:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	4930      	ldr	r1, [pc, #192]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004288:	d106      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428a:	4b2c      	ldr	r3, [pc, #176]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4a2b      	ldr	r2, [pc, #172]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004294:	60d3      	str	r3, [r2, #12]
 8004296:	e011      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a0:	d10c      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3304      	adds	r3, #4
 80042a6:	2101      	movs	r1, #1
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 f8f9 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80042b8:	7cfb      	ldrb	r3, [r7, #19]
 80042ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d04d      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d0:	d108      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80042d2:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042e2:	e012      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ea:	4a14      	ldr	r2, [pc, #80]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	490e      	ldr	r1, [pc, #56]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e020      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432a:	d109      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800432c:	4b03      	ldr	r3, [pc, #12]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a02      	ldr	r2, [pc, #8]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004336:	60d3      	str	r3, [r2, #12]
 8004338:	e014      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004348:	d10c      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 f8a5 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d028      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4b4a      	ldr	r3, [pc, #296]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800437e:	4947      	ldr	r1, [pc, #284]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438e:	d106      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b42      	ldr	r3, [pc, #264]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a41      	ldr	r2, [pc, #260]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e011      	b.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a6:	d10c      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	2101      	movs	r1, #1
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f876 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01e      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ce:	4b33      	ldr	r3, [pc, #204]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043de:	492f      	ldr	r1, [pc, #188]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f0:	d10c      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2102      	movs	r1, #2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f851 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004418:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441e:	f023 0204 	bic.w	r2, r3, #4
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	491c      	ldr	r1, [pc, #112]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004442:	f023 0218 	bic.w	r2, r3, #24
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	4913      	ldr	r1, [pc, #76]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004466:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004470:	490a      	ldr	r1, [pc, #40]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004490:	7cbb      	ldrb	r3, [r7, #18]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000

080044a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ae:	4b70      	ldr	r3, [pc, #448]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00e      	beq.n	80044d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0203 	and.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d103      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
       ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d13f      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	e03c      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d00c      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x5a>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d013      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x6c>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d120      	bne.n	800452a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e01a      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fa:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e013      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450c:	4b58      	ldr	r3, [pc, #352]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004528:	e006      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      break;
 800452e:	e004      	b.n	800453a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004538:	bf00      	nop
    }

    if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d108      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004540:	4b4b      	ldr	r3, [pc, #300]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 0203 	bic.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4948      	ldr	r1, [pc, #288]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f040 8086 	bne.w	8004666 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800455a:	4b45      	ldr	r3, [pc, #276]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a44      	ldr	r2, [pc, #272]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004566:	f7fd fb41 	bl	8001bec <HAL_GetTick>
 800456a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456c:	e009      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456e:	f7fd fb3d 	bl	8001bec <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d902      	bls.n	8004582 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	73fb      	strb	r3, [r7, #15]
        break;
 8004580:	e005      	b.n	800458e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ef      	bne.n	800456e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d168      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d113      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459a:	4b35      	ldr	r3, [pc, #212]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	4b35      	ldr	r3, [pc, #212]	; (8004674 <RCCEx_PLLSAI1_Config+0x1d4>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6892      	ldr	r2, [r2, #8]
 80045a6:	0211      	lsls	r1, r2, #8
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68d2      	ldr	r2, [r2, #12]
 80045ac:	06d2      	lsls	r2, r2, #27
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6852      	ldr	r2, [r2, #4]
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	430a      	orrs	r2, r1
 80045ba:	492d      	ldr	r1, [pc, #180]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
 80045c0:	e02d      	b.n	800461e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d115      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c8:	4b29      	ldr	r3, [pc, #164]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6912      	ldr	r2, [r2, #16]
 80045da:	0852      	lsrs	r2, r2, #1
 80045dc:	3a01      	subs	r2, #1
 80045de:	0552      	lsls	r2, r2, #21
 80045e0:	4311      	orrs	r1, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6852      	ldr	r2, [r2, #4]
 80045e6:	3a01      	subs	r2, #1
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	430a      	orrs	r2, r1
 80045ec:	4920      	ldr	r1, [pc, #128]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]
 80045f2:	e014      	b.n	800461e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	4b20      	ldr	r3, [pc, #128]	; (800467c <RCCEx_PLLSAI1_Config+0x1dc>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	0211      	lsls	r1, r2, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6952      	ldr	r2, [r2, #20]
 8004606:	0852      	lsrs	r2, r2, #1
 8004608:	3a01      	subs	r2, #1
 800460a:	0652      	lsls	r2, r2, #25
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	3a01      	subs	r2, #1
 8004614:	0112      	lsls	r2, r2, #4
 8004616:	430a      	orrs	r2, r1
 8004618:	4915      	ldr	r1, [pc, #84]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800461a:	4313      	orrs	r3, r2
 800461c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a13      	ldr	r2, [pc, #76]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004628:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462a:	f7fd fadf 	bl	8001bec <HAL_GetTick>
 800462e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004630:	e009      	b.n	8004646 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004632:	f7fd fadb 	bl	8001bec <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d902      	bls.n	8004646 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	73fb      	strb	r3, [r7, #15]
          break;
 8004644:	e005      	b.n	8004652 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0ef      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004662:	4313      	orrs	r3, r2
 8004664:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	07ff800f 	.word	0x07ff800f
 8004678:	ff9f800f 	.word	0xff9f800f
 800467c:	f9ff800f 	.word	0xf9ff800f

08004680 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800468e:	4b70      	ldr	r3, [pc, #448]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d103      	bne.n	80046b2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
       ||
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d13f      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e03c      	b.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d00c      	beq.n	80046da <RCCEx_PLLSAI2_Config+0x5a>
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d013      	beq.n	80046ec <RCCEx_PLLSAI2_Config+0x6c>
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d120      	bne.n	800470a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046c8:	4b61      	ldr	r3, [pc, #388]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11d      	bne.n	8004710 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d8:	e01a      	b.n	8004710 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046da:	4b5d      	ldr	r3, [pc, #372]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ea:	e013      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ec:	4b58      	ldr	r3, [pc, #352]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046f8:	4b55      	ldr	r3, [pc, #340]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d109      	bne.n	8004718 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004708:	e006      	b.n	8004718 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      break;
 800470e:	e004      	b.n	800471a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004710:	bf00      	nop
 8004712:	e002      	b.n	800471a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004718:	bf00      	nop
    }

    if(status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004720:	4b4b      	ldr	r3, [pc, #300]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f023 0203 	bic.w	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4948      	ldr	r1, [pc, #288]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8086 	bne.w	8004846 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800473a:	4b45      	ldr	r3, [pc, #276]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a44      	ldr	r2, [pc, #272]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004746:	f7fd fa51 	bl	8001bec <HAL_GetTick>
 800474a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800474c:	e009      	b.n	8004762 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800474e:	f7fd fa4d 	bl	8001bec <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d902      	bls.n	8004762 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	73fb      	strb	r3, [r7, #15]
        break;
 8004760:	e005      	b.n	800476e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004762:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ef      	bne.n	800474e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d168      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d113      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800477a:	4b35      	ldr	r3, [pc, #212]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	4b35      	ldr	r3, [pc, #212]	; (8004854 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6892      	ldr	r2, [r2, #8]
 8004786:	0211      	lsls	r1, r2, #8
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68d2      	ldr	r2, [r2, #12]
 800478c:	06d2      	lsls	r2, r2, #27
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6852      	ldr	r2, [r2, #4]
 8004794:	3a01      	subs	r2, #1
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	430a      	orrs	r2, r1
 800479a:	492d      	ldr	r1, [pc, #180]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	614b      	str	r3, [r1, #20]
 80047a0:	e02d      	b.n	80047fe <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d115      	bne.n	80047d4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6912      	ldr	r2, [r2, #16]
 80047ba:	0852      	lsrs	r2, r2, #1
 80047bc:	3a01      	subs	r2, #1
 80047be:	0552      	lsls	r2, r2, #21
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6852      	ldr	r2, [r2, #4]
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0112      	lsls	r2, r2, #4
 80047ca:	430a      	orrs	r2, r1
 80047cc:	4920      	ldr	r1, [pc, #128]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	614b      	str	r3, [r1, #20]
 80047d2:	e014      	b.n	80047fe <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <RCCEx_PLLSAI2_Config+0x1dc>)
 80047da:	4013      	ands	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6892      	ldr	r2, [r2, #8]
 80047e0:	0211      	lsls	r1, r2, #8
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6952      	ldr	r2, [r2, #20]
 80047e6:	0852      	lsrs	r2, r2, #1
 80047e8:	3a01      	subs	r2, #1
 80047ea:	0652      	lsls	r2, r2, #25
 80047ec:	4311      	orrs	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	3a01      	subs	r2, #1
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	430a      	orrs	r2, r1
 80047f8:	4915      	ldr	r1, [pc, #84]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a13      	ldr	r2, [pc, #76]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004808:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fd f9ef 	bl	8001bec <HAL_GetTick>
 800480e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004810:	e009      	b.n	8004826 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004812:	f7fd f9eb 	bl	8001bec <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d902      	bls.n	8004826 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	73fb      	strb	r3, [r7, #15]
          break;
 8004824:	e005      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ef      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004846:	7bfb      	ldrb	r3, [r7, #15]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	07ff800f 	.word	0x07ff800f
 8004858:	ff9f800f 	.word	0xff9f800f
 800485c:	f9ff800f 	.word	0xf9ff800f

08004860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e049      	b.n	8004906 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f841 	bl	800490e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 f9f8 	bl	8004c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e04f      	b.n	80049dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a23      	ldr	r2, [pc, #140]	; (80049e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d018      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_TIM_Base_Start_IT+0xc8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_TIM_Base_Start_IT+0x76>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	; (80049fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d115      	bne.n	80049c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	4b17      	ldr	r3, [pc, #92]	; (8004a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b06      	cmp	r3, #6
 80049aa:	d015      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0xb4>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d011      	beq.n	80049d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c4:	e008      	b.n	80049d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e000      	b.n	80049da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800
 80049f4:	40000c00 	.word	0x40000c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	00010007 	.word	0x00010007

08004a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d122      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0202 	mvn.w	r2, #2
 8004a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f905 	bl	8004c56 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8f7 	bl	8004c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f908 	bl	8004c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0204 	mvn.w	r2, #4
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f8db 	bl	8004c56 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8cd 	bl	8004c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8de 	bl	8004c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d122      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0208 	mvn.w	r2, #8
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2204      	movs	r2, #4
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8b1 	bl	8004c56 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8a3 	bl	8004c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8b4 	bl	8004c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d122      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d11b      	bne.n	8004b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0210 	mvn.w	r2, #16
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2208      	movs	r2, #8
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f887 	bl	8004c56 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f879 	bl	8004c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f88a 	bl	8004c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d10e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d107      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0201 	mvn.w	r2, #1
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc fbdc 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f914 	bl	8004ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc2:	d10e      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f907 	bl	8004df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d10e      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f838 	bl	8004c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d10e      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0220 	mvn.w	r2, #32
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8c7 	bl	8004dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a40      	ldr	r2, [pc, #256]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d013      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d00f      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3d      	ldr	r2, [pc, #244]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3c      	ldr	r2, [pc, #240]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3b      	ldr	r2, [pc, #236]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x40>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01f      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf4:	d01b      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <TIM_Base_SetConfig+0x118>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d017      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2b      	ldr	r2, [pc, #172]	; (8004db0 <TIM_Base_SetConfig+0x11c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <TIM_Base_SetConfig+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00f      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00b      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <TIM_Base_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d007      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_Base_SetConfig+0x9a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d108      	bne.n	8004d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <TIM_Base_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <TIM_Base_SetConfig+0x124>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a11      	ldr	r2, [pc, #68]	; (8004dbc <TIM_Base_SetConfig+0x128>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <TIM_Base_SetConfig+0x12c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <TIM_Base_SetConfig+0x130>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40013400 	.word	0x40013400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800

08004dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e042      	b.n	8004e9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f7fc fd5b 	bl	80018e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2224      	movs	r2, #36	; 0x24
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f8c4 	bl	8004fd4 <UART_SetConfig>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e022      	b.n	8004e9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb8a 	bl	8005578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fc11 	bl	80056bc <UART_CheckIdleState>
 8004e9a:	4603      	mov	r3, r0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	f040 8084 	bne.w	8004fc8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_UART_Transmit+0x28>
 8004ec6:	88fb      	ldrh	r3, [r7, #6]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e07c      	b.n	8004fca <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Transmit+0x3a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e075      	b.n	8004fca <HAL_UART_Transmit+0x126>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2221      	movs	r2, #33	; 0x21
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004ef6:	f7fc fe79 	bl	8001bec <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d108      	bne.n	8004f28 <HAL_UART_Transmit+0x84>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e003      	b.n	8004f30 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004f38:	e02d      	b.n	8004f96 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fc01 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e03a      	b.n	8004fca <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f66:	b292      	uxth	r2, r2
 8004f68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	e008      	b.n	8004f84 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b292      	uxth	r2, r2
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3301      	adds	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1cb      	bne.n	8004f3a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2140      	movs	r1, #64	; 0x40
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fbcd 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e006      	b.n	8004fca <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004fd8:	b088      	sub	sp, #32
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	4313      	orrs	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4bb1      	ldr	r3, [pc, #708]	; (80052d0 <UART_SetConfig+0x2fc>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	69f9      	ldr	r1, [r7, #28]
 8005014:	430b      	orrs	r3, r1
 8005016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4aa6      	ldr	r2, [pc, #664]	; (80052d4 <UART_SetConfig+0x300>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	69fa      	ldr	r2, [r7, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005052:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	f023 010f 	bic.w	r1, r3, #15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a97      	ldr	r2, [pc, #604]	; (80052d8 <UART_SetConfig+0x304>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d121      	bne.n	80050c4 <UART_SetConfig+0xf0>
 8005080:	4b96      	ldr	r3, [pc, #600]	; (80052dc <UART_SetConfig+0x308>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d816      	bhi.n	80050bc <UART_SetConfig+0xe8>
 800508e:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0xc0>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b1 	.word	0x080050b1
 800509c:	080050ab 	.word	0x080050ab
 80050a0:	080050b7 	.word	0x080050b7
 80050a4:	2301      	movs	r3, #1
 80050a6:	76fb      	strb	r3, [r7, #27]
 80050a8:	e0e8      	b.n	800527c <UART_SetConfig+0x2a8>
 80050aa:	2302      	movs	r3, #2
 80050ac:	76fb      	strb	r3, [r7, #27]
 80050ae:	e0e5      	b.n	800527c <UART_SetConfig+0x2a8>
 80050b0:	2304      	movs	r3, #4
 80050b2:	76fb      	strb	r3, [r7, #27]
 80050b4:	e0e2      	b.n	800527c <UART_SetConfig+0x2a8>
 80050b6:	2308      	movs	r3, #8
 80050b8:	76fb      	strb	r3, [r7, #27]
 80050ba:	e0df      	b.n	800527c <UART_SetConfig+0x2a8>
 80050bc:	2310      	movs	r3, #16
 80050be:	76fb      	strb	r3, [r7, #27]
 80050c0:	bf00      	nop
 80050c2:	e0db      	b.n	800527c <UART_SetConfig+0x2a8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a85      	ldr	r2, [pc, #532]	; (80052e0 <UART_SetConfig+0x30c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d134      	bne.n	8005138 <UART_SetConfig+0x164>
 80050ce:	4b83      	ldr	r3, [pc, #524]	; (80052dc <UART_SetConfig+0x308>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d829      	bhi.n	8005130 <UART_SetConfig+0x15c>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <UART_SetConfig+0x110>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005119 	.word	0x08005119
 80050e8:	08005131 	.word	0x08005131
 80050ec:	08005131 	.word	0x08005131
 80050f0:	08005131 	.word	0x08005131
 80050f4:	08005125 	.word	0x08005125
 80050f8:	08005131 	.word	0x08005131
 80050fc:	08005131 	.word	0x08005131
 8005100:	08005131 	.word	0x08005131
 8005104:	0800511f 	.word	0x0800511f
 8005108:	08005131 	.word	0x08005131
 800510c:	08005131 	.word	0x08005131
 8005110:	08005131 	.word	0x08005131
 8005114:	0800512b 	.word	0x0800512b
 8005118:	2300      	movs	r3, #0
 800511a:	76fb      	strb	r3, [r7, #27]
 800511c:	e0ae      	b.n	800527c <UART_SetConfig+0x2a8>
 800511e:	2302      	movs	r3, #2
 8005120:	76fb      	strb	r3, [r7, #27]
 8005122:	e0ab      	b.n	800527c <UART_SetConfig+0x2a8>
 8005124:	2304      	movs	r3, #4
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e0a8      	b.n	800527c <UART_SetConfig+0x2a8>
 800512a:	2308      	movs	r3, #8
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e0a5      	b.n	800527c <UART_SetConfig+0x2a8>
 8005130:	2310      	movs	r3, #16
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	bf00      	nop
 8005136:	e0a1      	b.n	800527c <UART_SetConfig+0x2a8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a69      	ldr	r2, [pc, #420]	; (80052e4 <UART_SetConfig+0x310>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d120      	bne.n	8005184 <UART_SetConfig+0x1b0>
 8005142:	4b66      	ldr	r3, [pc, #408]	; (80052dc <UART_SetConfig+0x308>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800514c:	2b10      	cmp	r3, #16
 800514e:	d00f      	beq.n	8005170 <UART_SetConfig+0x19c>
 8005150:	2b10      	cmp	r3, #16
 8005152:	d802      	bhi.n	800515a <UART_SetConfig+0x186>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <UART_SetConfig+0x190>
 8005158:	e010      	b.n	800517c <UART_SetConfig+0x1a8>
 800515a:	2b20      	cmp	r3, #32
 800515c:	d005      	beq.n	800516a <UART_SetConfig+0x196>
 800515e:	2b30      	cmp	r3, #48	; 0x30
 8005160:	d009      	beq.n	8005176 <UART_SetConfig+0x1a2>
 8005162:	e00b      	b.n	800517c <UART_SetConfig+0x1a8>
 8005164:	2300      	movs	r3, #0
 8005166:	76fb      	strb	r3, [r7, #27]
 8005168:	e088      	b.n	800527c <UART_SetConfig+0x2a8>
 800516a:	2302      	movs	r3, #2
 800516c:	76fb      	strb	r3, [r7, #27]
 800516e:	e085      	b.n	800527c <UART_SetConfig+0x2a8>
 8005170:	2304      	movs	r3, #4
 8005172:	76fb      	strb	r3, [r7, #27]
 8005174:	e082      	b.n	800527c <UART_SetConfig+0x2a8>
 8005176:	2308      	movs	r3, #8
 8005178:	76fb      	strb	r3, [r7, #27]
 800517a:	e07f      	b.n	800527c <UART_SetConfig+0x2a8>
 800517c:	2310      	movs	r3, #16
 800517e:	76fb      	strb	r3, [r7, #27]
 8005180:	bf00      	nop
 8005182:	e07b      	b.n	800527c <UART_SetConfig+0x2a8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a57      	ldr	r2, [pc, #348]	; (80052e8 <UART_SetConfig+0x314>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d120      	bne.n	80051d0 <UART_SetConfig+0x1fc>
 800518e:	4b53      	ldr	r3, [pc, #332]	; (80052dc <UART_SetConfig+0x308>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d00f      	beq.n	80051bc <UART_SetConfig+0x1e8>
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d802      	bhi.n	80051a6 <UART_SetConfig+0x1d2>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <UART_SetConfig+0x1dc>
 80051a4:	e010      	b.n	80051c8 <UART_SetConfig+0x1f4>
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d005      	beq.n	80051b6 <UART_SetConfig+0x1e2>
 80051aa:	2bc0      	cmp	r3, #192	; 0xc0
 80051ac:	d009      	beq.n	80051c2 <UART_SetConfig+0x1ee>
 80051ae:	e00b      	b.n	80051c8 <UART_SetConfig+0x1f4>
 80051b0:	2300      	movs	r3, #0
 80051b2:	76fb      	strb	r3, [r7, #27]
 80051b4:	e062      	b.n	800527c <UART_SetConfig+0x2a8>
 80051b6:	2302      	movs	r3, #2
 80051b8:	76fb      	strb	r3, [r7, #27]
 80051ba:	e05f      	b.n	800527c <UART_SetConfig+0x2a8>
 80051bc:	2304      	movs	r3, #4
 80051be:	76fb      	strb	r3, [r7, #27]
 80051c0:	e05c      	b.n	800527c <UART_SetConfig+0x2a8>
 80051c2:	2308      	movs	r3, #8
 80051c4:	76fb      	strb	r3, [r7, #27]
 80051c6:	e059      	b.n	800527c <UART_SetConfig+0x2a8>
 80051c8:	2310      	movs	r3, #16
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	bf00      	nop
 80051ce:	e055      	b.n	800527c <UART_SetConfig+0x2a8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a45      	ldr	r2, [pc, #276]	; (80052ec <UART_SetConfig+0x318>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d124      	bne.n	8005224 <UART_SetConfig+0x250>
 80051da:	4b40      	ldr	r3, [pc, #256]	; (80052dc <UART_SetConfig+0x308>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d012      	beq.n	8005210 <UART_SetConfig+0x23c>
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d802      	bhi.n	80051f6 <UART_SetConfig+0x222>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <UART_SetConfig+0x230>
 80051f4:	e012      	b.n	800521c <UART_SetConfig+0x248>
 80051f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051fa:	d006      	beq.n	800520a <UART_SetConfig+0x236>
 80051fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005200:	d009      	beq.n	8005216 <UART_SetConfig+0x242>
 8005202:	e00b      	b.n	800521c <UART_SetConfig+0x248>
 8005204:	2300      	movs	r3, #0
 8005206:	76fb      	strb	r3, [r7, #27]
 8005208:	e038      	b.n	800527c <UART_SetConfig+0x2a8>
 800520a:	2302      	movs	r3, #2
 800520c:	76fb      	strb	r3, [r7, #27]
 800520e:	e035      	b.n	800527c <UART_SetConfig+0x2a8>
 8005210:	2304      	movs	r3, #4
 8005212:	76fb      	strb	r3, [r7, #27]
 8005214:	e032      	b.n	800527c <UART_SetConfig+0x2a8>
 8005216:	2308      	movs	r3, #8
 8005218:	76fb      	strb	r3, [r7, #27]
 800521a:	e02f      	b.n	800527c <UART_SetConfig+0x2a8>
 800521c:	2310      	movs	r3, #16
 800521e:	76fb      	strb	r3, [r7, #27]
 8005220:	bf00      	nop
 8005222:	e02b      	b.n	800527c <UART_SetConfig+0x2a8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <UART_SetConfig+0x300>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d124      	bne.n	8005278 <UART_SetConfig+0x2a4>
 800522e:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <UART_SetConfig+0x308>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d012      	beq.n	8005264 <UART_SetConfig+0x290>
 800523e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005242:	d802      	bhi.n	800524a <UART_SetConfig+0x276>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <UART_SetConfig+0x284>
 8005248:	e012      	b.n	8005270 <UART_SetConfig+0x29c>
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	d006      	beq.n	800525e <UART_SetConfig+0x28a>
 8005250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005254:	d009      	beq.n	800526a <UART_SetConfig+0x296>
 8005256:	e00b      	b.n	8005270 <UART_SetConfig+0x29c>
 8005258:	2300      	movs	r3, #0
 800525a:	76fb      	strb	r3, [r7, #27]
 800525c:	e00e      	b.n	800527c <UART_SetConfig+0x2a8>
 800525e:	2302      	movs	r3, #2
 8005260:	76fb      	strb	r3, [r7, #27]
 8005262:	e00b      	b.n	800527c <UART_SetConfig+0x2a8>
 8005264:	2304      	movs	r3, #4
 8005266:	76fb      	strb	r3, [r7, #27]
 8005268:	e008      	b.n	800527c <UART_SetConfig+0x2a8>
 800526a:	2308      	movs	r3, #8
 800526c:	76fb      	strb	r3, [r7, #27]
 800526e:	e005      	b.n	800527c <UART_SetConfig+0x2a8>
 8005270:	2310      	movs	r3, #16
 8005272:	76fb      	strb	r3, [r7, #27]
 8005274:	bf00      	nop
 8005276:	e001      	b.n	800527c <UART_SetConfig+0x2a8>
 8005278:	2310      	movs	r3, #16
 800527a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <UART_SetConfig+0x300>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f040 80a1 	bne.w	80053ca <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005288:	7efb      	ldrb	r3, [r7, #27]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d836      	bhi.n	80052fc <UART_SetConfig+0x328>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0x2c0>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052b9 	.word	0x080052b9
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052fd 	.word	0x080052fd
 80052a4:	080052c7 	.word	0x080052c7
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	080052fd 	.word	0x080052fd
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	080052f5 	.word	0x080052f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b8:	f7fe fcaa 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 80052bc:	6178      	str	r0, [r7, #20]
        break;
 80052be:	e022      	b.n	8005306 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <UART_SetConfig+0x31c>)
 80052c2:	617b      	str	r3, [r7, #20]
        break;
 80052c4:	e01f      	b.n	8005306 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7fe fc0d 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 80052ca:	6178      	str	r0, [r7, #20]
        break;
 80052cc:	e01b      	b.n	8005306 <UART_SetConfig+0x332>
 80052ce:	bf00      	nop
 80052d0:	cfff69f3 	.word	0xcfff69f3
 80052d4:	40008000 	.word	0x40008000
 80052d8:	40013800 	.word	0x40013800
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40004400 	.word	0x40004400
 80052e4:	40004800 	.word	0x40004800
 80052e8:	40004c00 	.word	0x40004c00
 80052ec:	40005000 	.word	0x40005000
 80052f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f8:	617b      	str	r3, [r7, #20]
        break;
 80052fa:	e004      	b.n	8005306 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	76bb      	strb	r3, [r7, #26]
        break;
 8005304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 811d 	beq.w	8005548 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	4a97      	ldr	r2, [pc, #604]	; (8005570 <UART_SetConfig+0x59c>)
 8005314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005318:	461a      	mov	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005320:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	d305      	bcc.n	800533e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d902      	bls.n	8005344 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	76bb      	strb	r3, [r7, #26]
 8005342:	e101      	b.n	8005548 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4618      	mov	r0, r3
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	4a87      	ldr	r2, [pc, #540]	; (8005570 <UART_SetConfig+0x59c>)
 8005352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	461a      	mov	r2, r3
 800535e:	4623      	mov	r3, r4
 8005360:	f7fa ffa6 	bl	80002b0 <__aeabi_uldivmod>
 8005364:	4603      	mov	r3, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4619      	mov	r1, r3
 800536a:	4622      	mov	r2, r4
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	f04f 0400 	mov.w	r4, #0
 8005374:	0214      	lsls	r4, r2, #8
 8005376:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800537a:	020b      	lsls	r3, r1, #8
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6852      	ldr	r2, [r2, #4]
 8005380:	0852      	lsrs	r2, r2, #1
 8005382:	4611      	mov	r1, r2
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	eb13 0b01 	adds.w	fp, r3, r1
 800538c:	eb44 0c02 	adc.w	ip, r4, r2
 8005390:	4658      	mov	r0, fp
 8005392:	4661      	mov	r1, ip
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	f7fa ff86 	bl	80002b0 <__aeabi_uldivmod>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b0:	d308      	bcc.n	80053c4 <UART_SetConfig+0x3f0>
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b8:	d204      	bcs.n	80053c4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e0c1      	b.n	8005548 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	76bb      	strb	r3, [r7, #26]
 80053c8:	e0be      	b.n	8005548 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d2:	d164      	bne.n	800549e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80053d4:	7efb      	ldrb	r3, [r7, #27]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d827      	bhi.n	800542a <UART_SetConfig+0x456>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x40c>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	0800542b 	.word	0x0800542b
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	08005423 	.word	0x08005423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fe fc04 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8005408:	6178      	str	r0, [r7, #20]
        break;
 800540a:	e013      	b.n	8005434 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7fe fc16 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 8005410:	6178      	str	r0, [r7, #20]
        break;
 8005412:	e00f      	b.n	8005434 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005414:	4b57      	ldr	r3, [pc, #348]	; (8005574 <UART_SetConfig+0x5a0>)
 8005416:	617b      	str	r3, [r7, #20]
        break;
 8005418:	e00c      	b.n	8005434 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541a:	f7fe fb63 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 800541e:	6178      	str	r0, [r7, #20]
        break;
 8005420:	e008      	b.n	8005434 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005426:	617b      	str	r3, [r7, #20]
        break;
 8005428:	e004      	b.n	8005434 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	76bb      	strb	r3, [r7, #26]
        break;
 8005432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8086 	beq.w	8005548 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	4a4b      	ldr	r2, [pc, #300]	; (8005570 <UART_SetConfig+0x59c>)
 8005442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005446:	461a      	mov	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	fbb3 f3f2 	udiv	r3, r3, r2
 800544e:	005a      	lsls	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	b29b      	uxth	r3, r3
 8005462:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d916      	bls.n	8005498 <UART_SetConfig+0x4c4>
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d212      	bcs.n	8005498 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f023 030f 	bic.w	r3, r3, #15
 800547a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	b29b      	uxth	r3, r3
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	b29a      	uxth	r2, r3
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	4313      	orrs	r3, r2
 800548c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	89fa      	ldrh	r2, [r7, #14]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	e057      	b.n	8005548 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	76bb      	strb	r3, [r7, #26]
 800549c:	e054      	b.n	8005548 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549e:	7efb      	ldrb	r3, [r7, #27]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d828      	bhi.n	80054f6 <UART_SetConfig+0x522>
 80054a4:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x4d8>)
 80054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054aa:	bf00      	nop
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fb9e 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 80054d4:	6178      	str	r0, [r7, #20]
        break;
 80054d6:	e013      	b.n	8005500 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe fbb0 	bl	8003c3c <HAL_RCC_GetPCLK2Freq>
 80054dc:	6178      	str	r0, [r7, #20]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <UART_SetConfig+0x5a0>)
 80054e2:	617b      	str	r3, [r7, #20]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fafd 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 80054ea:	6178      	str	r0, [r7, #20]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	617b      	str	r3, [r7, #20]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	76bb      	strb	r3, [r7, #26]
        break;
 80054fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	4a19      	ldr	r2, [pc, #100]	; (8005570 <UART_SetConfig+0x59c>)
 800550c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005510:	461a      	mov	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	fbb3 f2f2 	udiv	r2, r3, r2
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	085b      	lsrs	r3, r3, #1
 800551e:	441a      	add	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	b29b      	uxth	r3, r3
 800552a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d908      	bls.n	8005544 <UART_SetConfig+0x570>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005538:	d204      	bcs.n	8005544 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	e001      	b.n	8005548 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005564:	7ebb      	ldrb	r3, [r7, #26]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005570:	080078fc 	.word	0x080078fc
 8005574:	00f42400 	.word	0x00f42400

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005676:	d10a      	bne.n	800568e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80056cc:	f7fc fa8e 	bl	8001bec <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d10e      	bne.n	80056fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f82c 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e022      	b.n	8005744 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b04      	cmp	r3, #4
 800570a:	d10e      	bne.n	800572a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f816 	bl	800574c <UART_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00c      	b.n	8005744 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575c:	e062      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005764:	d05e      	beq.n	8005824 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fc fa41 	bl	8001bec <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <UART_WaitOnFlagUntilTimeout+0x30>
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11d      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800578a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e045      	b.n	8005844 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02e      	beq.n	8005824 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d126      	bne.n	8005824 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057ee:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e00f      	b.n	8005844 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4013      	ands	r3, r2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	429a      	cmp	r2, r3
 8005840:	d08d      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_UARTEx_DisableFifoMode+0x16>
 800585e:	2302      	movs	r3, #2
 8005860:	e027      	b.n	80058b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2224      	movs	r2, #36	; 0x24
 800586e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005890:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e02d      	b.n	8005932 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2224      	movs	r2, #36	; 0x24
 80058e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f850 	bl	80059b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800594e:	2302      	movs	r3, #2
 8005950:	e02d      	b.n	80059ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2224      	movs	r2, #36	; 0x24
 800595e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	430a      	orrs	r2, r1
 800598c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f812 	bl	80059b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80059c0:	4a2f      	ldr	r2, [pc, #188]	; (8005a80 <UARTEx_SetNbDataToProcess+0xc8>)
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80059ce:	4a2d      	ldr	r2, [pc, #180]	; (8005a84 <UARTEx_SetNbDataToProcess+0xcc>)
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059f4:	e03d      	b.n	8005a72 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059f6:	2308      	movs	r3, #8
 80059f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059fa:	2308      	movs	r3, #8
 80059fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	0e5b      	lsrs	r3, r3, #25
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	0f5b      	lsrs	r3, r3, #29
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005a1e:	7fbb      	ldrb	r3, [r7, #30]
 8005a20:	7f3a      	ldrb	r2, [r7, #28]
 8005a22:	f107 0120 	add.w	r1, r7, #32
 8005a26:	440a      	add	r2, r1
 8005a28:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	7f3a      	ldrb	r2, [r7, #28]
 8005a32:	f107 0120 	add.w	r1, r7, #32
 8005a36:	440a      	add	r2, r1
 8005a38:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
 8005a4a:	7f7a      	ldrb	r2, [r7, #29]
 8005a4c:	f107 0120 	add.w	r1, r7, #32
 8005a50:	440a      	add	r2, r1
 8005a52:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	7f7a      	ldrb	r2, [r7, #29]
 8005a5c:	f107 0120 	add.w	r1, r7, #32
 8005a60:	440a      	add	r2, r1
 8005a62:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a72:	bf00      	nop
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	0800789c 	.word	0x0800789c
 8005a84:	080078a4 	.word	0x080078a4

08005a88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a9a:	2b84      	cmp	r3, #132	; 0x84
 8005a9c:	d005      	beq.n	8005aaa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3303      	adds	r3, #3
 8005aa8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005abc:	f000 fada 	bl	8006074 <vTaskStartScheduler>
  
  return osOK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac8:	b089      	sub	sp, #36	; 0x24
 8005aca:	af04      	add	r7, sp, #16
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <osThreadCreate+0x54>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01c      	beq.n	8005b1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685c      	ldr	r4, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681d      	ldr	r5, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691e      	ldr	r6, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffc8 	bl	8005a88 <makeFreeRtosPriority>
 8005af8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b02:	9202      	str	r2, [sp, #8]
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	9100      	str	r1, [sp, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 f8ed 	bl	8005cee <xTaskCreateStatic>
 8005b14:	4603      	mov	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e01c      	b.n	8005b54 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685c      	ldr	r4, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b26:	b29e      	uxth	r6, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff ffaa 	bl	8005a88 <makeFreeRtosPriority>
 8005b34:	4602      	mov	r2, r0
 8005b36:	f107 030c 	add.w	r3, r7, #12
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	4632      	mov	r2, r6
 8005b42:	4629      	mov	r1, r5
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 f92c 	bl	8005da2 <xTaskCreate>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d001      	beq.n	8005b54 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b50:	2300      	movs	r3, #0
 8005b52:	e000      	b.n	8005b56 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b54:	68fb      	ldr	r3, [r7, #12]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b5e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <osDelay+0x16>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e000      	b.n	8005b76 <osDelay+0x18>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fa48 	bl	800600c <vTaskDelay>
  
  return osOK;
 8005b7c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f103 0208 	add.w	r2, r3, #8
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f103 0208 	add.w	r2, r3, #8
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3e:	d103      	bne.n	8005c48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e00c      	b.n	8005c62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e002      	b.n	8005c56 <vListInsert+0x2e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d2f6      	bcs.n	8005c50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6892      	ldr	r2, [r2, #8]
 8005cb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6852      	ldr	r2, [r2, #4]
 8005cba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d103      	bne.n	8005cce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08e      	sub	sp, #56	; 0x38
 8005cf2:	af04      	add	r7, sp, #16
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	e7fe      	b.n	8005d14 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <xTaskCreateStatic+0x42>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	e7fe      	b.n	8005d2e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d30:	2354      	movs	r3, #84	; 0x54
 8005d32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b54      	cmp	r3, #84	; 0x54
 8005d38:	d009      	beq.n	8005d4e <xTaskCreateStatic+0x60>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e7fe      	b.n	8005d4c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01e      	beq.n	8005d94 <xTaskCreateStatic+0xa6>
 8005d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2202      	movs	r2, #2
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9303      	str	r3, [sp, #12]
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	9302      	str	r3, [sp, #8]
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	9301      	str	r3, [sp, #4]
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f850 	bl	8005e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d8e:	f000 f8d3 	bl	8005f38 <prvAddNewTaskToReadyList>
 8005d92:	e001      	b.n	8005d98 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d98:	697b      	ldr	r3, [r7, #20]
	}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3728      	adds	r7, #40	; 0x28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b08c      	sub	sp, #48	; 0x30
 8005da6:	af04      	add	r7, sp, #16
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 feb4 	bl	8006b24 <pvPortMalloc>
 8005dbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dc4:	2054      	movs	r0, #84	; 0x54
 8005dc6:	f000 fead 	bl	8006b24 <pvPortMalloc>
 8005dca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8005dd8:	e005      	b.n	8005de6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dda:	6978      	ldr	r0, [r7, #20]
 8005ddc:	f000 ff64 	bl	8006ca8 <vPortFree>
 8005de0:	e001      	b.n	8005de6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d017      	beq.n	8005e1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005df4:	88fa      	ldrh	r2, [r7, #6]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9303      	str	r3, [sp, #12]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f80e 	bl	8005e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e10:	69f8      	ldr	r0, [r7, #28]
 8005e12:	f000 f891 	bl	8005f38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e16:	2301      	movs	r3, #1
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e002      	b.n	8005e22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e22:	69bb      	ldr	r3, [r7, #24]
	}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3720      	adds	r7, #32
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e44:	3b01      	subs	r3, #1
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <prvInitialiseNewTask+0x46>
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e7fe      	b.n	8005e70 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01f      	beq.n	8005eb8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e012      	b.n	8005ea4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	7819      	ldrb	r1, [r3, #0]
 8005e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3334      	adds	r3, #52	; 0x34
 8005e8e:	460a      	mov	r2, r1
 8005e90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d006      	beq.n	8005eac <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d9e9      	bls.n	8005e7e <prvInitialiseNewTask+0x52>
 8005eaa:	e000      	b.n	8005eae <prvInitialiseNewTask+0x82>
			{
				break;
 8005eac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb6:	e003      	b.n	8005ec0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	2b06      	cmp	r3, #6
 8005ec4:	d901      	bls.n	8005eca <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ec6:	2306      	movs	r3, #6
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fe70 	bl	8005bc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	3318      	adds	r3, #24
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fe6b 	bl	8005bc6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	f1c3 0207 	rsb	r2, r3, #7
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2200      	movs	r2, #0
 8005f0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	69b8      	ldr	r0, [r7, #24]
 8005f1a:	f000 fbfd 	bl	8006718 <pxPortInitialiseStack>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f30:	bf00      	nop
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f40:	f000 fd14 	bl	800696c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f44:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <prvAddNewTaskToReadyList+0xb8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <prvAddNewTaskToReadyList+0xb8>)
 8005f4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f4e:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <prvAddNewTaskToReadyList+0xbc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f56:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <prvAddNewTaskToReadyList+0xbc>)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f5c:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <prvAddNewTaskToReadyList+0xb8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d110      	bne.n	8005f86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f64:	f000 fab8 	bl	80064d8 <prvInitialiseTaskLists>
 8005f68:	e00d      	b.n	8005f86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f6a:	4b23      	ldr	r3, [pc, #140]	; (8005ff8 <prvAddNewTaskToReadyList+0xc0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f72:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <prvAddNewTaskToReadyList+0xbc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d802      	bhi.n	8005f86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f80:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <prvAddNewTaskToReadyList+0xbc>)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f86:	4b1d      	ldr	r3, [pc, #116]	; (8005ffc <prvAddNewTaskToReadyList+0xc4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <prvAddNewTaskToReadyList+0xc4>)
 8005f8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	2201      	movs	r2, #1
 8005f96:	409a      	lsls	r2, r3
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <prvAddNewTaskToReadyList+0xc8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <prvAddNewTaskToReadyList+0xc8>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <prvAddNewTaskToReadyList+0xcc>)
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7ff fe11 	bl	8005be0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fbe:	f000 fd03 	bl	80069c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <prvAddNewTaskToReadyList+0xc0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00e      	beq.n	8005fe8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <prvAddNewTaskToReadyList+0xbc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d207      	bcs.n	8005fe8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <prvAddNewTaskToReadyList+0xd0>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20000458 	.word	0x20000458
 8005ff4:	20000358 	.word	0x20000358
 8005ff8:	20000464 	.word	0x20000464
 8005ffc:	20000474 	.word	0x20000474
 8006000:	20000460 	.word	0x20000460
 8006004:	2000035c 	.word	0x2000035c
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <vTaskDelay+0x60>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <vTaskDelay+0x2e>
 8006026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	e7fe      	b.n	8006038 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800603a:	f000 f879 	bl	8006130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb03 	bl	800664c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006046:	f000 f881 	bl	800614c <xTaskResumeAll>
 800604a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <vTaskDelay+0x64>)
 8006054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000480 	.word	0x20000480
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006082:	463a      	mov	r2, r7
 8006084:	1d39      	adds	r1, r7, #4
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4618      	mov	r0, r3
 800608c:	f7fa fa90 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	9202      	str	r2, [sp, #8]
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	2300      	movs	r3, #0
 80060a0:	460a      	mov	r2, r1
 80060a2:	491d      	ldr	r1, [pc, #116]	; (8006118 <vTaskStartScheduler+0xa4>)
 80060a4:	481d      	ldr	r0, [pc, #116]	; (800611c <vTaskStartScheduler+0xa8>)
 80060a6:	f7ff fe22 	bl	8005cee <xTaskCreateStatic>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <vTaskStartScheduler+0xac>)
 80060ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <vTaskStartScheduler+0xac>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e001      	b.n	80060c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d115      	bne.n	80060f4 <vTaskStartScheduler+0x80>
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060da:	4b12      	ldr	r3, [pc, #72]	; (8006124 <vTaskStartScheduler+0xb0>)
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <vTaskStartScheduler+0xb4>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060e8:	4b10      	ldr	r3, [pc, #64]	; (800612c <vTaskStartScheduler+0xb8>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060ee:	f000 fb9f 	bl	8006830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060f2:	e00d      	b.n	8006110 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fa:	d109      	bne.n	8006110 <vTaskStartScheduler+0x9c>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e7fe      	b.n	800610e <vTaskStartScheduler+0x9a>
}
 8006110:	bf00      	nop
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	080078ac 	.word	0x080078ac
 800611c:	080064a9 	.word	0x080064a9
 8006120:	2000047c 	.word	0x2000047c
 8006124:	20000478 	.word	0x20000478
 8006128:	20000464 	.word	0x20000464
 800612c:	2000045c 	.word	0x2000045c

08006130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <vTaskSuspendAll+0x18>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a03      	ldr	r2, [pc, #12]	; (8006148 <vTaskSuspendAll+0x18>)
 800613c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800613e:	bf00      	nop
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	20000480 	.word	0x20000480

0800614c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800615a:	4b41      	ldr	r3, [pc, #260]	; (8006260 <xTaskResumeAll+0x114>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <xTaskResumeAll+0x2a>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	e7fe      	b.n	8006174 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006176:	f000 fbf9 	bl	800696c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800617a:	4b39      	ldr	r3, [pc, #228]	; (8006260 <xTaskResumeAll+0x114>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3b01      	subs	r3, #1
 8006180:	4a37      	ldr	r2, [pc, #220]	; (8006260 <xTaskResumeAll+0x114>)
 8006182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006184:	4b36      	ldr	r3, [pc, #216]	; (8006260 <xTaskResumeAll+0x114>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d161      	bne.n	8006250 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <xTaskResumeAll+0x118>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05d      	beq.n	8006250 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006194:	e02e      	b.n	80061f4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006196:	4b34      	ldr	r3, [pc, #208]	; (8006268 <xTaskResumeAll+0x11c>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3318      	adds	r3, #24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fd79 	bl	8005c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff fd74 	bl	8005c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	2201      	movs	r2, #1
 80061b8:	409a      	lsls	r2, r3
 80061ba:	4b2c      	ldr	r3, [pc, #176]	; (800626c <xTaskResumeAll+0x120>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4313      	orrs	r3, r2
 80061c0:	4a2a      	ldr	r2, [pc, #168]	; (800626c <xTaskResumeAll+0x120>)
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4a27      	ldr	r2, [pc, #156]	; (8006270 <xTaskResumeAll+0x124>)
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f7ff fd00 	bl	8005be0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e4:	4b23      	ldr	r3, [pc, #140]	; (8006274 <xTaskResumeAll+0x128>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d302      	bcc.n	80061f4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80061ee:	4b22      	ldr	r3, [pc, #136]	; (8006278 <xTaskResumeAll+0x12c>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f4:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <xTaskResumeAll+0x11c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1cc      	bne.n	8006196 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006202:	f000 fa03 	bl	800660c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006206:	4b1d      	ldr	r3, [pc, #116]	; (800627c <xTaskResumeAll+0x130>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006212:	f000 f837 	bl	8006284 <xTaskIncrementTick>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <xTaskResumeAll+0x12c>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3b01      	subs	r3, #1
 8006226:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f1      	bne.n	8006212 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <xTaskResumeAll+0x130>)
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006234:	4b10      	ldr	r3, [pc, #64]	; (8006278 <xTaskResumeAll+0x12c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006240:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <xTaskResumeAll+0x134>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f000 fbba 	bl	80069c8 <vPortExitCritical>

	return xAlreadyYielded;
 8006254:	68bb      	ldr	r3, [r7, #8]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000480 	.word	0x20000480
 8006264:	20000458 	.word	0x20000458
 8006268:	20000418 	.word	0x20000418
 800626c:	20000460 	.word	0x20000460
 8006270:	2000035c 	.word	0x2000035c
 8006274:	20000358 	.word	0x20000358
 8006278:	2000046c 	.word	0x2000046c
 800627c:	20000468 	.word	0x20000468
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628e:	4b4e      	ldr	r3, [pc, #312]	; (80063c8 <xTaskIncrementTick+0x144>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8087 	bne.w	80063a6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006298:	4b4c      	ldr	r3, [pc, #304]	; (80063cc <xTaskIncrementTick+0x148>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062a0:	4a4a      	ldr	r2, [pc, #296]	; (80063cc <xTaskIncrementTick+0x148>)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11f      	bne.n	80062ec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062ac:	4b48      	ldr	r3, [pc, #288]	; (80063d0 <xTaskIncrementTick+0x14c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d009      	beq.n	80062ca <xTaskIncrementTick+0x46>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	e7fe      	b.n	80062c8 <xTaskIncrementTick+0x44>
 80062ca:	4b41      	ldr	r3, [pc, #260]	; (80063d0 <xTaskIncrementTick+0x14c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	4b40      	ldr	r3, [pc, #256]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3e      	ldr	r2, [pc, #248]	; (80063d0 <xTaskIncrementTick+0x14c>)
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4a3e      	ldr	r2, [pc, #248]	; (80063d4 <xTaskIncrementTick+0x150>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4b3e      	ldr	r3, [pc, #248]	; (80063d8 <xTaskIncrementTick+0x154>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	4a3c      	ldr	r2, [pc, #240]	; (80063d8 <xTaskIncrementTick+0x154>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	f000 f990 	bl	800660c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062ec:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <xTaskIncrementTick+0x158>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d348      	bcc.n	8006388 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <xTaskIncrementTick+0x14c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d104      	bne.n	800630a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006300:	4b36      	ldr	r3, [pc, #216]	; (80063dc <xTaskIncrementTick+0x158>)
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006306:	601a      	str	r2, [r3, #0]
					break;
 8006308:	e03e      	b.n	8006388 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <xTaskIncrementTick+0x14c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	d203      	bcs.n	800632a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006322:	4a2e      	ldr	r2, [pc, #184]	; (80063dc <xTaskIncrementTick+0x158>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006328:	e02e      	b.n	8006388 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3304      	adds	r3, #4
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff fcb3 	bl	8005c9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3318      	adds	r3, #24
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff fcaa 	bl	8005c9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	2201      	movs	r2, #1
 800634c:	409a      	lsls	r2, r3
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <xTaskIncrementTick+0x15c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4313      	orrs	r3, r2
 8006354:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <xTaskIncrementTick+0x15c>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4a1f      	ldr	r2, [pc, #124]	; (80063e4 <xTaskIncrementTick+0x160>)
 8006366:	441a      	add	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f7ff fc36 	bl	8005be0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <xTaskIncrementTick+0x164>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	429a      	cmp	r2, r3
 8006380:	d3b9      	bcc.n	80062f6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006386:	e7b6      	b.n	80062f6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006388:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <xTaskIncrementTick+0x164>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4915      	ldr	r1, [pc, #84]	; (80063e4 <xTaskIncrementTick+0x160>)
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	440b      	add	r3, r1
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d907      	bls.n	80063b0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e004      	b.n	80063b0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <xTaskIncrementTick+0x168>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	4a0f      	ldr	r2, [pc, #60]	; (80063ec <xTaskIncrementTick+0x168>)
 80063ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063b0:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <xTaskIncrementTick+0x16c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063bc:	697b      	ldr	r3, [r7, #20]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000480 	.word	0x20000480
 80063cc:	2000045c 	.word	0x2000045c
 80063d0:	20000410 	.word	0x20000410
 80063d4:	20000414 	.word	0x20000414
 80063d8:	20000470 	.word	0x20000470
 80063dc:	20000478 	.word	0x20000478
 80063e0:	20000460 	.word	0x20000460
 80063e4:	2000035c 	.word	0x2000035c
 80063e8:	20000358 	.word	0x20000358
 80063ec:	20000468 	.word	0x20000468
 80063f0:	2000046c 	.word	0x2000046c

080063f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063fa:	4b26      	ldr	r3, [pc, #152]	; (8006494 <vTaskSwitchContext+0xa0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <vTaskSwitchContext+0xa4>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006408:	e03e      	b.n	8006488 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800640a:	4b23      	ldr	r3, [pc, #140]	; (8006498 <vTaskSwitchContext+0xa4>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006410:	4b22      	ldr	r3, [pc, #136]	; (800649c <vTaskSwitchContext+0xa8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800641e:	7afb      	ldrb	r3, [r7, #11]
 8006420:	f1c3 031f 	rsb	r3, r3, #31
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	491e      	ldr	r1, [pc, #120]	; (80064a0 <vTaskSwitchContext+0xac>)
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <vTaskSwitchContext+0x5a>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	607b      	str	r3, [r7, #4]
 800644c:	e7fe      	b.n	800644c <vTaskSwitchContext+0x58>
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <vTaskSwitchContext+0xac>)
 800645a:	4413      	add	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	3308      	adds	r3, #8
 8006470:	429a      	cmp	r2, r3
 8006472:	d104      	bne.n	800647e <vTaskSwitchContext+0x8a>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	605a      	str	r2, [r3, #4]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4a07      	ldr	r2, [pc, #28]	; (80064a4 <vTaskSwitchContext+0xb0>)
 8006486:	6013      	str	r3, [r2, #0]
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000480 	.word	0x20000480
 8006498:	2000046c 	.word	0x2000046c
 800649c:	20000460 	.word	0x20000460
 80064a0:	2000035c 	.word	0x2000035c
 80064a4:	20000358 	.word	0x20000358

080064a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064b0:	f000 f852 	bl	8006558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <prvIdleTask+0x28>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d9f9      	bls.n	80064b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <prvIdleTask+0x2c>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064cc:	e7f0      	b.n	80064b0 <prvIdleTask+0x8>
 80064ce:	bf00      	nop
 80064d0:	2000035c 	.word	0x2000035c
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	e00c      	b.n	80064fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a12      	ldr	r2, [pc, #72]	; (8006538 <prvInitialiseTaskLists+0x60>)
 80064f0:	4413      	add	r3, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fb47 	bl	8005b86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3301      	adds	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b06      	cmp	r3, #6
 8006502:	d9ef      	bls.n	80064e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006504:	480d      	ldr	r0, [pc, #52]	; (800653c <prvInitialiseTaskLists+0x64>)
 8006506:	f7ff fb3e 	bl	8005b86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800650a:	480d      	ldr	r0, [pc, #52]	; (8006540 <prvInitialiseTaskLists+0x68>)
 800650c:	f7ff fb3b 	bl	8005b86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006510:	480c      	ldr	r0, [pc, #48]	; (8006544 <prvInitialiseTaskLists+0x6c>)
 8006512:	f7ff fb38 	bl	8005b86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006516:	480c      	ldr	r0, [pc, #48]	; (8006548 <prvInitialiseTaskLists+0x70>)
 8006518:	f7ff fb35 	bl	8005b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800651c:	480b      	ldr	r0, [pc, #44]	; (800654c <prvInitialiseTaskLists+0x74>)
 800651e:	f7ff fb32 	bl	8005b86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <prvInitialiseTaskLists+0x78>)
 8006524:	4a05      	ldr	r2, [pc, #20]	; (800653c <prvInitialiseTaskLists+0x64>)
 8006526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006528:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvInitialiseTaskLists+0x7c>)
 800652a:	4a05      	ldr	r2, [pc, #20]	; (8006540 <prvInitialiseTaskLists+0x68>)
 800652c:	601a      	str	r2, [r3, #0]
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	2000035c 	.word	0x2000035c
 800653c:	200003e8 	.word	0x200003e8
 8006540:	200003fc 	.word	0x200003fc
 8006544:	20000418 	.word	0x20000418
 8006548:	2000042c 	.word	0x2000042c
 800654c:	20000444 	.word	0x20000444
 8006550:	20000410 	.word	0x20000410
 8006554:	20000414 	.word	0x20000414

08006558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800655e:	e019      	b.n	8006594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006560:	f000 fa04 	bl	800696c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <prvCheckTasksWaitingTermination+0x4c>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3304      	adds	r3, #4
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fb92 	bl	8005c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvCheckTasksWaitingTermination+0x50>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3b01      	subs	r3, #1
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <prvCheckTasksWaitingTermination+0x50>)
 800657e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <prvCheckTasksWaitingTermination+0x54>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3b01      	subs	r3, #1
 8006586:	4a09      	ldr	r2, [pc, #36]	; (80065ac <prvCheckTasksWaitingTermination+0x54>)
 8006588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800658a:	f000 fa1d 	bl	80069c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f80e 	bl	80065b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <prvCheckTasksWaitingTermination+0x54>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e1      	bne.n	8006560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	2000042c 	.word	0x2000042c
 80065a8:	20000458 	.word	0x20000458
 80065ac:	20000440 	.word	0x20000440

080065b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d108      	bne.n	80065d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fb6e 	bl	8006ca8 <vPortFree>
				vPortFree( pxTCB );
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fb6b 	bl	8006ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065d2:	e017      	b.n	8006604 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d103      	bne.n	80065e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb62 	bl	8006ca8 <vPortFree>
	}
 80065e4:	e00e      	b.n	8006604 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d009      	beq.n	8006604 <prvDeleteTCB+0x54>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e7fe      	b.n	8006602 <prvDeleteTCB+0x52>
	}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <prvResetNextTaskUnblockTime+0x38>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <prvResetNextTaskUnblockTime+0x3c>)
 800661e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006622:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006624:	e008      	b.n	8006638 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <prvResetNextTaskUnblockTime+0x38>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <prvResetNextTaskUnblockTime+0x3c>)
 8006636:	6013      	str	r3, [r2, #0]
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	20000410 	.word	0x20000410
 8006648:	20000478 	.word	0x20000478

0800664c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006656:	4b29      	ldr	r3, [pc, #164]	; (80066fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665c:	4b28      	ldr	r3, [pc, #160]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3304      	adds	r3, #4
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff fb19 	bl	8005c9a <uxListRemove>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10b      	bne.n	8006686 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	2201      	movs	r2, #1
 8006676:	fa02 f303 	lsl.w	r3, r2, r3
 800667a:	43da      	mvns	r2, r3
 800667c:	4b21      	ldr	r3, [pc, #132]	; (8006704 <prvAddCurrentTaskToDelayedList+0xb8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4013      	ands	r3, r2
 8006682:	4a20      	ldr	r2, [pc, #128]	; (8006704 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006684:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668c:	d10a      	bne.n	80066a4 <prvAddCurrentTaskToDelayedList+0x58>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	481a      	ldr	r0, [pc, #104]	; (8006708 <prvAddCurrentTaskToDelayedList+0xbc>)
 800669e:	f7ff fa9f 	bl	8005be0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066a2:	e026      	b.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d209      	bcs.n	80066d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066bc:	4b13      	ldr	r3, [pc, #76]	; (800670c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f7ff faad 	bl	8005c28 <vListInsert>
}
 80066ce:	e010      	b.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <prvAddCurrentTaskToDelayedList+0xc4>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f7ff faa3 	bl	8005c28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066e2:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d202      	bcs.n	80066f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066ec:	4a09      	ldr	r2, [pc, #36]	; (8006714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	2000045c 	.word	0x2000045c
 8006700:	20000358 	.word	0x20000358
 8006704:	20000460 	.word	0x20000460
 8006708:	20000444 	.word	0x20000444
 800670c:	20000414 	.word	0x20000414
 8006710:	20000410 	.word	0x20000410
 8006714:	20000478 	.word	0x20000478

08006718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3b04      	subs	r3, #4
 8006728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b04      	subs	r3, #4
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3b04      	subs	r3, #4
 8006746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006748:	4a0c      	ldr	r2, [pc, #48]	; (800677c <pxPortInitialiseStack+0x64>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b14      	subs	r3, #20
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f06f 0202 	mvn.w	r2, #2
 8006766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b20      	subs	r3, #32
 800676c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	08006781 	.word	0x08006781

08006780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <prvTaskExitError+0x50>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006792:	d009      	beq.n	80067a8 <prvTaskExitError+0x28>
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	e7fe      	b.n	80067a6 <prvTaskExitError+0x26>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ba:	bf00      	nop
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0fc      	beq.n	80067bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000068 	.word	0x20000068
	...

080067e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <pxCurrentTCBConst2>)
 80067e2:	6819      	ldr	r1, [r3, #0]
 80067e4:	6808      	ldr	r0, [r1, #0]
 80067e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	f380 8809 	msr	PSP, r0
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8811 	msr	BASEPRI, r0
 80067fa:	4770      	bx	lr
 80067fc:	f3af 8000 	nop.w

08006800 <pxCurrentTCBConst2>:
 8006800:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006808:	4808      	ldr	r0, [pc, #32]	; (800682c <prvPortStartFirstTask+0x24>)
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f380 8808 	msr	MSP, r0
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8814 	msr	CONTROL, r0
 800681a:	b662      	cpsie	i
 800681c:	b661      	cpsie	f
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	df00      	svc	0
 8006828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800682a:	bf00      	nop
 800682c:	e000ed08 	.word	0xe000ed08

08006830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <xPortStartScheduler+0x118>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a44      	ldr	r2, [pc, #272]	; (800694c <xPortStartScheduler+0x11c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d109      	bne.n	8006854 <xPortStartScheduler+0x24>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e7fe      	b.n	8006852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006854:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <xPortStartScheduler+0x118>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a3d      	ldr	r2, [pc, #244]	; (8006950 <xPortStartScheduler+0x120>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d109      	bne.n	8006872 <xPortStartScheduler+0x42>
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e7fe      	b.n	8006870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006872:	4b38      	ldr	r3, [pc, #224]	; (8006954 <xPortStartScheduler+0x124>)
 8006874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	22ff      	movs	r2, #255	; 0xff
 8006882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b30      	ldr	r3, [pc, #192]	; (8006958 <xPortStartScheduler+0x128>)
 8006898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <xPortStartScheduler+0x12c>)
 800689c:	2207      	movs	r2, #7
 800689e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a0:	e009      	b.n	80068b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80068a2:	4b2e      	ldr	r3, [pc, #184]	; (800695c <xPortStartScheduler+0x12c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <xPortStartScheduler+0x12c>)
 80068aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d0ef      	beq.n	80068a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068c2:	4b26      	ldr	r3, [pc, #152]	; (800695c <xPortStartScheduler+0x12c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f1c3 0307 	rsb	r3, r3, #7
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d009      	beq.n	80068e2 <xPortStartScheduler+0xb2>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	e7fe      	b.n	80068e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <xPortStartScheduler+0x12c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <xPortStartScheduler+0x12c>)
 80068ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <xPortStartScheduler+0x12c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f4:	4a19      	ldr	r2, [pc, #100]	; (800695c <xPortStartScheduler+0x12c>)
 80068f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <xPortStartScheduler+0x130>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a16      	ldr	r2, [pc, #88]	; (8006960 <xPortStartScheduler+0x130>)
 8006906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800690a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800690c:	4b14      	ldr	r3, [pc, #80]	; (8006960 <xPortStartScheduler+0x130>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <xPortStartScheduler+0x130>)
 8006912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006918:	f000 f8d6 	bl	8006ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <xPortStartScheduler+0x134>)
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006922:	f000 f8f5 	bl	8006b10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <xPortStartScheduler+0x138>)
 800692c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006932:	f7ff ff69 	bl	8006808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006936:	f7ff fd5d 	bl	80063f4 <vTaskSwitchContext>
	prvTaskExitError();
 800693a:	f7ff ff21 	bl	8006780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed00 	.word	0xe000ed00
 800694c:	410fc271 	.word	0x410fc271
 8006950:	410fc270 	.word	0x410fc270
 8006954:	e000e400 	.word	0xe000e400
 8006958:	20000484 	.word	0x20000484
 800695c:	20000488 	.word	0x20000488
 8006960:	e000ed20 	.word	0xe000ed20
 8006964:	20000068 	.word	0x20000068
 8006968:	e000ef34 	.word	0xe000ef34

0800696c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vPortEnterCritical+0x54>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a0d      	ldr	r2, [pc, #52]	; (80069c0 <vPortEnterCritical+0x54>)
 800698c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <vPortEnterCritical+0x54>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10e      	bne.n	80069b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <vPortEnterCritical+0x58>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <vPortEnterCritical+0x48>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	e7fe      	b.n	80069b2 <vPortEnterCritical+0x46>
	}
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000068 	.word	0x20000068
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <vPortExitCritical+0x4c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <vPortExitCritical+0x22>
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	e7fe      	b.n	80069e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortExitCritical+0x4c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <vPortExitCritical+0x4c>)
 80069f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069f4:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <vPortExitCritical+0x4c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <vPortExitCritical+0x3e>
 80069fc:	2300      	movs	r3, #0
 80069fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000068 	.word	0x20000068
	...

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7ff fcd0 	bl	80063f4 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa0:	f7ff fbf0 	bl	8006284 <xTaskIncrementTick>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <SysTick_Handler+0x3c>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <vPortSetupTimerInterrupt+0x34>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x38>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vPortSetupTimerInterrupt+0x3c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x40>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	099b      	lsrs	r3, r3, #6
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <vPortSetupTimerInterrupt+0x44>)
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <vPortSetupTimerInterrupt+0x34>)
 8006aec:	2207      	movs	r2, #7
 8006aee:	601a      	str	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e010 	.word	0xe000e010
 8006b00:	e000e018 	.word	0xe000e018
 8006b04:	2000005c 	.word	0x2000005c
 8006b08:	10624dd3 	.word	0x10624dd3
 8006b0c:	e000e014 	.word	0xe000e014

08006b10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b20 <vPortEnableVFP+0x10>
 8006b14:	6801      	ldr	r1, [r0, #0]
 8006b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1a:	6001      	str	r1, [r0, #0]
 8006b1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b1e:	bf00      	nop
 8006b20:	e000ed88 	.word	0xe000ed88

08006b24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b30:	f7ff fafe 	bl	8006130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b34:	4b57      	ldr	r3, [pc, #348]	; (8006c94 <pvPortMalloc+0x170>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b3c:	f000 f90c 	bl	8006d58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b40:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <pvPortMalloc+0x174>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f040 808c 	bne.w	8006c66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01c      	beq.n	8006b8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006b54:	2208      	movs	r2, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f023 0307 	bic.w	r3, r3, #7
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <pvPortMalloc+0x6a>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e7fe      	b.n	8006b8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d068      	beq.n	8006c66 <pvPortMalloc+0x142>
 8006b94:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <pvPortMalloc+0x178>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d863      	bhi.n	8006c66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b9e:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <pvPortMalloc+0x17c>)
 8006ba0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ba2:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <pvPortMalloc+0x17c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ba8:	e004      	b.n	8006bb4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d903      	bls.n	8006bc6 <pvPortMalloc+0xa2>
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f1      	bne.n	8006baa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bc6:	4b33      	ldr	r3, [pc, #204]	; (8006c94 <pvPortMalloc+0x170>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d04a      	beq.n	8006c66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	4413      	add	r3, r2
 8006bd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	1ad2      	subs	r2, r2, r3
 8006bea:	2308      	movs	r3, #8
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d91e      	bls.n	8006c30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <pvPortMalloc+0xf4>
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	e7fe      	b.n	8006c16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c2a:	69b8      	ldr	r0, [r7, #24]
 8006c2c:	f000 f8f6 	bl	8006e1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <pvPortMalloc+0x178>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <pvPortMalloc+0x178>)
 8006c3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c3e:	4b17      	ldr	r3, [pc, #92]	; (8006c9c <pvPortMalloc+0x178>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b18      	ldr	r3, [pc, #96]	; (8006ca4 <pvPortMalloc+0x180>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d203      	bcs.n	8006c52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c4a:	4b14      	ldr	r3, [pc, #80]	; (8006c9c <pvPortMalloc+0x178>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <pvPortMalloc+0x180>)
 8006c50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <pvPortMalloc+0x174>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c66:	f7ff fa71 	bl	800614c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <pvPortMalloc+0x164>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e7fe      	b.n	8006c86 <pvPortMalloc+0x162>
	return pvReturn;
 8006c88:	69fb      	ldr	r3, [r7, #28]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000104c 	.word	0x2000104c
 8006c98:	20001058 	.word	0x20001058
 8006c9c:	20001050 	.word	0x20001050
 8006ca0:	20001044 	.word	0x20001044
 8006ca4:	20001054 	.word	0x20001054

08006ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d046      	beq.n	8006d48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cba:	2308      	movs	r3, #8
 8006cbc:	425b      	negs	r3, r3
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <vPortFree+0xa8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <vPortFree+0x42>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e7fe      	b.n	8006ce8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <vPortFree+0x5e>
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	e7fe      	b.n	8006d04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <vPortFree+0xa8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d115      	bne.n	8006d48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <vPortFree+0xa8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	43db      	mvns	r3, r3
 8006d26:	401a      	ands	r2, r3
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d2c:	f7ff fa00 	bl	8006130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <vPortFree+0xac>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4413      	add	r3, r2
 8006d3a:	4a06      	ldr	r2, [pc, #24]	; (8006d54 <vPortFree+0xac>)
 8006d3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f000 f86c 	bl	8006e1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d44:	f7ff fa02 	bl	800614c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20001058 	.word	0x20001058
 8006d54:	20001050 	.word	0x20001050

08006d58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d64:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <prvHeapInit+0xac>)
 8006d66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00c      	beq.n	8006d8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3307      	adds	r3, #7
 8006d76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	4a1f      	ldr	r2, [pc, #124]	; (8006e04 <prvHeapInit+0xac>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d90:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <prvHeapInit+0xb0>)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <prvHeapInit+0xb0>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da4:	2208      	movs	r2, #8
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0307 	bic.w	r3, r3, #7
 8006db2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <prvHeapInit+0xb4>)
 8006db8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dba:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <prvHeapInit+0xb4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dc2:	4b12      	ldr	r3, [pc, #72]	; (8006e0c <prvHeapInit+0xb4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <prvHeapInit+0xb4>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <prvHeapInit+0xb8>)
 8006de6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <prvHeapInit+0xbc>)
 8006dee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <prvHeapInit+0xc0>)
 8006df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df6:	601a      	str	r2, [r3, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	2000048c 	.word	0x2000048c
 8006e08:	20001044 	.word	0x20001044
 8006e0c:	2000104c 	.word	0x2000104c
 8006e10:	20001054 	.word	0x20001054
 8006e14:	20001050 	.word	0x20001050
 8006e18:	20001058 	.word	0x20001058

08006e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e24:	4b28      	ldr	r3, [pc, #160]	; (8006ec8 <prvInsertBlockIntoFreeList+0xac>)
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e002      	b.n	8006e30 <prvInsertBlockIntoFreeList+0x14>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d8f7      	bhi.n	8006e2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	4413      	add	r3, r2
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d108      	bne.n	8006e5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	441a      	add	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d118      	bne.n	8006ea4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <prvInsertBlockIntoFreeList+0xb0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d00d      	beq.n	8006e9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	441a      	add	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e008      	b.n	8006eac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvInsertBlockIntoFreeList+0xb0>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e003      	b.n	8006eac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d002      	beq.n	8006eba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eba:	bf00      	nop
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20001044 	.word	0x20001044
 8006ecc:	2000104c 	.word	0x2000104c

08006ed0 <__errno>:
 8006ed0:	4b01      	ldr	r3, [pc, #4]	; (8006ed8 <__errno+0x8>)
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	2000006c 	.word	0x2000006c

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4e0d      	ldr	r6, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1ba4      	subs	r4, r4, r6
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2500      	movs	r5, #0
 8006ee8:	42a5      	cmp	r5, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4e0b      	ldr	r6, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f000 fc28 	bl	8007744 <_init>
 8006ef4:	1ba4      	subs	r4, r4, r6
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2500      	movs	r5, #0
 8006efa:	42a5      	cmp	r5, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f04:	4798      	blx	r3
 8006f06:	3501      	adds	r5, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f0e:	4798      	blx	r3
 8006f10:	3501      	adds	r5, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	08007950 	.word	0x08007950
 8006f18:	08007950 	.word	0x08007950
 8006f1c:	08007950 	.word	0x08007950
 8006f20:	08007954 	.word	0x08007954

08006f24 <memcpy>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	1e43      	subs	r3, r0, #1
 8006f28:	440a      	add	r2, r1
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d100      	bne.n	8006f30 <memcpy+0xc>
 8006f2e:	bd10      	pop	{r4, pc}
 8006f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f38:	e7f7      	b.n	8006f2a <memcpy+0x6>

08006f3a <memset>:
 8006f3a:	4402      	add	r2, r0
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d100      	bne.n	8006f44 <memset+0xa>
 8006f42:	4770      	bx	lr
 8006f44:	f803 1b01 	strb.w	r1, [r3], #1
 8006f48:	e7f9      	b.n	8006f3e <memset+0x4>
	...

08006f4c <siprintf>:
 8006f4c:	b40e      	push	{r1, r2, r3}
 8006f4e:	b500      	push	{lr}
 8006f50:	b09c      	sub	sp, #112	; 0x70
 8006f52:	ab1d      	add	r3, sp, #116	; 0x74
 8006f54:	9002      	str	r0, [sp, #8]
 8006f56:	9006      	str	r0, [sp, #24]
 8006f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f5c:	4809      	ldr	r0, [pc, #36]	; (8006f84 <siprintf+0x38>)
 8006f5e:	9107      	str	r1, [sp, #28]
 8006f60:	9104      	str	r1, [sp, #16]
 8006f62:	4909      	ldr	r1, [pc, #36]	; (8006f88 <siprintf+0x3c>)
 8006f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	6800      	ldr	r0, [r0, #0]
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	a902      	add	r1, sp, #8
 8006f70:	f000 f866 	bl	8007040 <_svfiprintf_r>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	b01c      	add	sp, #112	; 0x70
 8006f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f80:	b003      	add	sp, #12
 8006f82:	4770      	bx	lr
 8006f84:	2000006c 	.word	0x2000006c
 8006f88:	ffff0208 	.word	0xffff0208

08006f8c <__ssputs_r>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	688e      	ldr	r6, [r1, #8]
 8006f92:	429e      	cmp	r6, r3
 8006f94:	4682      	mov	sl, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4690      	mov	r8, r2
 8006f9a:	4699      	mov	r9, r3
 8006f9c:	d837      	bhi.n	800700e <__ssputs_r+0x82>
 8006f9e:	898a      	ldrh	r2, [r1, #12]
 8006fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fa4:	d031      	beq.n	800700a <__ssputs_r+0x7e>
 8006fa6:	6825      	ldr	r5, [r4, #0]
 8006fa8:	6909      	ldr	r1, [r1, #16]
 8006faa:	1a6f      	subs	r7, r5, r1
 8006fac:	6965      	ldr	r5, [r4, #20]
 8006fae:	2302      	movs	r3, #2
 8006fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fb8:	f109 0301 	add.w	r3, r9, #1
 8006fbc:	443b      	add	r3, r7
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	bf38      	it	cc
 8006fc2:	461d      	movcc	r5, r3
 8006fc4:	0553      	lsls	r3, r2, #21
 8006fc6:	d530      	bpl.n	800702a <__ssputs_r+0x9e>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f000 fb21 	bl	8007610 <_malloc_r>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	b950      	cbnz	r0, 8006fe8 <__ssputs_r+0x5c>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	f8ca 3000 	str.w	r3, [sl]
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fde:	81a3      	strh	r3, [r4, #12]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe8:	463a      	mov	r2, r7
 8006fea:	6921      	ldr	r1, [r4, #16]
 8006fec:	f7ff ff9a 	bl	8006f24 <memcpy>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	6126      	str	r6, [r4, #16]
 8006ffe:	6165      	str	r5, [r4, #20]
 8007000:	443e      	add	r6, r7
 8007002:	1bed      	subs	r5, r5, r7
 8007004:	6026      	str	r6, [r4, #0]
 8007006:	60a5      	str	r5, [r4, #8]
 8007008:	464e      	mov	r6, r9
 800700a:	454e      	cmp	r6, r9
 800700c:	d900      	bls.n	8007010 <__ssputs_r+0x84>
 800700e:	464e      	mov	r6, r9
 8007010:	4632      	mov	r2, r6
 8007012:	4641      	mov	r1, r8
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	f000 fa93 	bl	8007540 <memmove>
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	1b9b      	subs	r3, r3, r6
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	441e      	add	r6, r3
 8007024:	6026      	str	r6, [r4, #0]
 8007026:	2000      	movs	r0, #0
 8007028:	e7dc      	b.n	8006fe4 <__ssputs_r+0x58>
 800702a:	462a      	mov	r2, r5
 800702c:	f000 fb4a 	bl	80076c4 <_realloc_r>
 8007030:	4606      	mov	r6, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d1e2      	bne.n	8006ffc <__ssputs_r+0x70>
 8007036:	6921      	ldr	r1, [r4, #16]
 8007038:	4650      	mov	r0, sl
 800703a:	f000 fa9b 	bl	8007574 <_free_r>
 800703e:	e7c8      	b.n	8006fd2 <__ssputs_r+0x46>

08007040 <_svfiprintf_r>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	461d      	mov	r5, r3
 8007046:	898b      	ldrh	r3, [r1, #12]
 8007048:	061f      	lsls	r7, r3, #24
 800704a:	b09d      	sub	sp, #116	; 0x74
 800704c:	4680      	mov	r8, r0
 800704e:	460c      	mov	r4, r1
 8007050:	4616      	mov	r6, r2
 8007052:	d50f      	bpl.n	8007074 <_svfiprintf_r+0x34>
 8007054:	690b      	ldr	r3, [r1, #16]
 8007056:	b96b      	cbnz	r3, 8007074 <_svfiprintf_r+0x34>
 8007058:	2140      	movs	r1, #64	; 0x40
 800705a:	f000 fad9 	bl	8007610 <_malloc_r>
 800705e:	6020      	str	r0, [r4, #0]
 8007060:	6120      	str	r0, [r4, #16]
 8007062:	b928      	cbnz	r0, 8007070 <_svfiprintf_r+0x30>
 8007064:	230c      	movs	r3, #12
 8007066:	f8c8 3000 	str.w	r3, [r8]
 800706a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706e:	e0c8      	b.n	8007202 <_svfiprintf_r+0x1c2>
 8007070:	2340      	movs	r3, #64	; 0x40
 8007072:	6163      	str	r3, [r4, #20]
 8007074:	2300      	movs	r3, #0
 8007076:	9309      	str	r3, [sp, #36]	; 0x24
 8007078:	2320      	movs	r3, #32
 800707a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707e:	2330      	movs	r3, #48	; 0x30
 8007080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007084:	9503      	str	r5, [sp, #12]
 8007086:	f04f 0b01 	mov.w	fp, #1
 800708a:	4637      	mov	r7, r6
 800708c:	463d      	mov	r5, r7
 800708e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007092:	b10b      	cbz	r3, 8007098 <_svfiprintf_r+0x58>
 8007094:	2b25      	cmp	r3, #37	; 0x25
 8007096:	d13e      	bne.n	8007116 <_svfiprintf_r+0xd6>
 8007098:	ebb7 0a06 	subs.w	sl, r7, r6
 800709c:	d00b      	beq.n	80070b6 <_svfiprintf_r+0x76>
 800709e:	4653      	mov	r3, sl
 80070a0:	4632      	mov	r2, r6
 80070a2:	4621      	mov	r1, r4
 80070a4:	4640      	mov	r0, r8
 80070a6:	f7ff ff71 	bl	8006f8c <__ssputs_r>
 80070aa:	3001      	adds	r0, #1
 80070ac:	f000 80a4 	beq.w	80071f8 <_svfiprintf_r+0x1b8>
 80070b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b2:	4453      	add	r3, sl
 80070b4:	9309      	str	r3, [sp, #36]	; 0x24
 80070b6:	783b      	ldrb	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 809d 	beq.w	80071f8 <_svfiprintf_r+0x1b8>
 80070be:	2300      	movs	r3, #0
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c8:	9304      	str	r3, [sp, #16]
 80070ca:	9307      	str	r3, [sp, #28]
 80070cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d0:	931a      	str	r3, [sp, #104]	; 0x68
 80070d2:	462f      	mov	r7, r5
 80070d4:	2205      	movs	r2, #5
 80070d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070da:	4850      	ldr	r0, [pc, #320]	; (800721c <_svfiprintf_r+0x1dc>)
 80070dc:	f7f9 f898 	bl	8000210 <memchr>
 80070e0:	9b04      	ldr	r3, [sp, #16]
 80070e2:	b9d0      	cbnz	r0, 800711a <_svfiprintf_r+0xda>
 80070e4:	06d9      	lsls	r1, r3, #27
 80070e6:	bf44      	itt	mi
 80070e8:	2220      	movmi	r2, #32
 80070ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070ee:	071a      	lsls	r2, r3, #28
 80070f0:	bf44      	itt	mi
 80070f2:	222b      	movmi	r2, #43	; 0x2b
 80070f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070f8:	782a      	ldrb	r2, [r5, #0]
 80070fa:	2a2a      	cmp	r2, #42	; 0x2a
 80070fc:	d015      	beq.n	800712a <_svfiprintf_r+0xea>
 80070fe:	9a07      	ldr	r2, [sp, #28]
 8007100:	462f      	mov	r7, r5
 8007102:	2000      	movs	r0, #0
 8007104:	250a      	movs	r5, #10
 8007106:	4639      	mov	r1, r7
 8007108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710c:	3b30      	subs	r3, #48	; 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d94d      	bls.n	80071ae <_svfiprintf_r+0x16e>
 8007112:	b1b8      	cbz	r0, 8007144 <_svfiprintf_r+0x104>
 8007114:	e00f      	b.n	8007136 <_svfiprintf_r+0xf6>
 8007116:	462f      	mov	r7, r5
 8007118:	e7b8      	b.n	800708c <_svfiprintf_r+0x4c>
 800711a:	4a40      	ldr	r2, [pc, #256]	; (800721c <_svfiprintf_r+0x1dc>)
 800711c:	1a80      	subs	r0, r0, r2
 800711e:	fa0b f000 	lsl.w	r0, fp, r0
 8007122:	4318      	orrs	r0, r3
 8007124:	9004      	str	r0, [sp, #16]
 8007126:	463d      	mov	r5, r7
 8007128:	e7d3      	b.n	80070d2 <_svfiprintf_r+0x92>
 800712a:	9a03      	ldr	r2, [sp, #12]
 800712c:	1d11      	adds	r1, r2, #4
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	9103      	str	r1, [sp, #12]
 8007132:	2a00      	cmp	r2, #0
 8007134:	db01      	blt.n	800713a <_svfiprintf_r+0xfa>
 8007136:	9207      	str	r2, [sp, #28]
 8007138:	e004      	b.n	8007144 <_svfiprintf_r+0x104>
 800713a:	4252      	negs	r2, r2
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	9207      	str	r2, [sp, #28]
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	783b      	ldrb	r3, [r7, #0]
 8007146:	2b2e      	cmp	r3, #46	; 0x2e
 8007148:	d10c      	bne.n	8007164 <_svfiprintf_r+0x124>
 800714a:	787b      	ldrb	r3, [r7, #1]
 800714c:	2b2a      	cmp	r3, #42	; 0x2a
 800714e:	d133      	bne.n	80071b8 <_svfiprintf_r+0x178>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d1a      	adds	r2, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9203      	str	r2, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfb8      	it	lt
 800715c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007160:	3702      	adds	r7, #2
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	4d2e      	ldr	r5, [pc, #184]	; (8007220 <_svfiprintf_r+0x1e0>)
 8007166:	7839      	ldrb	r1, [r7, #0]
 8007168:	2203      	movs	r2, #3
 800716a:	4628      	mov	r0, r5
 800716c:	f7f9 f850 	bl	8000210 <memchr>
 8007170:	b138      	cbz	r0, 8007182 <_svfiprintf_r+0x142>
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	1b40      	subs	r0, r0, r5
 8007176:	fa03 f000 	lsl.w	r0, r3, r0
 800717a:	9b04      	ldr	r3, [sp, #16]
 800717c:	4303      	orrs	r3, r0
 800717e:	3701      	adds	r7, #1
 8007180:	9304      	str	r3, [sp, #16]
 8007182:	7839      	ldrb	r1, [r7, #0]
 8007184:	4827      	ldr	r0, [pc, #156]	; (8007224 <_svfiprintf_r+0x1e4>)
 8007186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800718a:	2206      	movs	r2, #6
 800718c:	1c7e      	adds	r6, r7, #1
 800718e:	f7f9 f83f 	bl	8000210 <memchr>
 8007192:	2800      	cmp	r0, #0
 8007194:	d038      	beq.n	8007208 <_svfiprintf_r+0x1c8>
 8007196:	4b24      	ldr	r3, [pc, #144]	; (8007228 <_svfiprintf_r+0x1e8>)
 8007198:	bb13      	cbnz	r3, 80071e0 <_svfiprintf_r+0x1a0>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	3307      	adds	r3, #7
 800719e:	f023 0307 	bic.w	r3, r3, #7
 80071a2:	3308      	adds	r3, #8
 80071a4:	9303      	str	r3, [sp, #12]
 80071a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a8:	444b      	add	r3, r9
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	e76d      	b.n	800708a <_svfiprintf_r+0x4a>
 80071ae:	fb05 3202 	mla	r2, r5, r2, r3
 80071b2:	2001      	movs	r0, #1
 80071b4:	460f      	mov	r7, r1
 80071b6:	e7a6      	b.n	8007106 <_svfiprintf_r+0xc6>
 80071b8:	2300      	movs	r3, #0
 80071ba:	3701      	adds	r7, #1
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	4619      	mov	r1, r3
 80071c0:	250a      	movs	r5, #10
 80071c2:	4638      	mov	r0, r7
 80071c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c8:	3a30      	subs	r2, #48	; 0x30
 80071ca:	2a09      	cmp	r2, #9
 80071cc:	d903      	bls.n	80071d6 <_svfiprintf_r+0x196>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0c8      	beq.n	8007164 <_svfiprintf_r+0x124>
 80071d2:	9105      	str	r1, [sp, #20]
 80071d4:	e7c6      	b.n	8007164 <_svfiprintf_r+0x124>
 80071d6:	fb05 2101 	mla	r1, r5, r1, r2
 80071da:	2301      	movs	r3, #1
 80071dc:	4607      	mov	r7, r0
 80071de:	e7f0      	b.n	80071c2 <_svfiprintf_r+0x182>
 80071e0:	ab03      	add	r3, sp, #12
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4622      	mov	r2, r4
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <_svfiprintf_r+0x1ec>)
 80071e8:	a904      	add	r1, sp, #16
 80071ea:	4640      	mov	r0, r8
 80071ec:	f3af 8000 	nop.w
 80071f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80071f4:	4681      	mov	r9, r0
 80071f6:	d1d6      	bne.n	80071a6 <_svfiprintf_r+0x166>
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	065b      	lsls	r3, r3, #25
 80071fc:	f53f af35 	bmi.w	800706a <_svfiprintf_r+0x2a>
 8007200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007202:	b01d      	add	sp, #116	; 0x74
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	ab03      	add	r3, sp, #12
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4622      	mov	r2, r4
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <_svfiprintf_r+0x1ec>)
 8007210:	a904      	add	r1, sp, #16
 8007212:	4640      	mov	r0, r8
 8007214:	f000 f882 	bl	800731c <_printf_i>
 8007218:	e7ea      	b.n	80071f0 <_svfiprintf_r+0x1b0>
 800721a:	bf00      	nop
 800721c:	08007914 	.word	0x08007914
 8007220:	0800791a 	.word	0x0800791a
 8007224:	0800791e 	.word	0x0800791e
 8007228:	00000000 	.word	0x00000000
 800722c:	08006f8d 	.word	0x08006f8d

08007230 <_printf_common>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	4691      	mov	r9, r2
 8007236:	461f      	mov	r7, r3
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	690b      	ldr	r3, [r1, #16]
 800723c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007240:	4293      	cmp	r3, r2
 8007242:	bfb8      	it	lt
 8007244:	4613      	movlt	r3, r2
 8007246:	f8c9 3000 	str.w	r3, [r9]
 800724a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800724e:	4606      	mov	r6, r0
 8007250:	460c      	mov	r4, r1
 8007252:	b112      	cbz	r2, 800725a <_printf_common+0x2a>
 8007254:	3301      	adds	r3, #1
 8007256:	f8c9 3000 	str.w	r3, [r9]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	0699      	lsls	r1, r3, #26
 800725e:	bf42      	ittt	mi
 8007260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007264:	3302      	addmi	r3, #2
 8007266:	f8c9 3000 	strmi.w	r3, [r9]
 800726a:	6825      	ldr	r5, [r4, #0]
 800726c:	f015 0506 	ands.w	r5, r5, #6
 8007270:	d107      	bne.n	8007282 <_printf_common+0x52>
 8007272:	f104 0a19 	add.w	sl, r4, #25
 8007276:	68e3      	ldr	r3, [r4, #12]
 8007278:	f8d9 2000 	ldr.w	r2, [r9]
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	42ab      	cmp	r3, r5
 8007280:	dc28      	bgt.n	80072d4 <_printf_common+0xa4>
 8007282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	3300      	adds	r3, #0
 800728a:	bf18      	it	ne
 800728c:	2301      	movne	r3, #1
 800728e:	0692      	lsls	r2, r2, #26
 8007290:	d42d      	bmi.n	80072ee <_printf_common+0xbe>
 8007292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007296:	4639      	mov	r1, r7
 8007298:	4630      	mov	r0, r6
 800729a:	47c0      	blx	r8
 800729c:	3001      	adds	r0, #1
 800729e:	d020      	beq.n	80072e2 <_printf_common+0xb2>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	68e5      	ldr	r5, [r4, #12]
 80072a4:	f8d9 2000 	ldr.w	r2, [r9]
 80072a8:	f003 0306 	and.w	r3, r3, #6
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	bf08      	it	eq
 80072b0:	1aad      	subeq	r5, r5, r2
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	6922      	ldr	r2, [r4, #16]
 80072b6:	bf0c      	ite	eq
 80072b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072bc:	2500      	movne	r5, #0
 80072be:	4293      	cmp	r3, r2
 80072c0:	bfc4      	itt	gt
 80072c2:	1a9b      	subgt	r3, r3, r2
 80072c4:	18ed      	addgt	r5, r5, r3
 80072c6:	f04f 0900 	mov.w	r9, #0
 80072ca:	341a      	adds	r4, #26
 80072cc:	454d      	cmp	r5, r9
 80072ce:	d11a      	bne.n	8007306 <_printf_common+0xd6>
 80072d0:	2000      	movs	r0, #0
 80072d2:	e008      	b.n	80072e6 <_printf_common+0xb6>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4652      	mov	r2, sl
 80072d8:	4639      	mov	r1, r7
 80072da:	4630      	mov	r0, r6
 80072dc:	47c0      	blx	r8
 80072de:	3001      	adds	r0, #1
 80072e0:	d103      	bne.n	80072ea <_printf_common+0xba>
 80072e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ea:	3501      	adds	r5, #1
 80072ec:	e7c3      	b.n	8007276 <_printf_common+0x46>
 80072ee:	18e1      	adds	r1, r4, r3
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	2030      	movs	r0, #48	; 0x30
 80072f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072f8:	4422      	add	r2, r4
 80072fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007302:	3302      	adds	r3, #2
 8007304:	e7c5      	b.n	8007292 <_printf_common+0x62>
 8007306:	2301      	movs	r3, #1
 8007308:	4622      	mov	r2, r4
 800730a:	4639      	mov	r1, r7
 800730c:	4630      	mov	r0, r6
 800730e:	47c0      	blx	r8
 8007310:	3001      	adds	r0, #1
 8007312:	d0e6      	beq.n	80072e2 <_printf_common+0xb2>
 8007314:	f109 0901 	add.w	r9, r9, #1
 8007318:	e7d8      	b.n	80072cc <_printf_common+0x9c>
	...

0800731c <_printf_i>:
 800731c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007324:	460c      	mov	r4, r1
 8007326:	7e09      	ldrb	r1, [r1, #24]
 8007328:	b085      	sub	sp, #20
 800732a:	296e      	cmp	r1, #110	; 0x6e
 800732c:	4617      	mov	r7, r2
 800732e:	4606      	mov	r6, r0
 8007330:	4698      	mov	r8, r3
 8007332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007334:	f000 80b3 	beq.w	800749e <_printf_i+0x182>
 8007338:	d822      	bhi.n	8007380 <_printf_i+0x64>
 800733a:	2963      	cmp	r1, #99	; 0x63
 800733c:	d036      	beq.n	80073ac <_printf_i+0x90>
 800733e:	d80a      	bhi.n	8007356 <_printf_i+0x3a>
 8007340:	2900      	cmp	r1, #0
 8007342:	f000 80b9 	beq.w	80074b8 <_printf_i+0x19c>
 8007346:	2958      	cmp	r1, #88	; 0x58
 8007348:	f000 8083 	beq.w	8007452 <_printf_i+0x136>
 800734c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007354:	e032      	b.n	80073bc <_printf_i+0xa0>
 8007356:	2964      	cmp	r1, #100	; 0x64
 8007358:	d001      	beq.n	800735e <_printf_i+0x42>
 800735a:	2969      	cmp	r1, #105	; 0x69
 800735c:	d1f6      	bne.n	800734c <_printf_i+0x30>
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	6813      	ldr	r3, [r2, #0]
 8007362:	0605      	lsls	r5, r0, #24
 8007364:	f103 0104 	add.w	r1, r3, #4
 8007368:	d52a      	bpl.n	80073c0 <_printf_i+0xa4>
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da03      	bge.n	800737a <_printf_i+0x5e>
 8007372:	222d      	movs	r2, #45	; 0x2d
 8007374:	425b      	negs	r3, r3
 8007376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800737a:	486f      	ldr	r0, [pc, #444]	; (8007538 <_printf_i+0x21c>)
 800737c:	220a      	movs	r2, #10
 800737e:	e039      	b.n	80073f4 <_printf_i+0xd8>
 8007380:	2973      	cmp	r1, #115	; 0x73
 8007382:	f000 809d 	beq.w	80074c0 <_printf_i+0x1a4>
 8007386:	d808      	bhi.n	800739a <_printf_i+0x7e>
 8007388:	296f      	cmp	r1, #111	; 0x6f
 800738a:	d020      	beq.n	80073ce <_printf_i+0xb2>
 800738c:	2970      	cmp	r1, #112	; 0x70
 800738e:	d1dd      	bne.n	800734c <_printf_i+0x30>
 8007390:	6823      	ldr	r3, [r4, #0]
 8007392:	f043 0320 	orr.w	r3, r3, #32
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	e003      	b.n	80073a2 <_printf_i+0x86>
 800739a:	2975      	cmp	r1, #117	; 0x75
 800739c:	d017      	beq.n	80073ce <_printf_i+0xb2>
 800739e:	2978      	cmp	r1, #120	; 0x78
 80073a0:	d1d4      	bne.n	800734c <_printf_i+0x30>
 80073a2:	2378      	movs	r3, #120	; 0x78
 80073a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073a8:	4864      	ldr	r0, [pc, #400]	; (800753c <_printf_i+0x220>)
 80073aa:	e055      	b.n	8007458 <_printf_i+0x13c>
 80073ac:	6813      	ldr	r3, [r2, #0]
 80073ae:	1d19      	adds	r1, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6011      	str	r1, [r2, #0]
 80073b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073bc:	2301      	movs	r3, #1
 80073be:	e08c      	b.n	80074da <_printf_i+0x1be>
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6011      	str	r1, [r2, #0]
 80073c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073c8:	bf18      	it	ne
 80073ca:	b21b      	sxthne	r3, r3
 80073cc:	e7cf      	b.n	800736e <_printf_i+0x52>
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	6825      	ldr	r5, [r4, #0]
 80073d2:	1d18      	adds	r0, r3, #4
 80073d4:	6010      	str	r0, [r2, #0]
 80073d6:	0628      	lsls	r0, r5, #24
 80073d8:	d501      	bpl.n	80073de <_printf_i+0xc2>
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	e002      	b.n	80073e4 <_printf_i+0xc8>
 80073de:	0668      	lsls	r0, r5, #25
 80073e0:	d5fb      	bpl.n	80073da <_printf_i+0xbe>
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	4854      	ldr	r0, [pc, #336]	; (8007538 <_printf_i+0x21c>)
 80073e6:	296f      	cmp	r1, #111	; 0x6f
 80073e8:	bf14      	ite	ne
 80073ea:	220a      	movne	r2, #10
 80073ec:	2208      	moveq	r2, #8
 80073ee:	2100      	movs	r1, #0
 80073f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073f4:	6865      	ldr	r5, [r4, #4]
 80073f6:	60a5      	str	r5, [r4, #8]
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	f2c0 8095 	blt.w	8007528 <_printf_i+0x20c>
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	f021 0104 	bic.w	r1, r1, #4
 8007404:	6021      	str	r1, [r4, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d13d      	bne.n	8007486 <_printf_i+0x16a>
 800740a:	2d00      	cmp	r5, #0
 800740c:	f040 808e 	bne.w	800752c <_printf_i+0x210>
 8007410:	4665      	mov	r5, ip
 8007412:	2a08      	cmp	r2, #8
 8007414:	d10b      	bne.n	800742e <_printf_i+0x112>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	07db      	lsls	r3, r3, #31
 800741a:	d508      	bpl.n	800742e <_printf_i+0x112>
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	6862      	ldr	r2, [r4, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	bfde      	ittt	le
 8007424:	2330      	movle	r3, #48	; 0x30
 8007426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800742a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800742e:	ebac 0305 	sub.w	r3, ip, r5
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	f8cd 8000 	str.w	r8, [sp]
 8007438:	463b      	mov	r3, r7
 800743a:	aa03      	add	r2, sp, #12
 800743c:	4621      	mov	r1, r4
 800743e:	4630      	mov	r0, r6
 8007440:	f7ff fef6 	bl	8007230 <_printf_common>
 8007444:	3001      	adds	r0, #1
 8007446:	d14d      	bne.n	80074e4 <_printf_i+0x1c8>
 8007448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800744c:	b005      	add	sp, #20
 800744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007452:	4839      	ldr	r0, [pc, #228]	; (8007538 <_printf_i+0x21c>)
 8007454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007458:	6813      	ldr	r3, [r2, #0]
 800745a:	6821      	ldr	r1, [r4, #0]
 800745c:	1d1d      	adds	r5, r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6015      	str	r5, [r2, #0]
 8007462:	060a      	lsls	r2, r1, #24
 8007464:	d50b      	bpl.n	800747e <_printf_i+0x162>
 8007466:	07ca      	lsls	r2, r1, #31
 8007468:	bf44      	itt	mi
 800746a:	f041 0120 	orrmi.w	r1, r1, #32
 800746e:	6021      	strmi	r1, [r4, #0]
 8007470:	b91b      	cbnz	r3, 800747a <_printf_i+0x15e>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	f022 0220 	bic.w	r2, r2, #32
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	2210      	movs	r2, #16
 800747c:	e7b7      	b.n	80073ee <_printf_i+0xd2>
 800747e:	064d      	lsls	r5, r1, #25
 8007480:	bf48      	it	mi
 8007482:	b29b      	uxthmi	r3, r3
 8007484:	e7ef      	b.n	8007466 <_printf_i+0x14a>
 8007486:	4665      	mov	r5, ip
 8007488:	fbb3 f1f2 	udiv	r1, r3, r2
 800748c:	fb02 3311 	mls	r3, r2, r1, r3
 8007490:	5cc3      	ldrb	r3, [r0, r3]
 8007492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007496:	460b      	mov	r3, r1
 8007498:	2900      	cmp	r1, #0
 800749a:	d1f5      	bne.n	8007488 <_printf_i+0x16c>
 800749c:	e7b9      	b.n	8007412 <_printf_i+0xf6>
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	6825      	ldr	r5, [r4, #0]
 80074a2:	6961      	ldr	r1, [r4, #20]
 80074a4:	1d18      	adds	r0, r3, #4
 80074a6:	6010      	str	r0, [r2, #0]
 80074a8:	0628      	lsls	r0, r5, #24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	d501      	bpl.n	80074b2 <_printf_i+0x196>
 80074ae:	6019      	str	r1, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <_printf_i+0x19c>
 80074b2:	066a      	lsls	r2, r5, #25
 80074b4:	d5fb      	bpl.n	80074ae <_printf_i+0x192>
 80074b6:	8019      	strh	r1, [r3, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	4665      	mov	r5, ip
 80074be:	e7b9      	b.n	8007434 <_printf_i+0x118>
 80074c0:	6813      	ldr	r3, [r2, #0]
 80074c2:	1d19      	adds	r1, r3, #4
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	681d      	ldr	r5, [r3, #0]
 80074c8:	6862      	ldr	r2, [r4, #4]
 80074ca:	2100      	movs	r1, #0
 80074cc:	4628      	mov	r0, r5
 80074ce:	f7f8 fe9f 	bl	8000210 <memchr>
 80074d2:	b108      	cbz	r0, 80074d8 <_printf_i+0x1bc>
 80074d4:	1b40      	subs	r0, r0, r5
 80074d6:	6060      	str	r0, [r4, #4]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	2300      	movs	r3, #0
 80074de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e2:	e7a7      	b.n	8007434 <_printf_i+0x118>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	462a      	mov	r2, r5
 80074e8:	4639      	mov	r1, r7
 80074ea:	4630      	mov	r0, r6
 80074ec:	47c0      	blx	r8
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0aa      	beq.n	8007448 <_printf_i+0x12c>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	079b      	lsls	r3, r3, #30
 80074f6:	d413      	bmi.n	8007520 <_printf_i+0x204>
 80074f8:	68e0      	ldr	r0, [r4, #12]
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	4298      	cmp	r0, r3
 80074fe:	bfb8      	it	lt
 8007500:	4618      	movlt	r0, r3
 8007502:	e7a3      	b.n	800744c <_printf_i+0x130>
 8007504:	2301      	movs	r3, #1
 8007506:	464a      	mov	r2, r9
 8007508:	4639      	mov	r1, r7
 800750a:	4630      	mov	r0, r6
 800750c:	47c0      	blx	r8
 800750e:	3001      	adds	r0, #1
 8007510:	d09a      	beq.n	8007448 <_printf_i+0x12c>
 8007512:	3501      	adds	r5, #1
 8007514:	68e3      	ldr	r3, [r4, #12]
 8007516:	9a03      	ldr	r2, [sp, #12]
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	42ab      	cmp	r3, r5
 800751c:	dcf2      	bgt.n	8007504 <_printf_i+0x1e8>
 800751e:	e7eb      	b.n	80074f8 <_printf_i+0x1dc>
 8007520:	2500      	movs	r5, #0
 8007522:	f104 0919 	add.w	r9, r4, #25
 8007526:	e7f5      	b.n	8007514 <_printf_i+0x1f8>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ac      	bne.n	8007486 <_printf_i+0x16a>
 800752c:	7803      	ldrb	r3, [r0, #0]
 800752e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007536:	e76c      	b.n	8007412 <_printf_i+0xf6>
 8007538:	08007925 	.word	0x08007925
 800753c:	08007936 	.word	0x08007936

08007540 <memmove>:
 8007540:	4288      	cmp	r0, r1
 8007542:	b510      	push	{r4, lr}
 8007544:	eb01 0302 	add.w	r3, r1, r2
 8007548:	d807      	bhi.n	800755a <memmove+0x1a>
 800754a:	1e42      	subs	r2, r0, #1
 800754c:	4299      	cmp	r1, r3
 800754e:	d00a      	beq.n	8007566 <memmove+0x26>
 8007550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007554:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007558:	e7f8      	b.n	800754c <memmove+0xc>
 800755a:	4283      	cmp	r3, r0
 800755c:	d9f5      	bls.n	800754a <memmove+0xa>
 800755e:	1881      	adds	r1, r0, r2
 8007560:	1ad2      	subs	r2, r2, r3
 8007562:	42d3      	cmn	r3, r2
 8007564:	d100      	bne.n	8007568 <memmove+0x28>
 8007566:	bd10      	pop	{r4, pc}
 8007568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007570:	e7f7      	b.n	8007562 <memmove+0x22>
	...

08007574 <_free_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4605      	mov	r5, r0
 8007578:	2900      	cmp	r1, #0
 800757a:	d045      	beq.n	8007608 <_free_r+0x94>
 800757c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007580:	1f0c      	subs	r4, r1, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfb8      	it	lt
 8007586:	18e4      	addlt	r4, r4, r3
 8007588:	f000 f8d2 	bl	8007730 <__malloc_lock>
 800758c:	4a1f      	ldr	r2, [pc, #124]	; (800760c <_free_r+0x98>)
 800758e:	6813      	ldr	r3, [r2, #0]
 8007590:	4610      	mov	r0, r2
 8007592:	b933      	cbnz	r3, 80075a2 <_free_r+0x2e>
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	6014      	str	r4, [r2, #0]
 8007598:	4628      	mov	r0, r5
 800759a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800759e:	f000 b8c8 	b.w	8007732 <__malloc_unlock>
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	d90c      	bls.n	80075c0 <_free_r+0x4c>
 80075a6:	6821      	ldr	r1, [r4, #0]
 80075a8:	1862      	adds	r2, r4, r1
 80075aa:	4293      	cmp	r3, r2
 80075ac:	bf04      	itt	eq
 80075ae:	681a      	ldreq	r2, [r3, #0]
 80075b0:	685b      	ldreq	r3, [r3, #4]
 80075b2:	6063      	str	r3, [r4, #4]
 80075b4:	bf04      	itt	eq
 80075b6:	1852      	addeq	r2, r2, r1
 80075b8:	6022      	streq	r2, [r4, #0]
 80075ba:	6004      	str	r4, [r0, #0]
 80075bc:	e7ec      	b.n	8007598 <_free_r+0x24>
 80075be:	4613      	mov	r3, r2
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	b10a      	cbz	r2, 80075c8 <_free_r+0x54>
 80075c4:	42a2      	cmp	r2, r4
 80075c6:	d9fa      	bls.n	80075be <_free_r+0x4a>
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	1858      	adds	r0, r3, r1
 80075cc:	42a0      	cmp	r0, r4
 80075ce:	d10b      	bne.n	80075e8 <_free_r+0x74>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	4401      	add	r1, r0
 80075d4:	1858      	adds	r0, r3, r1
 80075d6:	4282      	cmp	r2, r0
 80075d8:	6019      	str	r1, [r3, #0]
 80075da:	d1dd      	bne.n	8007598 <_free_r+0x24>
 80075dc:	6810      	ldr	r0, [r2, #0]
 80075de:	6852      	ldr	r2, [r2, #4]
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	4401      	add	r1, r0
 80075e4:	6019      	str	r1, [r3, #0]
 80075e6:	e7d7      	b.n	8007598 <_free_r+0x24>
 80075e8:	d902      	bls.n	80075f0 <_free_r+0x7c>
 80075ea:	230c      	movs	r3, #12
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	e7d3      	b.n	8007598 <_free_r+0x24>
 80075f0:	6820      	ldr	r0, [r4, #0]
 80075f2:	1821      	adds	r1, r4, r0
 80075f4:	428a      	cmp	r2, r1
 80075f6:	bf04      	itt	eq
 80075f8:	6811      	ldreq	r1, [r2, #0]
 80075fa:	6852      	ldreq	r2, [r2, #4]
 80075fc:	6062      	str	r2, [r4, #4]
 80075fe:	bf04      	itt	eq
 8007600:	1809      	addeq	r1, r1, r0
 8007602:	6021      	streq	r1, [r4, #0]
 8007604:	605c      	str	r4, [r3, #4]
 8007606:	e7c7      	b.n	8007598 <_free_r+0x24>
 8007608:	bd38      	pop	{r3, r4, r5, pc}
 800760a:	bf00      	nop
 800760c:	2000105c 	.word	0x2000105c

08007610 <_malloc_r>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	1ccd      	adds	r5, r1, #3
 8007614:	f025 0503 	bic.w	r5, r5, #3
 8007618:	3508      	adds	r5, #8
 800761a:	2d0c      	cmp	r5, #12
 800761c:	bf38      	it	cc
 800761e:	250c      	movcc	r5, #12
 8007620:	2d00      	cmp	r5, #0
 8007622:	4606      	mov	r6, r0
 8007624:	db01      	blt.n	800762a <_malloc_r+0x1a>
 8007626:	42a9      	cmp	r1, r5
 8007628:	d903      	bls.n	8007632 <_malloc_r+0x22>
 800762a:	230c      	movs	r3, #12
 800762c:	6033      	str	r3, [r6, #0]
 800762e:	2000      	movs	r0, #0
 8007630:	bd70      	pop	{r4, r5, r6, pc}
 8007632:	f000 f87d 	bl	8007730 <__malloc_lock>
 8007636:	4a21      	ldr	r2, [pc, #132]	; (80076bc <_malloc_r+0xac>)
 8007638:	6814      	ldr	r4, [r2, #0]
 800763a:	4621      	mov	r1, r4
 800763c:	b991      	cbnz	r1, 8007664 <_malloc_r+0x54>
 800763e:	4c20      	ldr	r4, [pc, #128]	; (80076c0 <_malloc_r+0xb0>)
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	b91b      	cbnz	r3, 800764c <_malloc_r+0x3c>
 8007644:	4630      	mov	r0, r6
 8007646:	f000 f863 	bl	8007710 <_sbrk_r>
 800764a:	6020      	str	r0, [r4, #0]
 800764c:	4629      	mov	r1, r5
 800764e:	4630      	mov	r0, r6
 8007650:	f000 f85e 	bl	8007710 <_sbrk_r>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d124      	bne.n	80076a2 <_malloc_r+0x92>
 8007658:	230c      	movs	r3, #12
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f868 	bl	8007732 <__malloc_unlock>
 8007662:	e7e4      	b.n	800762e <_malloc_r+0x1e>
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	1b5b      	subs	r3, r3, r5
 8007668:	d418      	bmi.n	800769c <_malloc_r+0x8c>
 800766a:	2b0b      	cmp	r3, #11
 800766c:	d90f      	bls.n	800768e <_malloc_r+0x7e>
 800766e:	600b      	str	r3, [r1, #0]
 8007670:	50cd      	str	r5, [r1, r3]
 8007672:	18cc      	adds	r4, r1, r3
 8007674:	4630      	mov	r0, r6
 8007676:	f000 f85c 	bl	8007732 <__malloc_unlock>
 800767a:	f104 000b 	add.w	r0, r4, #11
 800767e:	1d23      	adds	r3, r4, #4
 8007680:	f020 0007 	bic.w	r0, r0, #7
 8007684:	1ac3      	subs	r3, r0, r3
 8007686:	d0d3      	beq.n	8007630 <_malloc_r+0x20>
 8007688:	425a      	negs	r2, r3
 800768a:	50e2      	str	r2, [r4, r3]
 800768c:	e7d0      	b.n	8007630 <_malloc_r+0x20>
 800768e:	428c      	cmp	r4, r1
 8007690:	684b      	ldr	r3, [r1, #4]
 8007692:	bf16      	itet	ne
 8007694:	6063      	strne	r3, [r4, #4]
 8007696:	6013      	streq	r3, [r2, #0]
 8007698:	460c      	movne	r4, r1
 800769a:	e7eb      	b.n	8007674 <_malloc_r+0x64>
 800769c:	460c      	mov	r4, r1
 800769e:	6849      	ldr	r1, [r1, #4]
 80076a0:	e7cc      	b.n	800763c <_malloc_r+0x2c>
 80076a2:	1cc4      	adds	r4, r0, #3
 80076a4:	f024 0403 	bic.w	r4, r4, #3
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d005      	beq.n	80076b8 <_malloc_r+0xa8>
 80076ac:	1a21      	subs	r1, r4, r0
 80076ae:	4630      	mov	r0, r6
 80076b0:	f000 f82e 	bl	8007710 <_sbrk_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d0cf      	beq.n	8007658 <_malloc_r+0x48>
 80076b8:	6025      	str	r5, [r4, #0]
 80076ba:	e7db      	b.n	8007674 <_malloc_r+0x64>
 80076bc:	2000105c 	.word	0x2000105c
 80076c0:	20001060 	.word	0x20001060

080076c4 <_realloc_r>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4607      	mov	r7, r0
 80076c8:	4614      	mov	r4, r2
 80076ca:	460e      	mov	r6, r1
 80076cc:	b921      	cbnz	r1, 80076d8 <_realloc_r+0x14>
 80076ce:	4611      	mov	r1, r2
 80076d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076d4:	f7ff bf9c 	b.w	8007610 <_malloc_r>
 80076d8:	b922      	cbnz	r2, 80076e4 <_realloc_r+0x20>
 80076da:	f7ff ff4b 	bl	8007574 <_free_r>
 80076de:	4625      	mov	r5, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e4:	f000 f826 	bl	8007734 <_malloc_usable_size_r>
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d20f      	bcs.n	800770c <_realloc_r+0x48>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff8e 	bl	8007610 <_malloc_r>
 80076f4:	4605      	mov	r5, r0
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0f2      	beq.n	80076e0 <_realloc_r+0x1c>
 80076fa:	4631      	mov	r1, r6
 80076fc:	4622      	mov	r2, r4
 80076fe:	f7ff fc11 	bl	8006f24 <memcpy>
 8007702:	4631      	mov	r1, r6
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff ff35 	bl	8007574 <_free_r>
 800770a:	e7e9      	b.n	80076e0 <_realloc_r+0x1c>
 800770c:	4635      	mov	r5, r6
 800770e:	e7e7      	b.n	80076e0 <_realloc_r+0x1c>

08007710 <_sbrk_r>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	4c06      	ldr	r4, [pc, #24]	; (800772c <_sbrk_r+0x1c>)
 8007714:	2300      	movs	r3, #0
 8007716:	4605      	mov	r5, r0
 8007718:	4608      	mov	r0, r1
 800771a:	6023      	str	r3, [r4, #0]
 800771c:	f7fa f9a4 	bl	8001a68 <_sbrk>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_sbrk_r+0x1a>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	b103      	cbz	r3, 800772a <_sbrk_r+0x1a>
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	2000154c 	.word	0x2000154c

08007730 <__malloc_lock>:
 8007730:	4770      	bx	lr

08007732 <__malloc_unlock>:
 8007732:	4770      	bx	lr

08007734 <_malloc_usable_size_r>:
 8007734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007738:	1f18      	subs	r0, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfbc      	itt	lt
 800773e:	580b      	ldrlt	r3, [r1, r0]
 8007740:	18c0      	addlt	r0, r0, r3
 8007742:	4770      	bx	lr

08007744 <_init>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	bf00      	nop
 8007748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774a:	bc08      	pop	{r3}
 800774c:	469e      	mov	lr, r3
 800774e:	4770      	bx	lr

08007750 <_fini>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	bf00      	nop
 8007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007756:	bc08      	pop	{r3}
 8007758:	469e      	mov	lr, r3
 800775a:	4770      	bx	lr
