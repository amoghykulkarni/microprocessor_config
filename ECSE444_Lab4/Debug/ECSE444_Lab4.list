
ECSE444_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006120  08006120  00016120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006230  08006230  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006238  08006238  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08006240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  200000cc  0800630c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800630c  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018eae  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f38  00000000  00000000  00038faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0003d400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ce55  00000000  00000000  0003e770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000127a1  00000000  00000000  0006b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110f87  00000000  00000000  0007dd66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018eced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a28  00000000  00000000  0018ed68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006108 	.word	0x08006108

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000d0 	.word	0x200000d0
 80001fc:	08006108 	.word	0x08006108

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2120      	movs	r1, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fecd 	bl	8001350 <SENSOR_IO_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f023 0304 	bic.w	r3, r3, #4
 80005c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	2120      	movs	r1, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fe96 	bl	800131c <SENSOR_IO_Write>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000606:	f000 fe7f 	bl	8001308 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	210f      	movs	r1, #15
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fe9d 	bl	8001350 <SENSOR_IO_Read>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	2302      	movs	r3, #2
 8000638:	21b0      	movs	r1, #176	; 0xb0
 800063a:	f000 fea7 	bl	800138c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2d8      	uxtb	r0, r3
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	2302      	movs	r3, #2
 8000658:	21b6      	movs	r1, #182	; 0xb6
 800065a:	f000 fe97 	bl	800138c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800065e:	7b7b      	ldrb	r3, [r7, #13]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b21a      	sxth	r2, r3
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	2302      	movs	r3, #2
 8000676:	21ba      	movs	r1, #186	; 0xba
 8000678:	f000 fe88 	bl	800138c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2d8      	uxtb	r0, r3
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	2302      	movs	r3, #2
 8000694:	21a8      	movs	r1, #168	; 0xa8
 8000696:	f000 fe79 	bl	800138c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80006d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000754 <HTS221_H_ReadHumidity+0x130>
 8000712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	dd01      	ble.n	8000720 <HTS221_H_ReadHumidity+0xfc>
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HTS221_H_ReadHumidity+0x134>)
 800071e:	e00a      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000720:	edd7 7a04 	vldr	s15, [r7, #16]
 8000724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d502      	bpl.n	8000734 <HTS221_H_ReadHumidity+0x110>
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	e000      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
 8000734:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000736:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000738:	edd7 7a04 	vldr	s15, [r7, #16]
 800073c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000744:	eef0 7a66 	vmov.f32	s15, s13
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	447a0000 	.word	0x447a0000
 8000758:	447a0000 	.word	0x447a0000

0800075c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2120      	movs	r1, #32
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fdee 	bl	8001350 <SENSOR_IO_Read>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	f023 0304 	bic.w	r3, r3, #4
 800077e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f023 0303 	bic.w	r3, r3, #3
 800078e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800079e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	2120      	movs	r1, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fdb7 	bl	800131c <SENSOR_IO_Write>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b088      	sub	sp, #32
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	b2d8      	uxtb	r0, r3
 80007c4:	f107 0208 	add.w	r2, r7, #8
 80007c8:	2302      	movs	r3, #2
 80007ca:	21b2      	movs	r1, #178	; 0xb2
 80007cc:	f000 fdde 	bl	800138c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2135      	movs	r1, #53	; 0x35
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 fdba 	bl	8001350 <SENSOR_IO_Read>
 80007dc:	4603      	mov	r3, r0
 80007de:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	7a3b      	ldrb	r3, [r7, #8]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80007f4:	7ffb      	ldrb	r3, [r7, #31]
 80007f6:	019b      	lsls	r3, r3, #6
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80007fe:	b21a      	sxth	r2, r3
 8000800:	7a7b      	ldrb	r3, [r7, #9]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000808:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800080c:	10db      	asrs	r3, r3, #3
 800080e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000810:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000814:	10db      	asrs	r3, r3, #3
 8000816:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	b2d8      	uxtb	r0, r3
 800081c:	f107 0208 	add.w	r2, r7, #8
 8000820:	2304      	movs	r3, #4
 8000822:	21bc      	movs	r1, #188	; 0xbc
 8000824:	f000 fdb2 	bl	800138c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000828:	7a7b      	ldrb	r3, [r7, #9]
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	7a3b      	ldrb	r3, [r7, #8]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000836:	7afb      	ldrb	r3, [r7, #11]
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b21a      	sxth	r2, r3
 800083c:	7abb      	ldrb	r3, [r7, #10]
 800083e:	b21b      	sxth	r3, r3
 8000840:	4313      	orrs	r3, r2
 8000842:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	b2d8      	uxtb	r0, r3
 8000848:	f107 0208 	add.w	r2, r7, #8
 800084c:	2302      	movs	r3, #2
 800084e:	21aa      	movs	r1, #170	; 0xaa
 8000850:	f000 fd9c 	bl	800138c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000854:	7a7b      	ldrb	r3, [r7, #9]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	7a3b      	ldrb	r3, [r7, #8]
 800085c:	b21b      	sxth	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000862:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000874:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000878:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	ee07 3a90 	vmov	s15, r3
 8000882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000886:	ee67 6a27 	vmul.f32	s13, s14, s15
 800088a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800088e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	ee07 3a90 	vmov	s15, r3
}
 80008ba:	eeb0 0a67 	vmov.f32	s0, s15
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f87b 	bl	80009cc <LPS22HB_Init>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80008ec:	f000 fd0c 	bl	8001308 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	210f      	movs	r1, #15
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fd2a 	bl	8001350 <SENSOR_IO_Read>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	74fb      	strb	r3, [r7, #19]
 800091e:	e013      	b.n	8000948 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	7cfb      	ldrb	r3, [r7, #19]
 8000926:	3328      	adds	r3, #40	; 0x28
 8000928:	b2db      	uxtb	r3, r3
 800092a:	7cfc      	ldrb	r4, [r7, #19]
 800092c:	4619      	mov	r1, r3
 800092e:	4610      	mov	r0, r2
 8000930:	f000 fd0e 	bl	8001350 <SENSOR_IO_Read>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4423      	add	r3, r4
 800093e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8000942:	7cfb      	ldrb	r3, [r7, #19]
 8000944:	3301      	adds	r3, #1
 8000946:	74fb      	strb	r3, [r7, #19]
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d9e8      	bls.n	8000920 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800094e:	2300      	movs	r3, #0
 8000950:	74fb      	strb	r3, [r7, #19]
 8000952:	e010      	b.n	8000976 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8000954:	7cfb      	ldrb	r3, [r7, #19]
 8000956:	f107 0218 	add.w	r2, r7, #24
 800095a:	4413      	add	r3, r2
 800095c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000960:	461a      	mov	r2, r3
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	4313      	orrs	r3, r2
 800096e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8000970:	7cfb      	ldrb	r3, [r7, #19]
 8000972:	3301      	adds	r3, #1
 8000974:	74fb      	strb	r3, [r7, #19]
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d9eb      	bls.n	8000954 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800098c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2264      	movs	r2, #100	; 0x64
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	da01      	bge.n	80009a2 <LPS22HB_P_ReadPressure+0x96>
 800099e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009a2:	131b      	asrs	r3, r3, #12
 80009a4:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80009c8 <LPS22HB_P_ReadPressure+0xbc>
 80009b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80009bc:	eeb0 0a67 	vmov.f32	s0, s15
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	42c80000 	.word	0x42c80000

080009cc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	211a      	movs	r1, #26
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fcb7 	bl	8001350 <SENSOR_IO_Read>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	7bfa      	ldrb	r2, [r7, #15]
 80009fc:	211a      	movs	r1, #26
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fc8c 	bl	800131c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fca0 	bl	8001350 <SENSOR_IO_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a1a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f023 0302 	bic.w	r3, r3, #2
 8000a2a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fc6d 	bl	800131c <SENSOR_IO_Write>
}  
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a58:	2110      	movs	r1, #16
 8000a5a:	20d4      	movs	r0, #212	; 0xd4
 8000a5c:	f000 fc78 	bl	8001350 <SENSOR_IO_Read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000a70:	7bba      	ldrb	r2, [r7, #14]
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	20d4      	movs	r0, #212	; 0xd4
 8000a80:	f000 fc4c 	bl	800131c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000a84:	2112      	movs	r1, #18
 8000a86:	20d4      	movs	r0, #212	; 0xd4
 8000a88:	f000 fc62 	bl	8001350 <SENSOR_IO_Read>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000a9e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000aa0:	7bba      	ldrb	r2, [r7, #14]
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2112      	movs	r1, #18
 8000aae:	20d4      	movs	r0, #212	; 0xd4
 8000ab0:	f000 fc34 	bl	800131c <SENSOR_IO_Write>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	20d4      	movs	r0, #212	; 0xd4
 8000aca:	f000 fc41 	bl	8001350 <SENSOR_IO_Read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	461a      	mov	r2, r3
 8000ade:	2110      	movs	r1, #16
 8000ae0:	20d4      	movs	r0, #212	; 0xd4
 8000ae2:	f000 fc1b 	bl	800131c <SENSOR_IO_Write>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000af2:	f000 fc09 	bl	8001308 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000af6:	210f      	movs	r1, #15
 8000af8:	20d4      	movs	r0, #212	; 0xd4
 8000afa:	f000 fc29 	bl	8001350 <SENSOR_IO_Read>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000b12:	2115      	movs	r1, #21
 8000b14:	20d4      	movs	r0, #212	; 0xd4
 8000b16:	f000 fc1b 	bl	8001350 <SENSOR_IO_Read>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f023 0310 	bic.w	r3, r3, #16
 8000b24:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2115      	movs	r1, #21
 8000b3a:	20d4      	movs	r0, #212	; 0xd4
 8000b3c:	f000 fbee 	bl	800131c <SENSOR_IO_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000b5e:	2110      	movs	r1, #16
 8000b60:	20d4      	movs	r0, #212	; 0xd4
 8000b62:	f000 fbf5 	bl	8001350 <SENSOR_IO_Read>
 8000b66:	4603      	mov	r3, r0
 8000b68:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	2306      	movs	r3, #6
 8000b70:	2128      	movs	r1, #40	; 0x28
 8000b72:	20d4      	movs	r0, #212	; 0xd4
 8000b74:	f000 fc0a 	bl	800138c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	77fb      	strb	r3, [r7, #31]
 8000b7c:	e01f      	b.n	8000bbe <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000b7e:	7ffb      	ldrb	r3, [r7, #31]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	3301      	adds	r3, #1
 8000b84:	f107 0220 	add.w	r2, r7, #32
 8000b88:	4413      	add	r3, r2
 8000b8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	7ffb      	ldrb	r3, [r7, #31]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	f107 0120 	add.w	r1, r7, #32
 8000b9c:	440b      	add	r3, r1
 8000b9e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
 8000baa:	b212      	sxth	r2, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	f107 0120 	add.w	r1, r7, #32
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000bb8:	7ffb      	ldrb	r3, [r7, #31]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	77fb      	strb	r3, [r7, #31]
 8000bbe:	7ffb      	ldrb	r3, [r7, #31]
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d9dc      	bls.n	8000b7e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b0c      	cmp	r3, #12
 8000bcc:	d828      	bhi.n	8000c20 <LSM6DSL_AccReadXYZ+0xd8>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <LSM6DSL_AccReadXYZ+0x8c>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c09 	.word	0x08000c09
 8000bd8:	08000c21 	.word	0x08000c21
 8000bdc:	08000c21 	.word	0x08000c21
 8000be0:	08000c21 	.word	0x08000c21
 8000be4:	08000c1b 	.word	0x08000c1b
 8000be8:	08000c21 	.word	0x08000c21
 8000bec:	08000c21 	.word	0x08000c21
 8000bf0:	08000c21 	.word	0x08000c21
 8000bf4:	08000c0f 	.word	0x08000c0f
 8000bf8:	08000c21 	.word	0x08000c21
 8000bfc:	08000c21 	.word	0x08000c21
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c15 	.word	0x08000c15
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <LSM6DSL_AccReadXYZ+0x124>)
 8000c0a:	61bb      	str	r3, [r7, #24]
    break;
 8000c0c:	e008      	b.n	8000c20 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <LSM6DSL_AccReadXYZ+0x128>)
 8000c10:	61bb      	str	r3, [r7, #24]
    break;
 8000c12:	e005      	b.n	8000c20 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <LSM6DSL_AccReadXYZ+0x12c>)
 8000c16:	61bb      	str	r3, [r7, #24]
    break;
 8000c18:	e002      	b.n	8000c20 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <LSM6DSL_AccReadXYZ+0x130>)
 8000c1c:	61bb      	str	r3, [r7, #24]
    break;    
 8000c1e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	77fb      	strb	r3, [r7, #31]
 8000c24:	e01b      	b.n	8000c5e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000c26:	7ffb      	ldrb	r3, [r7, #31]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	f107 0220 	add.w	r2, r7, #32
 8000c2e:	4413      	add	r3, r2
 8000c30:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000c34:	ee07 3a90 	vmov	s15, r3
 8000c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c50:	ee17 2a90 	vmov	r2, s15
 8000c54:	b212      	sxth	r2, r2
 8000c56:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	77fb      	strb	r3, [r7, #31]
 8000c5e:	7ffb      	ldrb	r3, [r7, #31]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d9e0      	bls.n	8000c26 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	3d79db23 	.word	0x3d79db23
 8000c70:	3df9db23 	.word	0x3df9db23
 8000c74:	3e79db23 	.word	0x3e79db23
 8000c78:	3ef9db23 	.word	0x3ef9db23

08000c7c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef PART1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8a:	4841      	ldr	r0, [pc, #260]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c8c:	f001 fa4a 	bl	8002124 <HAL_GPIO_TogglePin>

		if(state%4 == 0){
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d115      	bne.n	8000cca <HAL_GPIO_EXTI_Callback+0x4e>
			sprintf(hSensor_buffer, "Humidity Value: %d\n", (uint8_t)hValue);
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca8:	edc7 7a00 	vstr	s15, [r7]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	493a      	ldr	r1, [pc, #232]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x120>)
 8000cb4:	483a      	ldr	r0, [pc, #232]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cb6:	f004 fe21 	bl	80058fc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)hSensor_buffer, 100, 30000);
 8000cba:	f247 5330 	movw	r3, #30000	; 0x7530
 8000cbe:	2264      	movs	r2, #100	; 0x64
 8000cc0:	4937      	ldr	r1, [pc, #220]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x124>)
 8000cc2:	4838      	ldr	r0, [pc, #224]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000cc4:	f003 fff6 	bl	8004cb4 <HAL_UART_Transmit>
 8000cc8:	e058      	b.n	8000d7c <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(state%4 == 1){
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d115      	bne.n	8000d04 <HAL_GPIO_EXTI_Callback+0x88>
			sprintf(tSensor_buffer, "Temperature Value: %d\n", (uint8_t)tValue);
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ce2:	edc7 7a00 	vstr	s15, [r7]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	492f      	ldr	r1, [pc, #188]	; (8000dac <HAL_GPIO_EXTI_Callback+0x130>)
 8000cee:	4830      	ldr	r0, [pc, #192]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x134>)
 8000cf0:	f004 fe04 	bl	80058fc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tSensor_buffer, 100, 30000);
 8000cf4:	f247 5330 	movw	r3, #30000	; 0x7530
 8000cf8:	2264      	movs	r2, #100	; 0x64
 8000cfa:	492d      	ldr	r1, [pc, #180]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x134>)
 8000cfc:	4829      	ldr	r0, [pc, #164]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000cfe:	f003 ffd9 	bl	8004cb4 <HAL_UART_Transmit>
 8000d02:	e03b      	b.n	8000d7c <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(state%4 == 2){
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d118      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0xc8>
			sprintf(accelero_buffer, "Accelerometer Values: \n X: %d Y: %d Z: %d\n", accelero[0], accelero[1], accelero[2]);
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000d1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x138>)
 8000d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4922      	ldr	r1, [pc, #136]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000d2e:	4823      	ldr	r0, [pc, #140]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x140>)
 8000d30:	f004 fde4 	bl	80058fc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)accelero_buffer, 100, 30000);
 8000d34:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d38:	2264      	movs	r2, #100	; 0x64
 8000d3a:	4920      	ldr	r1, [pc, #128]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x140>)
 8000d3c:	4819      	ldr	r0, [pc, #100]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000d3e:	f003 ffb9 	bl	8004cb4 <HAL_UART_Transmit>
 8000d42:	e01b      	b.n	8000d7c <HAL_GPIO_EXTI_Callback+0x100>
		}
		else if(state%4 == 3){
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d114      	bne.n	8000d7c <HAL_GPIO_EXTI_Callback+0x100>
			sprintf(pressure_buff, "Pressure Value: %d\n", (uint8_t)psensor);
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x144>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d5c:	edc7 7a00 	vstr	s15, [r7]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4917      	ldr	r1, [pc, #92]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x148>)
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d6a:	f004 fdc7 	bl	80058fc <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)pressure_buff, 100, 30000);
 8000d6e:	f247 5330 	movw	r3, #30000	; 0x7530
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	4914      	ldr	r1, [pc, #80]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x128>)
 8000d78:	f003 ff9c 	bl	8004cb4 <HAL_UART_Transmit>
		}
		state += 1;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x118>)
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	48000400 	.word	0x48000400
 8000d94:	200000e8 	.word	0x200000e8
 8000d98:	200003e4 	.word	0x200003e4
 8000d9c:	08006120 	.word	0x08006120
 8000da0:	2000021c 	.word	0x2000021c
 8000da4:	200002f4 	.word	0x200002f4
 8000da8:	200002e4 	.word	0x200002e4
 8000dac:	08006134 	.word	0x08006134
 8000db0:	20000280 	.word	0x20000280
 8000db4:	200003ec 	.word	0x200003ec
 8000db8:	0800614c 	.word	0x0800614c
 8000dbc:	200001b8 	.word	0x200001b8
 8000dc0:	200003e8 	.word	0x200003e8
 8000dc4:	08006178 	.word	0x08006178
 8000dc8:	20000380 	.word	0x20000380

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fdcf 	bl	8001972 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_HSENSOR_Init();
 8000dd4:	f000 fb4e 	bl	8001474 <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000dd8:	f000 fba8 	bl	800152c <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 8000ddc:	f000 faf4 	bl	80013c8 <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8000de0:	f000 fb76 	bl	80014d0 <BSP_PSENSOR_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f82a 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 f92e 	bl	8001048 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000dec:	f000 f8a0 	bl	8000f30 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000df0:	f000 f8de 	bl	8000fb0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef PART1
  hValue = BSP_HSENSOR_ReadHumidity();
 8000df4:	f000 fb5e 	bl	80014b4 <BSP_HSENSOR_ReadHumidity>
 8000df8:	eef0 7a40 	vmov.f32	s15, s0
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <main+0x60>)
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
  tValue = BSP_TSENSOR_ReadTemp();
 8000e02:	f000 fbaf 	bl	8001564 <BSP_TSENSOR_ReadTemp>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <main+0x64>)
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
  psensor = BSP_PSENSOR_ReadPressure();
 8000e10:	f000 fb7e 	bl	8001510 <BSP_PSENSOR_ReadPressure>
 8000e14:	eef0 7a40 	vmov.f32	s15, s0
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <main+0x68>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]
  BSP_ACCELERO_AccGetXYZ(accelero);
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <main+0x6c>)
 8000e20:	f000 fb10 	bl	8001444 <BSP_ACCELERO_AccGetXYZ>


//	  sprintf(hSensor_buffer, "Hello World");
//	  HAL_UART_Transmit(&huart1, (uint8_t*)hSensor_buffer, 100, 10000);

	  HAL_Delay(10);
 8000e24:	200a      	movs	r0, #10
 8000e26:	f000 fddd 	bl	80019e4 <HAL_Delay>
 8000e2a:	e7fb      	b.n	8000e24 <main+0x58>
 8000e2c:	200003e4 	.word	0x200003e4
 8000e30:	200002e4 	.word	0x200002e4
 8000e34:	200003e8 	.word	0x200003e8
 8000e38:	200003ec 	.word	0x200003ec

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0bc      	sub	sp, #240	; 0xf0
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e46:	2244      	movs	r2, #68	; 0x44
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 fd4e 	bl	80058ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2294      	movs	r2, #148	; 0x94
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fd40 	bl	80058ec <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e70:	f001 ff4a 	bl	8002d08 <HAL_PWREx_ControlVoltageScaling>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000e7a:	f000 f951 	bl	8001120 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e90:	2360      	movs	r3, #96	; 0x60
 8000e92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ea8:	2328      	movs	r3, #40	; 0x28
 8000eaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f001 ffc3 	bl	8002e50 <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f926 	bl	8001120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ef2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fbcf 	bl	800369c <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f04:	f000 f90c 	bl	8001120 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000f08:	2381      	movs	r3, #129	; 0x81
 8000f0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fea2 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f22:	f000 f8fd 	bl	8001120 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	37f0      	adds	r7, #240	; 0xf0
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <MX_I2C2_Init+0x78>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <MX_I2C2_Init+0x7c>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f6c:	f001 f90c 	bl	8002188 <HAL_I2C_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f76:	f000 f8d3 	bl	8001120 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f7e:	f001 fe0b 	bl	8002b98 <HAL_I2CEx_ConfigAnalogFilter>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 f8ca 	bl	8001120 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_I2C2_Init+0x74>)
 8000f90:	f001 fe4d 	bl	8002c2e <HAL_I2CEx_ConfigDigitalFilter>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 f8c1 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000016c 	.word	0x2000016c
 8000fa8:	40005800 	.word	0x40005800
 8000fac:	10909cec 	.word	0x10909cec

08000fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <MX_USART1_UART_Init+0x94>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <MX_USART1_UART_Init+0x90>)
 8000ffa:	f003 fe0b 	bl	8004c14 <HAL_UART_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001004:	f000 f88c 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_USART1_UART_Init+0x90>)
 800100c:	f004 fb5f 	bl	80056ce <HAL_UARTEx_SetTxFifoThreshold>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001016:	f000 f883 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <MX_USART1_UART_Init+0x90>)
 800101e:	f004 fb94 	bl	800574a <HAL_UARTEx_SetRxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001028:	f000 f87a 	bl	8001120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_USART1_UART_Init+0x90>)
 800102e:	f004 fb15 	bl	800565c <HAL_UARTEx_DisableFifoMode>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001038:	f000 f872 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200002f4 	.word	0x200002f4
 8001044:	40013800 	.word	0x40013800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <MX_GPIO_Init+0xa4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <MX_GPIO_Init+0xa4>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_GPIO_Init+0xa4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_GPIO_Init+0xa4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_GPIO_Init+0xa4>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_GPIO_Init+0xa4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <MX_GPIO_Init+0xa8>)
 8001096:	f001 f82d 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800109a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_GPIO_Init+0xac>)
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <MX_GPIO_Init+0xb0>)
 80010b0:	f000 fd9c 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80010b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4619      	mov	r1, r3
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <MX_GPIO_Init+0xa8>)
 80010ce:	f000 fd8d 	bl	8001bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2028      	movs	r0, #40	; 0x28
 80010d8:	f000 fd5e 	bl	8001b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f000 fd77 	bl	8001bd0 <HAL_NVIC_EnableIRQ>

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	10110000 	.word	0x10110000
 80010f8:	48000800 	.word	0x48000800

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f000 fc49 	bl	80019a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40001000 	.word	0x40001000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001126:	e7fe      	b.n	8001126 <Error_Handler+0x6>

08001128 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <I2Cx_MspInit+0xa8>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001148:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800114c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800114e:	2312      	movs	r3, #18
 8001150:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800115a:	2304      	movs	r3, #4
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	481b      	ldr	r0, [pc, #108]	; (80011d4 <I2Cx_MspInit+0xac>)
 8001166:	f000 fd41 	bl	8001bec <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <I2Cx_MspInit+0xac>)
 8001172:	f000 fd3b 	bl	8001bec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <I2Cx_MspInit+0xa8>)
 800117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001180:	6593      	str	r3, [r2, #88]	; 0x58
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <I2Cx_MspInit+0xa8>)
 8001194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001198:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <I2Cx_MspInit+0xa8>)
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <I2Cx_MspInit+0xa8>)
 80011a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	210f      	movs	r1, #15
 80011aa:	2021      	movs	r0, #33	; 0x21
 80011ac:	f000 fcf4 	bl	8001b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80011b0:	2021      	movs	r0, #33	; 0x21
 80011b2:	f000 fd0d 	bl	8001bd0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210f      	movs	r1, #15
 80011ba:	2022      	movs	r0, #34	; 0x22
 80011bc:	f000 fcec 	bl	8001b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80011c0:	2022      	movs	r0, #34	; 0x22
 80011c2:	f000 fd05 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400

080011d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <I2Cx_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <I2Cx_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff89 	bl	8001128 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 ffb6 	bl	8002188 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f001 fcba 	bl	8002b98 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40005800 	.word	0x40005800
 8001230:	00702681 	.word	0x00702681

08001234 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af04      	add	r7, sp, #16
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4603      	mov	r3, r0
 8001244:	72fb      	strb	r3, [r7, #11]
 8001246:	460b      	mov	r3, r1
 8001248:	813b      	strh	r3, [r7, #8]
 800124a:	4613      	mov	r3, r2
 800124c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	b299      	uxth	r1, r3
 8001256:	88f8      	ldrh	r0, [r7, #6]
 8001258:	893a      	ldrh	r2, [r7, #8]
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4603      	mov	r3, r0
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f001 f95e 	bl	800252c <HAL_I2C_Mem_Read>
 8001270:	4603      	mov	r3, r0
 8001272:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	4619      	mov	r1, r3
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f832 	bl	80012e8 <I2Cx_Error>
  }
  return status;
 8001284:	7dfb      	ldrb	r3, [r7, #23]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b08a      	sub	sp, #40	; 0x28
 8001292:	af04      	add	r7, sp, #16
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	4608      	mov	r0, r1
 8001298:	4611      	mov	r1, r2
 800129a:	461a      	mov	r2, r3
 800129c:	4603      	mov	r3, r0
 800129e:	72fb      	strb	r3, [r7, #11]
 80012a0:	460b      	mov	r3, r1
 80012a2:	813b      	strh	r3, [r7, #8]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	b299      	uxth	r1, r3
 80012b0:	88f8      	ldrh	r0, [r7, #6]
 80012b2:	893a      	ldrh	r2, [r7, #8]
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4603      	mov	r3, r0
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f001 f81d 	bl	8002304 <HAL_I2C_Mem_Write>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f000 f805 	bl	80012e8 <I2Cx_Error>
  }
  return status;
 80012de:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 ffd6 	bl	80022a6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff6c 	bl	80011d8 <I2Cx_Init>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <SENSOR_IO_Init+0x10>)
 800130e:	f7ff ff63 	bl	80011d8 <I2Cx_Init>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000480 	.word	0x20000480

0800131c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	460b      	mov	r3, r1
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	b29a      	uxth	r2, r3
 8001332:	79f9      	ldrb	r1, [r7, #7]
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	1d7b      	adds	r3, r7, #5
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <SENSOR_IO_Write+0x30>)
 8001340:	f7ff ffa5 	bl	800128e <I2Cx_WriteMultiple>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000480 	.word	0x20000480

08001350 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	460a      	mov	r2, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	b29a      	uxth	r2, r3
 8001368:	79f9      	ldrb	r1, [r7, #7]
 800136a:	2301      	movs	r3, #1
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	4804      	ldr	r0, [pc, #16]	; (8001388 <SENSOR_IO_Read+0x38>)
 8001378:	f7ff ff5c 	bl	8001234 <I2Cx_ReadMultiple>

  return read_value;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000480 	.word	0x20000480

0800138c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
 8001392:	603a      	str	r2, [r7, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	460b      	mov	r3, r1
 800139c:	71bb      	strb	r3, [r7, #6]
 800139e:	4613      	mov	r3, r2
 80013a0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80013a2:	79bb      	ldrb	r3, [r7, #6]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	79f9      	ldrb	r1, [r7, #7]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <SENSOR_IO_ReadMultiple+0x38>)
 80013b4:	f7ff ff3e 	bl	8001234 <I2Cx_ReadMultiple>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29b      	uxth	r3, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000480 	.word	0x20000480

080013c8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80013d2:	2300      	movs	r3, #0
 80013d4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <BSP_ACCELERO_Init+0x74>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b6a      	cmp	r3, #106	; 0x6a
 80013e0:	d002      	beq.n	80013e8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e024      	b.n	8001432 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <BSP_ACCELERO_Init+0x78>)
 80013ea:	4a14      	ldr	r2, [pc, #80]	; (800143c <BSP_ACCELERO_Init+0x74>)
 80013ec:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80013ee:	2330      	movs	r3, #48	; 0x30
 80013f0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80013f6:	2300      	movs	r3, #0
 80013f8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80013fa:	2340      	movs	r3, #64	; 0x40
 80013fc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001406:	797a      	ldrb	r2, [r7, #5]
 8001408:	7abb      	ldrb	r3, [r7, #10]
 800140a:	4313      	orrs	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001410:	7a3b      	ldrb	r3, [r7, #8]
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	b2db      	uxtb	r3, r3
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <BSP_ACCELERO_Init+0x78>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	89ba      	ldrh	r2, [r7, #12]
 800142e:	4610      	mov	r0, r2
 8001430:	4798      	blx	r3
  }  

  return ret;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000028 	.word	0x20000028
 8001440:	200000ec 	.word	0x200000ec

08001444 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	4798      	blx	r3
    }
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200000ec 	.word	0x200000ec

08001474 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <BSP_HSENSOR_Init+0x38>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	20be      	movs	r0, #190	; 0xbe
 8001480:	4798      	blx	r3
 8001482:	4603      	mov	r3, r0
 8001484:	2bbc      	cmp	r3, #188	; 0xbc
 8001486:	d002      	beq.n	800148e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	e009      	b.n	80014a2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <BSP_HSENSOR_Init+0x3c>)
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <BSP_HSENSOR_Init+0x38>)
 8001492:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <BSP_HSENSOR_Init+0x3c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	20be      	movs	r0, #190	; 0xbe
 800149c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	200000f0 	.word	0x200000f0

080014b4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <BSP_HSENSOR_ReadHumidity+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	20be      	movs	r0, #190	; 0xbe
 80014c0:	4798      	blx	r3
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000f0 	.word	0x200000f0

080014d0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <BSP_PSENSOR_Init+0x38>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	20ba      	movs	r0, #186	; 0xba
 80014dc:	4798      	blx	r3
 80014de:	4603      	mov	r3, r0
 80014e0:	2bb1      	cmp	r3, #177	; 0xb1
 80014e2:	d002      	beq.n	80014ea <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	e009      	b.n	80014fe <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <BSP_PSENSOR_Init+0x3c>)
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <BSP_PSENSOR_Init+0x38>)
 80014ee:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <BSP_PSENSOR_Init+0x3c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	20ba      	movs	r0, #186	; 0xba
 80014f8:	4798      	blx	r3
    ret = PSENSOR_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000001c 	.word	0x2000001c
 800150c:	200000f4 	.word	0x200000f4

08001510 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <BSP_PSENSOR_ReadPressure+0x18>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	20ba      	movs	r0, #186	; 0xba
 800151c:	4798      	blx	r3
 800151e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000f4 	.word	0x200000f4

0800152c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <BSP_TSENSOR_Init+0x30>)
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <BSP_TSENSOR_Init+0x34>)
 800153a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800153c:	f7ff fee4 	bl	8001308 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <BSP_TSENSOR_Init+0x30>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2100      	movs	r1, #0
 8001548:	20be      	movs	r0, #190	; 0xbe
 800154a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000f8 	.word	0x200000f8
 8001560:	2000000c 	.word	0x2000000c

08001564 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <BSP_TSENSOR_ReadTemp+0x18>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	20be      	movs	r0, #190	; 0xbe
 8001570:	4798      	blx	r3
 8001572:	eef0 7a40 	vmov.f32	s15, s0
}
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200000f8 	.word	0x200000f8

08001580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <HAL_MspInit+0x44>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_MspInit+0x44>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6613      	str	r3, [r2, #96]	; 0x60
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_MspInit+0x44>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_MspInit+0x44>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x44>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6593      	str	r3, [r2, #88]	; 0x58
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x44>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a17      	ldr	r2, [pc, #92]	; (8001644 <HAL_I2C_MspInit+0x7c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d128      	bne.n	800163c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_I2C_MspInit+0x80>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_I2C_MspInit+0x80>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_I2C_MspInit+0x80>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001602:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001608:	2312      	movs	r3, #18
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001614:	2304      	movs	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_I2C_MspInit+0x84>)
 8001620:	f000 fae4 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x80>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_I2C_MspInit+0x80>)
 800162a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162e:	6593      	str	r3, [r2, #88]	; 0x58
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_I2C_MspInit+0x80>)
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005800 	.word	0x40005800
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400

08001650 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_I2C_MspDeInit+0x3c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10f      	bne.n	8001682 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_I2C_MspDeInit+0x40>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_I2C_MspDeInit+0x40>)
 8001668:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800166c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800166e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <HAL_I2C_MspDeInit+0x44>)
 8001674:	f000 fc4c 	bl	8001f10 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <HAL_I2C_MspDeInit+0x44>)
 800167e:	f000 fc47 	bl	8001f10 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005800 	.word	0x40005800
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d127      	bne.n	800170a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c4:	6613      	str	r3, [r2, #96]	; 0x60
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ea:	23c0      	movs	r3, #192	; 0xc0
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x84>)
 8001706:	f000 fa71 	bl	8001bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40013800 	.word	0x40013800
 8001718:	40021000 	.word	0x40021000
 800171c:	48000400 	.word	0x48000400

08001720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	2036      	movs	r0, #54	; 0x36
 8001736:	f000 fa2f 	bl	8001b98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800173a:	2036      	movs	r0, #54	; 0x36
 800173c:	f000 fa48 	bl	8001bd0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_InitTick+0x9c>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_InitTick+0x9c>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6593      	str	r3, [r2, #88]	; 0x58
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_InitTick+0x9c>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001758:	f107 0210 	add.w	r2, r7, #16
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f002 f988 	bl	8003a78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001768:	f002 f95a 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800176c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <HAL_InitTick+0xa0>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	3b01      	subs	r3, #1
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_InitTick+0xa4>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_InitTick+0xa8>)
 8001780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_InitTick+0xa4>)
 8001784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001788:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_InitTick+0xa4>)
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_InitTick+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_InitTick+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <HAL_InitTick+0xa4>)
 800179e:	f002 ff67 	bl	8004670 <HAL_TIM_Base_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <HAL_InitTick+0xa4>)
 80017aa:	f002 ffc3 	bl	8004734 <HAL_TIM_Base_Start_IT>
 80017ae:	4603      	mov	r3, r0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	431bde83 	.word	0x431bde83
 80017c4:	200004cc 	.word	0x200004cc
 80017c8:	40001000 	.word	0x40001000

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001826:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800182a:	f000 fc95 	bl	8002158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <TIM6_DAC_IRQHandler+0x10>)
 800183a:	f002 ffeb 	bl	8004814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200004cc 	.word	0x200004cc

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f004 f80e 	bl	8005898 <__errno>
 800187c:	4602      	mov	r2, r0
 800187e:	230c      	movs	r3, #12
 8001880:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200a0000 	.word	0x200a0000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	200000fc 	.word	0x200000fc
 80018b0:	20000520 	.word	0x20000520

080018b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <SystemInit+0x64>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <SystemInit+0x64>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <SystemInit+0x68>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a13      	ldr	r2, [pc, #76]	; (800191c <SystemInit+0x68>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <SystemInit+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <SystemInit+0x68>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <SystemInit+0x68>)
 80018e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80018e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80018e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <SystemInit+0x68>)
 80018ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <SystemInit+0x68>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <SystemInit+0x68>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <SystemInit+0x68>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SystemInit+0x64>)
 8001906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190a:	609a      	str	r2, [r3, #8]
#endif
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	40021000 	.word	0x40021000

08001920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001924:	f7ff ffc6 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001928:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800192a:	e003      	b.n	8001934 <LoopCopyDataInit>

0800192c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800192e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001930:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001932:	3104      	adds	r1, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001938:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800193a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800193c:	d3f6      	bcc.n	800192c <CopyDataInit>
	ldr	r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001940:	e002      	b.n	8001948 <LoopFillZerobss>

08001942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001942:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001944:	f842 3b04 	str.w	r3, [r2], #4

08001948 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LoopForever+0x16>)
	cmp	r2, r3
 800194a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800194c:	d3f9      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f003 ffa9 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001952:	f7ff fa3b 	bl	8000dcc <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001958:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800195c:	08006240 	.word	0x08006240
	ldr	r0, =_sdata
 8001960:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001964:	200000cc 	.word	0x200000cc
	ldr	r2, =_sbss
 8001968:	200000cc 	.word	0x200000cc
	ldr	r3, = _ebss
 800196c:	20000520 	.word	0x20000520

08001970 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_IRQHandler>

08001972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f900 	bl	8001b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fecc 	bl	8001720 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	71fb      	strb	r3, [r7, #7]
 8001992:	e001      	b.n	8001998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001994:	f7ff fdf4 	bl	8001580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001998:	79fb      	ldrb	r3, [r7, #7]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000064 	.word	0x20000064
 80019c8:	20000518 	.word	0x20000518

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000518 	.word	0x20000518

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_Delay+0x40>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000064 	.word	0x20000064

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ff4c 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001baa:	f7ff ff61 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f7ff ffb1 	bl	8001b1c <NVIC_EncodePriority>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff80 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff54 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e166      	b.n	8001eca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8158 	beq.w	8001ec4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d00b      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0xea>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b12      	cmp	r3, #18
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80b2 	beq.w	8001ec4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d64:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6c:	4b5e      	ldr	r3, [pc, #376]	; (8001ee8 <HAL_GPIO_Init+0x2fc>)
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d78:	4a5c      	ldr	r2, [pc, #368]	; (8001eec <HAL_GPIO_Init+0x300>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001da2:	d02b      	beq.n	8001dfc <HAL_GPIO_Init+0x210>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d025      	beq.n	8001df8 <HAL_GPIO_Init+0x20c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x308>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d01f      	beq.n	8001df4 <HAL_GPIO_Init+0x208>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d019      	beq.n	8001df0 <HAL_GPIO_Init+0x204>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x310>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x200>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x314>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1fc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x318>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1f8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x31c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1f4>
 8001ddc:	2307      	movs	r3, #7
 8001dde:	e00e      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de0:	2308      	movs	r3, #8
 8001de2:	e00c      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de4:	2306      	movs	r3, #6
 8001de6:	e00a      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e008      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dec:	2304      	movs	r3, #4
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e004      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e002      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0x212>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	f002 0203 	and.w	r2, r2, #3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4093      	lsls	r3, r2
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0e:	4937      	ldr	r1, [pc, #220]	; (8001eec <HAL_GPIO_Init+0x300>)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e40:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_GPIO_Init+0x320>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f ae91 	bne.w	8001bfc <HAL_GPIO_Init+0x10>
  }
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	48000400 	.word	0x48000400
 8001ef4:	48000800 	.word	0x48000800
 8001ef8:	48000c00 	.word	0x48000c00
 8001efc:	48001000 	.word	0x48001000
 8001f00:	48001400 	.word	0x48001400
 8001f04:	48001800 	.word	0x48001800
 8001f08:	48001c00 	.word	0x48001c00
 8001f0c:	40010400 	.word	0x40010400

08001f10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f1e:	e0c9      	b.n	80020b4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f20:	2201      	movs	r2, #1
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80bc 	beq.w	80020ae <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f36:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_GPIO_DeInit+0x1c0>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5e:	d02b      	beq.n	8001fb8 <HAL_GPIO_DeInit+0xa8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a5c      	ldr	r2, [pc, #368]	; (80020d4 <HAL_GPIO_DeInit+0x1c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d025      	beq.n	8001fb4 <HAL_GPIO_DeInit+0xa4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <HAL_GPIO_DeInit+0x1c8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d01f      	beq.n	8001fb0 <HAL_GPIO_DeInit+0xa0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a5a      	ldr	r2, [pc, #360]	; (80020dc <HAL_GPIO_DeInit+0x1cc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d019      	beq.n	8001fac <HAL_GPIO_DeInit+0x9c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a59      	ldr	r2, [pc, #356]	; (80020e0 <HAL_GPIO_DeInit+0x1d0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_GPIO_DeInit+0x98>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a58      	ldr	r2, [pc, #352]	; (80020e4 <HAL_GPIO_DeInit+0x1d4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <HAL_GPIO_DeInit+0x94>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <HAL_GPIO_DeInit+0x1d8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <HAL_GPIO_DeInit+0x90>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_GPIO_DeInit+0x1dc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_GPIO_DeInit+0x8c>
 8001f98:	2307      	movs	r3, #7
 8001f9a:	e00e      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	e00c      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e00a      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e008      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_DeInit+0xaa>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d132      	bne.n	8002030 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001fca:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4947      	ldr	r1, [pc, #284]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001fd8:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	4943      	ldr	r1, [pc, #268]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4940      	ldr	r1, [pc, #256]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	493c      	ldr	r1, [pc, #240]	; (80020f0 <HAL_GPIO_DeInit+0x1e0>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002012:	4a2f      	ldr	r2, [pc, #188]	; (80020d0 <HAL_GPIO_DeInit+0x1c0>)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	3302      	adds	r3, #2
 800201a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43da      	mvns	r2, r3
 8002022:	482b      	ldr	r0, [pc, #172]	; (80020d0 <HAL_GPIO_DeInit+0x1c0>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	400a      	ands	r2, r1
 800202a:	3302      	adds	r3, #2
 800202c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2103      	movs	r1, #3
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	08d2      	lsrs	r2, r2, #3
 8002064:	4019      	ands	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2103      	movs	r1, #3
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	2101      	movs	r1, #1
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	401a      	ands	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2103      	movs	r1, #3
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f af2f 	bne.w	8001f20 <HAL_GPIO_DeInit+0x10>
  }
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40010000 	.word	0x40010000
 80020d4:	48000400 	.word	0x48000400
 80020d8:	48000800 	.word	0x48000800
 80020dc:	48000c00 	.word	0x48000c00
 80020e0:	48001000 	.word	0x48001000
 80020e4:	48001400 	.word	0x48001400
 80020e8:	48001800 	.word	0x48001800
 80020ec:	48001c00 	.word	0x48001c00
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002110:	e002      	b.n	8002118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4013      	ands	r3, r2
 800213c:	041a      	lsls	r2, r3, #16
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43d9      	mvns	r1, r3
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	400b      	ands	r3, r1
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fd80 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e081      	b.n	800229e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fa0a 	bl	80015c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	; 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e006      	b.n	8002210 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800220e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d104      	bne.n	8002222 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002220:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002234:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002244:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	ea42 0103 	orr.w	r1, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	021a      	lsls	r2, r3, #8
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69d9      	ldr	r1, [r3, #28]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1a      	ldr	r2, [r3, #32]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e021      	b.n	80022fc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	; 0x24
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff f9bd 	bl	8001650 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	461a      	mov	r2, r3
 8002312:	4603      	mov	r3, r0
 8002314:	817b      	strh	r3, [r7, #10]
 8002316:	460b      	mov	r3, r1
 8002318:	813b      	strh	r3, [r7, #8]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 80f9 	bne.w	800251e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_I2C_Mem_Write+0x34>
 8002332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0ed      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_I2C_Mem_Write+0x4e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0e6      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800235a:	f7ff fb37 	bl	80019cc <HAL_GetTick>
 800235e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2319      	movs	r3, #25
 8002366:	2201      	movs	r2, #1
 8002368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fac3 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0d1      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2221      	movs	r2, #33	; 0x21
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2240      	movs	r2, #64	; 0x40
 8002388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a4:	88f8      	ldrh	r0, [r7, #6]
 80023a6:	893a      	ldrh	r2, [r7, #8]
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4603      	mov	r3, r0
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f9d3 	bl	8002760 <I2C_RequestMemoryWrite>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0a9      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d90e      	bls.n	80023f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	8979      	ldrh	r1, [r7, #10]
 80023e4:	2300      	movs	r3, #0
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fba5 	bl	8002b3c <I2C_TransferConfig>
 80023f2:	e00f      	b.n	8002414 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	2300      	movs	r3, #0
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb94 	bl	8002b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 faad 	bl	8002978 <I2C_WaitOnTXISFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e07b      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d034      	beq.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d130      	bne.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002470:	2200      	movs	r2, #0
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fa3f 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e04d      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2bff      	cmp	r3, #255	; 0xff
 800248c:	d90e      	bls.n	80024ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	22ff      	movs	r2, #255	; 0xff
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	b2da      	uxtb	r2, r3
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fb49 	bl	8002b3c <I2C_TransferConfig>
 80024aa:	e00f      	b.n	80024cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fb38 	bl	8002b3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d19e      	bne.n	8002414 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa8c 	bl	80029f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e01a      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2220      	movs	r2, #32
 80024f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_I2C_Mem_Write+0x224>)
 80024fe:	400b      	ands	r3, r1
 8002500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800251e:	2302      	movs	r3, #2
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	fe00e800 	.word	0xfe00e800

0800252c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	4608      	mov	r0, r1
 8002536:	4611      	mov	r1, r2
 8002538:	461a      	mov	r2, r3
 800253a:	4603      	mov	r3, r0
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	460b      	mov	r3, r1
 8002540:	813b      	strh	r3, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b20      	cmp	r3, #32
 8002550:	f040 80fd 	bne.w	800274e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_I2C_Mem_Read+0x34>
 800255a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0f1      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_I2C_Mem_Read+0x4e>
 8002576:	2302      	movs	r3, #2
 8002578:	e0ea      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002582:	f7ff fa23 	bl	80019cc <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f9af 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d5      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2222      	movs	r2, #34	; 0x22
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025cc:	88f8      	ldrh	r0, [r7, #6]
 80025ce:	893a      	ldrh	r2, [r7, #8]
 80025d0:	8979      	ldrh	r1, [r7, #10]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4603      	mov	r3, r0
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f913 	bl	8002808 <I2C_RequestMemoryRead>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0ad      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d90e      	bls.n	800261c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	b2da      	uxtb	r2, r3
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	4b52      	ldr	r3, [pc, #328]	; (8002758 <HAL_I2C_Mem_Read+0x22c>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fa91 	bl	8002b3c <I2C_TransferConfig>
 800261a:	e00f      	b.n	800263c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	b2da      	uxtb	r2, r3
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	4b4a      	ldr	r3, [pc, #296]	; (8002758 <HAL_I2C_Mem_Read+0x22c>)
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa80 	bl	8002b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	2200      	movs	r2, #0
 8002644:	2104      	movs	r1, #4
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f956 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07c      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d034      	beq.n	80026fc <HAL_I2C_Mem_Read+0x1d0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002696:	2b00      	cmp	r3, #0
 8002698:	d130      	bne.n	80026fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2200      	movs	r2, #0
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f927 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e04d      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d90e      	bls.n	80026dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	22ff      	movs	r2, #255	; 0xff
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	8979      	ldrh	r1, [r7, #10]
 80026cc:	2300      	movs	r3, #0
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fa31 	bl	8002b3c <I2C_TransferConfig>
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa20 	bl	8002b3c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d19a      	bne.n	800263c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f974 	bl	80029f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e01a      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2220      	movs	r2, #32
 8002720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_I2C_Mem_Read+0x230>)
 800272e:	400b      	ands	r3, r1
 8002730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800274e:	2302      	movs	r3, #2
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	80002400 	.word	0x80002400
 800275c:	fe00e800 	.word	0xfe00e800

08002760 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	817b      	strh	r3, [r7, #10]
 8002772:	460b      	mov	r3, r1
 8002774:	813b      	strh	r3, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	8979      	ldrh	r1, [r7, #10]
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <I2C_RequestMemoryWrite+0xa4>)
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9d7 	bl	8002b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	69b9      	ldr	r1, [r7, #24]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f8f0 	bl	8002978 <I2C_WaitOnTXISFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e02c      	b.n	80027fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027a8:	893b      	ldrh	r3, [r7, #8]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
 80027b2:	e015      	b.n	80027e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027b4:	893b      	ldrh	r3, [r7, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	69b9      	ldr	r1, [r7, #24]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f8d6 	bl	8002978 <I2C_WaitOnTXISFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e012      	b.n	80027fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d6:	893b      	ldrh	r3, [r7, #8]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f884 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	80002000 	.word	0x80002000

08002808 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	4608      	mov	r0, r1
 8002812:	4611      	mov	r1, r2
 8002814:	461a      	mov	r2, r3
 8002816:	4603      	mov	r3, r0
 8002818:	817b      	strh	r3, [r7, #10]
 800281a:	460b      	mov	r3, r1
 800281c:	813b      	strh	r3, [r7, #8]
 800281e:	4613      	mov	r3, r2
 8002820:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	8979      	ldrh	r1, [r7, #10]
 8002828:	4b20      	ldr	r3, [pc, #128]	; (80028ac <I2C_RequestMemoryRead+0xa4>)
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f984 	bl	8002b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f89d 	bl	8002978 <I2C_WaitOnTXISFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e02c      	b.n	80028a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
 8002858:	e015      	b.n	8002886 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800285a:	893b      	ldrh	r3, [r7, #8]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	b29b      	uxth	r3, r3
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f883 	bl	8002978 <I2C_WaitOnTXISFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e012      	b.n	80028a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2200      	movs	r2, #0
 800288e:	2140      	movs	r1, #64	; 0x40
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f831 	bl	80028f8 <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	80002000 	.word	0x80002000

080028b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d103      	bne.n	80028ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d007      	beq.n	80028ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	619a      	str	r2, [r3, #24]
  }
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002908:	e022      	b.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002910:	d01e      	beq.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002912:	f7ff f85b 	bl	80019cc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d302      	bcc.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d113      	bne.n	8002950 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00f      	b.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d0cd      	beq.n	800290a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002984:	e02c      	b.n	80029e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f870 	bl	8002a70 <I2C_IsAcknowledgeFailed>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e02a      	b.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a0:	d01e      	beq.n	80029e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7ff f813 	bl	80019cc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d113      	bne.n	80029e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e007      	b.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d1cb      	bne.n	8002986 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a04:	e028      	b.n	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f830 	bl	8002a70 <I2C_IsAcknowledgeFailed>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e026      	b.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe ffd7 	bl	80019cc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d113      	bne.n	8002a58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e007      	b.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d1cf      	bne.n	8002a06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d151      	bne.n	8002b2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8a:	e022      	b.n	8002ad2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a92:	d01e      	beq.n	8002ad2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a94:	f7fe ff9a 	bl	80019cc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d302      	bcc.n	8002aaa <I2C_IsAcknowledgeFailed+0x3a>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d113      	bne.n	8002ad2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e02e      	b.n	8002b30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d1d5      	bne.n	8002a8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f7ff fedd 	bl	80028b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <I2C_IsAcknowledgeFailed+0xc8>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f043 0204 	orr.w	r2, r3, #4
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	fe00e800 	.word	0xfe00e800

08002b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	0d5b      	lsrs	r3, r3, #21
 8002b58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b5c:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <I2C_TransferConfig+0x58>)
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	43db      	mvns	r3, r3
 8002b62:	ea02 0103 	and.w	r1, r2, r3
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b6c:	7a7b      	ldrb	r3, [r7, #9]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	03ff63ff 	.word	0x03ff63ff

08002b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d138      	bne.n	8002c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e032      	b.n	8002c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e000      	b.n	8002c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d139      	bne.n	8002cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e033      	b.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	; 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d102      	bne.n	8002ce0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cde:	e00b      	b.n	8002cf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cee:	d102      	bne.n	8002cf6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf4:	e000      	b.n	8002cf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002cf6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40007000 	.word	0x40007000

08002d08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d141      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d16:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d131      	bne.n	8002d88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d24:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2a:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d3c:	4a41      	ldr	r2, [pc, #260]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002d44:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2232      	movs	r2, #50	; 0x32
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5a:	e002      	b.n	8002d62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d62:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d102      	bne.n	8002d76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f2      	bne.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d158      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e057      	b.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d98:	e04d      	b.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da0:	d141      	bne.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d131      	bne.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db6:	4a23      	ldr	r2, [pc, #140]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc8:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002dd0:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2232      	movs	r2, #50	; 0x32
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	0c9b      	lsrs	r3, r3, #18
 8002de2:	3301      	adds	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de6:	e002      	b.n	8002dee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d102      	bne.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f2      	bne.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0e:	d112      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e011      	b.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e24:	e007      	b.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e34:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40007000 	.word	0x40007000
 8002e48:	2000005c 	.word	0x2000005c
 8002e4c:	431bde83 	.word	0x431bde83

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f000 bc16 	b.w	8003690 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e64:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6e:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80e4 	beq.w	800304e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4c>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	f040 808b 	bne.w	8002faa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	f040 8087 	bne.w	8002faa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e9c:	4b92      	ldr	r3, [pc, #584]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x64>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e3ed      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b8b      	ldr	r3, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_RCC_OscConfig+0x7e>
 8002ec4:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ecc:	e005      	b.n	8002eda <HAL_RCC_OscConfig+0x8a>
 8002ece:	4b86      	ldr	r3, [pc, #536]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d223      	bcs.n	8002f26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fdfa 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e3ce      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef2:	4b7d      	ldr	r3, [pc, #500]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7c      	ldr	r2, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4977      	ldr	r1, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	4b75      	ldr	r3, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	4972      	ldr	r1, [pc, #456]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	e025      	b.n	8002f72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	496a      	ldr	r1, [pc, #424]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4965      	ldr	r1, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fdba 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e38e      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f72:	f000 fcbf 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 8002f76:	4601      	mov	r1, r0
 8002f78:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	4a5a      	ldr	r2, [pc, #360]	; (80030ec <HAL_RCC_OscConfig+0x29c>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x2a0>)
 8002f90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f92:	4b58      	ldr	r3, [pc, #352]	; (80030f4 <HAL_RCC_OscConfig+0x2a4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fbc2 	bl	8001720 <HAL_InitTick>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d052      	beq.n	800304c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	e372      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d032      	beq.n	8003018 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fb2:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fd05 	bl	80019cc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fd01 	bl	80019cc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e35b      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd8:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe4:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002fea:	f043 0308 	orr.w	r3, r3, #8
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	493a      	ldr	r1, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	4935      	ldr	r1, [pc, #212]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
 8003016:	e01a      	b.n	800304e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a32      	ldr	r2, [pc, #200]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003024:	f7fe fcd2 	bl	80019cc <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800302c:	f7fe fcce 	bl	80019cc <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e328      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x1dc>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d073      	beq.n	8003142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x21c>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d10e      	bne.n	8003084 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d063      	beq.n	8003140 <HAL_RCC_OscConfig+0x2f0>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d15f      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e305      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x24c>
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0x288>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x270>
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0x288>
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <HAL_RCC_OscConfig+0x298>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe fc74 	bl	80019cc <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e6:	e010      	b.n	800310a <HAL_RCC_OscConfig+0x2ba>
 80030e8:	40021000 	.word	0x40021000
 80030ec:	0800619c 	.word	0x0800619c
 80030f0:	2000005c 	.word	0x2000005c
 80030f4:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fc68 	bl	80019cc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e2c2      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310a:	4baf      	ldr	r3, [pc, #700]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2a8>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fc58 	bl	80019cc <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe fc54 	bl	80019cc <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e2ae      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003132:	4ba5      	ldr	r3, [pc, #660]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x2d0>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d060      	beq.n	8003210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d005      	beq.n	8003160 <HAL_RCC_OscConfig+0x310>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d119      	bne.n	800318e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d116      	bne.n	800318e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	4b99      	ldr	r3, [pc, #612]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x328>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e28b      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b93      	ldr	r3, [pc, #588]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	4990      	ldr	r1, [pc, #576]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	e040      	b.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d023      	beq.n	80031de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a8b      	ldr	r2, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe fc13 	bl	80019cc <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031aa:	f7fe fc0f 	bl	80019cc <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e269      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c8:	4b7f      	ldr	r3, [pc, #508]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	061b      	lsls	r3, r3, #24
 80031d6:	497c      	ldr	r1, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	e018      	b.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031de:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a79      	ldr	r2, [pc, #484]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80031e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ea:	f7fe fbef 	bl	80019cc <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f2:	f7fe fbeb 	bl	80019cc <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e245      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03c      	beq.n	8003296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01c      	beq.n	800325e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003224:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe fbca 	bl	80019cc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323c:	f7fe fbc6 	bl	80019cc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e220      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800324e:	4b5e      	ldr	r3, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ef      	beq.n	800323c <HAL_RCC_OscConfig+0x3ec>
 800325c:	e01b      	b.n	8003296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe fbad 	bl	80019cc <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe fba9 	bl	80019cc <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e203      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800328a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ef      	bne.n	8003276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a6 	beq.w	80033f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	4a43      	ldr	r2, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d0:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d118      	bne.n	800330e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3a      	ldr	r2, [pc, #232]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e8:	f7fe fb70 	bl	80019cc <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f0:	f7fe fb6c 	bl	80019cc <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1c6      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003302:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_RCC_OscConfig+0x57c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <HAL_RCC_OscConfig+0x4d8>
 8003316:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331c:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003326:	e024      	b.n	8003372 <HAL_RCC_OscConfig+0x522>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d110      	bne.n	8003352 <HAL_RCC_OscConfig+0x502>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003346:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003350:	e00f      	b.n	8003372 <HAL_RCC_OscConfig+0x522>
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003362:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800336a:	f023 0304 	bic.w	r3, r3, #4
 800336e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fb27 	bl	80019cc <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe fb23 	bl	80019cc <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e17b      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x578>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ed      	beq.n	8003382 <HAL_RCC_OscConfig+0x532>
 80033a6:	e01a      	b.n	80033de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe fb10 	bl	80019cc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ae:	e00f      	b.n	80033d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe fb0c 	bl	80019cc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d906      	bls.n	80033d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e164      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033d0:	4ba8      	ldr	r3, [pc, #672]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e8      	bne.n	80033b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033de:	7ffb      	ldrb	r3, [r7, #31]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4ba3      	ldr	r3, [pc, #652]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	4aa2      	ldr	r2, [pc, #648]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03c      	beq.n	8003476 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01c      	beq.n	800343e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003404:	4b9b      	ldr	r3, [pc, #620]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800340a:	4a9a      	ldr	r2, [pc, #616]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe fada 	bl	80019cc <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341c:	f7fe fad6 	bl	80019cc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e130      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800342e:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ef      	beq.n	800341c <HAL_RCC_OscConfig+0x5cc>
 800343c:	e01b      	b.n	8003476 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800343e:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003444:	4a8b      	ldr	r2, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fe fabd 	bl	80019cc <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003456:	f7fe fab9 	bl	80019cc <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e113      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003468:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800346a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ef      	bne.n	8003456 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8107 	beq.w	800368e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	2b02      	cmp	r3, #2
 8003486:	f040 80cb 	bne.w	8003620 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800348a:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	429a      	cmp	r2, r3
 800349c:	d12c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	3b01      	subs	r3, #1
 80034aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d123      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d11b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d113      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	085b      	lsrs	r3, r3, #1
 80034dc:	3b01      	subs	r3, #1
 80034de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d109      	bne.n	80034f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d06d      	beq.n	80035d4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d068      	beq.n	80035d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800350a:	4b5a      	ldr	r3, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0ba      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800351a:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a55      	ldr	r2, [pc, #340]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003526:	f7fe fa51 	bl	80019cc <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fa4d 	bl	80019cc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0a7      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003540:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b49      	ldr	r3, [pc, #292]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x828>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800355c:	3a01      	subs	r2, #1
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	4311      	orrs	r1, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003566:	0212      	lsls	r2, r2, #8
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800356e:	0852      	lsrs	r2, r2, #1
 8003570:	3a01      	subs	r2, #1
 8003572:	0552      	lsls	r2, r2, #21
 8003574:	4311      	orrs	r1, r2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800357a:	0852      	lsrs	r2, r2, #1
 800357c:	3a01      	subs	r2, #1
 800357e:	0652      	lsls	r2, r2, #25
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003586:	06d2      	lsls	r2, r2, #27
 8003588:	430a      	orrs	r2, r1
 800358a:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003590:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a34      	ldr	r2, [pc, #208]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035a8:	f7fe fa10 	bl	80019cc <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fa0c 	bl	80019cc <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e066      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ce:	e05e      	b.n	800368e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e05d      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d156      	bne.n	800368e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a20      	ldr	r2, [pc, #128]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035f8:	f7fe f9e8 	bl	80019cc <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f9e4 	bl	80019cc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e03e      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x7b0>
 800361e:	e036      	b.n	800368e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b0c      	cmp	r3, #12
 8003624:	d031      	beq.n	800368a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800362c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003630:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d105      	bne.n	800364a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003644:	f023 0303 	bic.w	r3, r3, #3
 8003648:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x824>)
 8003650:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003658:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe f9b7 	bl	80019cc <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003660:	e00c      	b.n	800367c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe f9b3 	bl	80019cc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d905      	bls.n	800367c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e00d      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
 8003674:	40021000 	.word	0x40021000
 8003678:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x848>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ec      	bne.n	8003662 <HAL_RCC_OscConfig+0x812>
 8003688:	e001      	b.n	800368e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e10f      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b89      	ldr	r3, [pc, #548]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b86      	ldr	r3, [pc, #536]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 020f 	bic.w	r2, r3, #15
 80036ca:	4984      	ldr	r1, [pc, #528]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b82      	ldr	r3, [pc, #520]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0f7      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8089 	beq.w	8003804 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d133      	bne.n	8003762 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e4      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800370a:	f000 fa41 	bl	8003b90 <RCC_GetSysClockFreqFromPLLSource>
 800370e:	4602      	mov	r2, r0
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <HAL_RCC_ClockConfig+0x248>)
 8003712:	429a      	cmp	r2, r3
 8003714:	d955      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003722:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	4a6d      	ldr	r2, [pc, #436]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e044      	b.n	80037c2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d03e      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x126>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d13a      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003754:	4a62      	ldr	r2, [pc, #392]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e02f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376a:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d115      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0ac      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0a0      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e098      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80037a2:	f000 f8a7 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b4e      	ldr	r3, [pc, #312]	; (80038e4 <HAL_RCC_ClockConfig+0x248>)
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d909      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b6:	4a4a      	ldr	r2, [pc, #296]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4944      	ldr	r1, [pc, #272]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d4:	f7fe f8fa 	bl	80019cc <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe f8f6 	bl	80019cc <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e070      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4930      	ldr	r1, [pc, #192]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
 8003822:	e008      	b.n	8003836 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d105      	bne.n	8003836 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003834:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d210      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 020f 	bic.w	r2, r3, #15
 800384c:	4923      	ldr	r1, [pc, #140]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCC_ClockConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e036      	b.n	80038d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4918      	ldr	r1, [pc, #96]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4910      	ldr	r1, [pc, #64]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a4:	f000 f826 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_RCC_ClockConfig+0x24c>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa21 f303 	lsr.w	r3, r1, r3
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_RCC_ClockConfig+0x250>)
 80038c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x254>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd ff29 	bl	8001720 <HAL_InitTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	04c4b400 	.word	0x04c4b400
 80038e8:	0800619c 	.word	0x0800619c
 80038ec:	2000005c 	.word	0x2000005c
 80038f0:	20000060 	.word	0x20000060

080038f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x34>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d121      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d11e      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d107      	bne.n	8003944 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e005      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003964:	e00a      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e004      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d101      	bne.n	800397c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 800397a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d133      	bne.n	80039ea <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0xa4>
 8003992:	2b03      	cmp	r3, #3
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0xaa>
 8003996:	e005      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003998:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	3301      	adds	r3, #1
 80039b6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	fb02 f203 	mul.w	r2, r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x104>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ea:	69bb      	ldr	r3, [r7, #24]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3724      	adds	r7, #36	; 0x24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000
 80039fc:	080061b4 	.word	0x080061b4
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000005c 	.word	0x2000005c

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080061ac 	.word	0x080061ac

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a50:	f7ff ffda 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a54:	4601      	mov	r1, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	080061ac 	.word	0x080061ac

08003a78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	220f      	movs	r2, #15
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_RCC_GetClockConfig+0x60>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	601a      	str	r2, [r3, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40022000 	.word	0x40022000

08003adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff f8e8 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 8003af8:	6178      	str	r0, [r7, #20]
 8003afa:	e014      	b.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	; 0x58
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b14:	f7ff f8d8 	bl	8002cc8 <HAL_PWREx_GetVoltageRange>
 8003b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2c:	d10b      	bne.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d913      	bls.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2ba0      	cmp	r3, #160	; 0xa0
 8003b38:	d902      	bls.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e00d      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b40:	2301      	movs	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e00a      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b7f      	cmp	r3, #127	; 0x7f
 8003b4a:	d902      	bls.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e004      	b.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b70      	cmp	r3, #112	; 0x70
 8003b56:	d101      	bne.n	8003b5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b58:	2301      	movs	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 020f 	bic.w	r2, r3, #15
 8003b64:	4909      	ldr	r1, [pc, #36]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d001      	beq.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40022000 	.word	0x40022000

08003b90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d118      	bne.n	8003bd8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb2:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	e005      	b.n	8003bce <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bce:	4a21      	ldr	r2, [pc, #132]	; (8003c54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d002      	beq.n	8003bee <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d003      	beq.n	8003bf4 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003bec:	e005      	b.n	8003bfa <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003bee:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003bf0:	613b      	str	r3, [r7, #16]
    break;
 8003bf2:	e005      	b.n	8003c00 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003bf6:	613b      	str	r3, [r7, #16]
    break;
 8003bf8:	e002      	b.n	8003c00 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	613b      	str	r3, [r7, #16]
    break;
 8003bfe:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fb02 f203 	mul.w	r2, r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	0e5b      	lsrs	r3, r3, #25
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	3301      	adds	r3, #1
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c40:	683b      	ldr	r3, [r7, #0]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	080061b4 	.word	0x080061b4
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	007a1200 	.word	0x007a1200

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c68:	2300      	movs	r3, #0
 8003c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d03d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d00b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d804      	bhi.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c90:	e01d      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003c92:	2b60      	cmp	r3, #96	; 0x60
 8003c94:	d01e      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c96:	2b80      	cmp	r3, #128	; 0x80
 8003c98:	d01c      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c9a:	e018      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c9c:	4b86      	ldr	r3, [pc, #536]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a85      	ldr	r2, [pc, #532]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca8:	e015      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fafd 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cba:	e00c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fbe4 	bl	8004490 <RCCEx_PLLSAI2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ce2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cea:	4973      	ldr	r1, [pc, #460]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d042      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d00f      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d12:	d805      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1c:	d017      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003d1e:	e01f      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d24:	d01f      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d01c      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d2c:	e018      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d2e:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3a:	e015      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fab4 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4c:	e00c      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3320      	adds	r3, #32
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fb9b 	bl	8004490 <RCCEx_PLLSAI2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	74fb      	strb	r3, [r7, #19]
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d6e:	4b52      	ldr	r3, [pc, #328]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	494e      	ldr	r1, [pc, #312]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7cfb      	ldrb	r3, [r7, #19]
 8003d88:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 809f 	beq.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d9c:	4b46      	ldr	r3, [pc, #280]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	4a40      	ldr	r2, [pc, #256]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3a      	ldr	r2, [pc, #232]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dda:	f7fd fdf7 	bl	80019cc <HAL_GetTick>
 8003dde:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de0:	e009      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fd fdf3 	bl	80019cc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d902      	bls.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	74fb      	strb	r3, [r7, #19]
        break;
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0ef      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d15b      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e08:	4b2b      	ldr	r3, [pc, #172]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d01f      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d019      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e26:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	4a1b      	ldr	r2, [pc, #108]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e52:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fdb2 	bl	80019cc <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fdae 	bl	80019cc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d902      	bls.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	74fb      	strb	r3, [r7, #19]
            break;
 8003e82:	e006      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ec      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	74bb      	strb	r3, [r7, #18]
 8003eb6:	e005      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec4:	7c7b      	ldrb	r3, [r7, #17]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4ba0      	ldr	r3, [pc, #640]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4a9f      	ldr	r2, [pc, #636]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee2:	4b9a      	ldr	r3, [pc, #616]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f023 0203 	bic.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	4996      	ldr	r1, [pc, #600]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f04:	4b91      	ldr	r3, [pc, #580]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f023 020c 	bic.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	498e      	ldr	r1, [pc, #568]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f26:	4b89      	ldr	r3, [pc, #548]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	4985      	ldr	r1, [pc, #532]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f48:	4b80      	ldr	r3, [pc, #512]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	497d      	ldr	r1, [pc, #500]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6a:	4b78      	ldr	r3, [pc, #480]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	4974      	ldr	r1, [pc, #464]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	496c      	ldr	r1, [pc, #432]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fae:	4b67      	ldr	r3, [pc, #412]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbc:	4963      	ldr	r1, [pc, #396]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd0:	4b5e      	ldr	r3, [pc, #376]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	495b      	ldr	r1, [pc, #364]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff2:	4b56      	ldr	r3, [pc, #344]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	4952      	ldr	r1, [pc, #328]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	494a      	ldr	r1, [pc, #296]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004036:	4b45      	ldr	r3, [pc, #276]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	4941      	ldr	r1, [pc, #260]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004058:	4b3c      	ldr	r3, [pc, #240]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	4939      	ldr	r1, [pc, #228]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	4930      	ldr	r1, [pc, #192]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004098:	d106      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409a:	4b2c      	ldr	r3, [pc, #176]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	4a2b      	ldr	r2, [pc, #172]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a4:	60d3      	str	r3, [r2, #12]
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	2101      	movs	r1, #1
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f8f9 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d04d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e0:	d108      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e8:	4a18      	ldr	r2, [pc, #96]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040f2:	e012      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80040f4:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004100:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004112:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d106      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e020      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413a:	d109      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a02      	ldr	r2, [pc, #8]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004146:	60d3      	str	r3, [r2, #12]
 8004148:	e014      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f8a5 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d028      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004180:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418e:	4947      	ldr	r1, [pc, #284]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419e:	d106      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b42      	ldr	r3, [pc, #264]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a41      	ldr	r2, [pc, #260]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
 80041ac:	e011      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041b6:	d10c      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f876 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01e      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ee:	492f      	ldr	r1, [pc, #188]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004200:	d10c      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f851 	bl	80042b0 <RCCEx_PLLSAI1_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422e:	f023 0204 	bic.w	r2, r3, #4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004238:	491c      	ldr	r1, [pc, #112]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004252:	f023 0218 	bic.w	r2, r3, #24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	4913      	ldr	r1, [pc, #76]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d017      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800428e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800429a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000

080042b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042be:	4b70      	ldr	r3, [pc, #448]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042ca:	4b6d      	ldr	r3, [pc, #436]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0203 	and.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d103      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
       ||
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d13f      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e03c      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d00c      	beq.n	800430a <RCCEx_PLLSAI1_Config+0x5a>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d013      	beq.n	800431c <RCCEx_PLLSAI1_Config+0x6c>
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d120      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d11d      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004308:	e01a      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800430a:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d116      	bne.n	8004344 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431a:	e013      	b.n	8004344 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800431c:	4b58      	ldr	r3, [pc, #352]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004328:	4b55      	ldr	r3, [pc, #340]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004338:	e006      	b.n	8004348 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      break;
 800433e:	e004      	b.n	800434a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004340:	bf00      	nop
 8004342:	e002      	b.n	800434a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004344:	bf00      	nop
 8004346:	e000      	b.n	800434a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004348:	bf00      	nop
    }

    if(status == HAL_OK)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f023 0203 	bic.w	r2, r3, #3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4948      	ldr	r1, [pc, #288]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8086 	bne.w	8004476 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800436a:	4b45      	ldr	r3, [pc, #276]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a44      	ldr	r2, [pc, #272]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004376:	f7fd fb29 	bl	80019cc <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800437c:	e009      	b.n	8004392 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800437e:	f7fd fb25 	bl	80019cc <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	73fb      	strb	r3, [r7, #15]
        break;
 8004390:	e005      	b.n	800439e <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ef      	bne.n	800437e <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d168      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d113      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043aa:	4b35      	ldr	r3, [pc, #212]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	4b35      	ldr	r3, [pc, #212]	; (8004484 <RCCEx_PLLSAI1_Config+0x1d4>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6892      	ldr	r2, [r2, #8]
 80043b6:	0211      	lsls	r1, r2, #8
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68d2      	ldr	r2, [r2, #12]
 80043bc:	06d2      	lsls	r2, r2, #27
 80043be:	4311      	orrs	r1, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6852      	ldr	r2, [r2, #4]
 80043c4:	3a01      	subs	r2, #1
 80043c6:	0112      	lsls	r2, r2, #4
 80043c8:	430a      	orrs	r2, r1
 80043ca:	492d      	ldr	r1, [pc, #180]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]
 80043d0:	e02d      	b.n	800442e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d115      	bne.n	8004404 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d8:	4b29      	ldr	r3, [pc, #164]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043de:	4013      	ands	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6892      	ldr	r2, [r2, #8]
 80043e4:	0211      	lsls	r1, r2, #8
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6912      	ldr	r2, [r2, #16]
 80043ea:	0852      	lsrs	r2, r2, #1
 80043ec:	3a01      	subs	r2, #1
 80043ee:	0552      	lsls	r2, r2, #21
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6852      	ldr	r2, [r2, #4]
 80043f6:	3a01      	subs	r2, #1
 80043f8:	0112      	lsls	r2, r2, #4
 80043fa:	430a      	orrs	r2, r1
 80043fc:	4920      	ldr	r1, [pc, #128]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]
 8004402:	e014      	b.n	800442e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004404:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <RCCEx_PLLSAI1_Config+0x1dc>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6952      	ldr	r2, [r2, #20]
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	3a01      	subs	r2, #1
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	4915      	ldr	r1, [pc, #84]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a13      	ldr	r2, [pc, #76]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004438:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fac7 	bl	80019cc <HAL_GetTick>
 800443e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004440:	e009      	b.n	8004456 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004442:	f7fd fac3 	bl	80019cc <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d902      	bls.n	8004456 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	73fb      	strb	r3, [r7, #15]
          break;
 8004454:	e005      	b.n	8004462 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0ef      	beq.n	8004442 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <RCCEx_PLLSAI1_Config+0x1d0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	07ff800f 	.word	0x07ff800f
 8004488:	ff9f800f 	.word	0xff9f800f
 800448c:	f9ff800f 	.word	0xf9ff800f

08004490 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449e:	4b70      	ldr	r3, [pc, #448]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044aa:	4b6d      	ldr	r3, [pc, #436]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0203 	and.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d103      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
       ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d13f      	bne.n	8004542 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e03c      	b.n	8004542 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d00c      	beq.n	80044ea <RCCEx_PLLSAI2_Config+0x5a>
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d013      	beq.n	80044fc <RCCEx_PLLSAI2_Config+0x6c>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d120      	bne.n	800451a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11d      	bne.n	8004520 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e8:	e01a      	b.n	8004520 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fa:	e013      	b.n	8004524 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044fc:	4b58      	ldr	r3, [pc, #352]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10f      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004508:	4b55      	ldr	r3, [pc, #340]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004518:	e006      	b.n	8004528 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
      break;
 800451e:	e004      	b.n	800452a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004528:	bf00      	nop
    }

    if(status == HAL_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f023 0203 	bic.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4948      	ldr	r1, [pc, #288]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f040 8086 	bne.w	8004656 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a44      	ldr	r2, [pc, #272]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004556:	f7fd fa39 	bl	80019cc <HAL_GetTick>
 800455a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800455c:	e009      	b.n	8004572 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800455e:	f7fd fa35 	bl	80019cc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d902      	bls.n	8004572 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	73fb      	strb	r3, [r7, #15]
        break;
 8004570:	e005      	b.n	800457e <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ef      	bne.n	800455e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d168      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800458a:	4b35      	ldr	r3, [pc, #212]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	4b35      	ldr	r3, [pc, #212]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004590:	4013      	ands	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6892      	ldr	r2, [r2, #8]
 8004596:	0211      	lsls	r1, r2, #8
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68d2      	ldr	r2, [r2, #12]
 800459c:	06d2      	lsls	r2, r2, #27
 800459e:	4311      	orrs	r1, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6852      	ldr	r2, [r2, #4]
 80045a4:	3a01      	subs	r2, #1
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	430a      	orrs	r2, r1
 80045aa:	492d      	ldr	r1, [pc, #180]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	614b      	str	r3, [r1, #20]
 80045b0:	e02d      	b.n	800460e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d115      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045be:	4013      	ands	r3, r2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
 80045c4:	0211      	lsls	r1, r2, #8
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6912      	ldr	r2, [r2, #16]
 80045ca:	0852      	lsrs	r2, r2, #1
 80045cc:	3a01      	subs	r2, #1
 80045ce:	0552      	lsls	r2, r2, #21
 80045d0:	4311      	orrs	r1, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6852      	ldr	r2, [r2, #4]
 80045d6:	3a01      	subs	r2, #1
 80045d8:	0112      	lsls	r2, r2, #4
 80045da:	430a      	orrs	r2, r1
 80045dc:	4920      	ldr	r1, [pc, #128]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	614b      	str	r3, [r1, #20]
 80045e2:	e014      	b.n	800460e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <RCCEx_PLLSAI2_Config+0x1dc>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6892      	ldr	r2, [r2, #8]
 80045f0:	0211      	lsls	r1, r2, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6952      	ldr	r2, [r2, #20]
 80045f6:	0852      	lsrs	r2, r2, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0652      	lsls	r2, r2, #25
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6852      	ldr	r2, [r2, #4]
 8004602:	3a01      	subs	r2, #1
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	4915      	ldr	r1, [pc, #84]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7fd f9d7 	bl	80019cc <HAL_GetTick>
 800461e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004620:	e009      	b.n	8004636 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004622:	f7fd f9d3 	bl	80019cc <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d902      	bls.n	8004636 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	73fb      	strb	r3, [r7, #15]
          break;
 8004634:	e005      	b.n	8004642 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0ef      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	4903      	ldr	r1, [pc, #12]	; (8004660 <RCCEx_PLLSAI2_Config+0x1d0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	07ff800f 	.word	0x07ff800f
 8004668:	ff9f800f 	.word	0xff9f800f
 800466c:	f9ff800f 	.word	0xf9ff800f

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e049      	b.n	8004716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f841 	bl	800471e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 f9f8 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04f      	b.n	80047ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a23      	ldr	r2, [pc, #140]	; (80047f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d018      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	; (80047fc <HAL_TIM_Base_Start_IT+0xc8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_TIM_Base_Start_IT+0xcc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <HAL_TIM_Base_Start_IT+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_TIM_Base_Start_IT+0xd4>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIM_Base_Start_IT+0x76>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_Base_Start_IT+0xd8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d115      	bne.n	80047d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b06      	cmp	r3, #6
 80047ba:	d015      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0xb4>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c2:	d011      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	e008      	b.n	80047e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e000      	b.n	80047ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	00010007 	.word	0x00010007

08004814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d122      	bne.n	8004870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d11b      	bne.n	8004870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0202 	mvn.w	r2, #2
 8004840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f905 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8f7 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f908 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d122      	bne.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d11b      	bne.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0204 	mvn.w	r2, #4
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f8db 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f8cd 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8de 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d122      	bne.n	8004918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f06f 0208 	mvn.w	r2, #8
 80048e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8b1 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004904:	e005      	b.n	8004912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f8a3 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8b4 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b10      	cmp	r3, #16
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0210 	mvn.w	r2, #16
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2208      	movs	r2, #8
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f887 	bl	8004a66 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f879 	bl	8004a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f88a 	bl	8004a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0201 	mvn.w	r2, #1
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fbb2 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	2b80      	cmp	r3, #128	; 0x80
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f914 	bl	8004bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	d10e      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f907 	bl	8004c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f838 	bl	8004a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d10e      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d107      	bne.n	8004a4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0220 	mvn.w	r2, #32
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8c7 	bl	8004bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3d      	ldr	r2, [pc, #244]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3b      	ldr	r2, [pc, #236]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0x40>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d108      	bne.n	8004af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d01b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <TIM_Base_SetConfig+0x118>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d017      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2b      	ldr	r2, [pc, #172]	; (8004bc0 <TIM_Base_SetConfig+0x11c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a2a      	ldr	r2, [pc, #168]	; (8004bc4 <TIM_Base_SetConfig+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00f      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00b      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <TIM_Base_SetConfig+0x128>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00f      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <TIM_Base_SetConfig+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00b      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <TIM_Base_SetConfig+0x128>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d007      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <TIM_Base_SetConfig+0x12c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0xf8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <TIM_Base_SetConfig+0x130>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	615a      	str	r2, [r3, #20]
}
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40000c00 	.word	0x40000c00
 8004bc8:	40013400 	.word	0x40013400
 8004bcc:	40014000 	.word	0x40014000
 8004bd0:	40014400 	.word	0x40014400
 8004bd4:	40014800 	.word	0x40014800

08004bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e042      	b.n	8004cac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fd2d 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2224      	movs	r2, #36	; 0x24
 8004c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8c4 	bl	8004de4 <UART_SetConfig>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e022      	b.n	8004cac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fb8a 	bl	8005388 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fc11 	bl	80054cc <UART_CheckIdleState>
 8004caa:	4603      	mov	r3, r0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	f040 8084 	bne.w	8004dd8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Transmit+0x28>
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e07c      	b.n	8004dda <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Transmit+0x3a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e075      	b.n	8004dda <HAL_UART_Transmit+0x126>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2221      	movs	r2, #33	; 0x21
 8004d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc fe61 	bl	80019cc <HAL_GetTick>
 8004d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d108      	bne.n	8004d38 <HAL_UART_Transmit+0x84>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e003      	b.n	8004d40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004d48:	e02d      	b.n	8004da6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2200      	movs	r2, #0
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fc01 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e03a      	b.n	8004dda <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d76:	b292      	uxth	r2, r2
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e008      	b.n	8004d94 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b292      	uxth	r2, r2
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1cb      	bne.n	8004d4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2140      	movs	r1, #64	; 0x40
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fbcd 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004de8:	b088      	sub	sp, #32
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4bb1      	ldr	r3, [pc, #708]	; (80050e0 <UART_SetConfig+0x2fc>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4aa6      	ldr	r2, [pc, #664]	; (80050e4 <UART_SetConfig+0x300>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	69f9      	ldr	r1, [r7, #28]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f023 010f 	bic.w	r1, r3, #15
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a97      	ldr	r2, [pc, #604]	; (80050e8 <UART_SetConfig+0x304>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d121      	bne.n	8004ed4 <UART_SetConfig+0xf0>
 8004e90:	4b96      	ldr	r3, [pc, #600]	; (80050ec <UART_SetConfig+0x308>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d816      	bhi.n	8004ecc <UART_SetConfig+0xe8>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0xc0>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ec1 	.word	0x08004ec1
 8004eac:	08004ebb 	.word	0x08004ebb
 8004eb0:	08004ec7 	.word	0x08004ec7
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e0e8      	b.n	800508c <UART_SetConfig+0x2a8>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e0e5      	b.n	800508c <UART_SetConfig+0x2a8>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e0e2      	b.n	800508c <UART_SetConfig+0x2a8>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e0df      	b.n	800508c <UART_SetConfig+0x2a8>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	76fb      	strb	r3, [r7, #27]
 8004ed0:	bf00      	nop
 8004ed2:	e0db      	b.n	800508c <UART_SetConfig+0x2a8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a85      	ldr	r2, [pc, #532]	; (80050f0 <UART_SetConfig+0x30c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d134      	bne.n	8004f48 <UART_SetConfig+0x164>
 8004ede:	4b83      	ldr	r3, [pc, #524]	; (80050ec <UART_SetConfig+0x308>)
 8004ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b0c      	cmp	r3, #12
 8004eea:	d829      	bhi.n	8004f40 <UART_SetConfig+0x15c>
 8004eec:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x110>)
 8004eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef2:	bf00      	nop
 8004ef4:	08004f29 	.word	0x08004f29
 8004ef8:	08004f41 	.word	0x08004f41
 8004efc:	08004f41 	.word	0x08004f41
 8004f00:	08004f41 	.word	0x08004f41
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004f41 	.word	0x08004f41
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08004f41 	.word	0x08004f41
 8004f14:	08004f2f 	.word	0x08004f2f
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f41 	.word	0x08004f41
 8004f24:	08004f3b 	.word	0x08004f3b
 8004f28:	2300      	movs	r3, #0
 8004f2a:	76fb      	strb	r3, [r7, #27]
 8004f2c:	e0ae      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	76fb      	strb	r3, [r7, #27]
 8004f32:	e0ab      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f34:	2304      	movs	r3, #4
 8004f36:	76fb      	strb	r3, [r7, #27]
 8004f38:	e0a8      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	76fb      	strb	r3, [r7, #27]
 8004f3e:	e0a5      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f40:	2310      	movs	r3, #16
 8004f42:	76fb      	strb	r3, [r7, #27]
 8004f44:	bf00      	nop
 8004f46:	e0a1      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a69      	ldr	r2, [pc, #420]	; (80050f4 <UART_SetConfig+0x310>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d120      	bne.n	8004f94 <UART_SetConfig+0x1b0>
 8004f52:	4b66      	ldr	r3, [pc, #408]	; (80050ec <UART_SetConfig+0x308>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d00f      	beq.n	8004f80 <UART_SetConfig+0x19c>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d802      	bhi.n	8004f6a <UART_SetConfig+0x186>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <UART_SetConfig+0x190>
 8004f68:	e010      	b.n	8004f8c <UART_SetConfig+0x1a8>
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d005      	beq.n	8004f7a <UART_SetConfig+0x196>
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d009      	beq.n	8004f86 <UART_SetConfig+0x1a2>
 8004f72:	e00b      	b.n	8004f8c <UART_SetConfig+0x1a8>
 8004f74:	2300      	movs	r3, #0
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e088      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	76fb      	strb	r3, [r7, #27]
 8004f7e:	e085      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f80:	2304      	movs	r3, #4
 8004f82:	76fb      	strb	r3, [r7, #27]
 8004f84:	e082      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f86:	2308      	movs	r3, #8
 8004f88:	76fb      	strb	r3, [r7, #27]
 8004f8a:	e07f      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	76fb      	strb	r3, [r7, #27]
 8004f90:	bf00      	nop
 8004f92:	e07b      	b.n	800508c <UART_SetConfig+0x2a8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a57      	ldr	r2, [pc, #348]	; (80050f8 <UART_SetConfig+0x314>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d120      	bne.n	8004fe0 <UART_SetConfig+0x1fc>
 8004f9e:	4b53      	ldr	r3, [pc, #332]	; (80050ec <UART_SetConfig+0x308>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d00f      	beq.n	8004fcc <UART_SetConfig+0x1e8>
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d802      	bhi.n	8004fb6 <UART_SetConfig+0x1d2>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <UART_SetConfig+0x1dc>
 8004fb4:	e010      	b.n	8004fd8 <UART_SetConfig+0x1f4>
 8004fb6:	2b80      	cmp	r3, #128	; 0x80
 8004fb8:	d005      	beq.n	8004fc6 <UART_SetConfig+0x1e2>
 8004fba:	2bc0      	cmp	r3, #192	; 0xc0
 8004fbc:	d009      	beq.n	8004fd2 <UART_SetConfig+0x1ee>
 8004fbe:	e00b      	b.n	8004fd8 <UART_SetConfig+0x1f4>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e062      	b.n	800508c <UART_SetConfig+0x2a8>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	76fb      	strb	r3, [r7, #27]
 8004fca:	e05f      	b.n	800508c <UART_SetConfig+0x2a8>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e05c      	b.n	800508c <UART_SetConfig+0x2a8>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e059      	b.n	800508c <UART_SetConfig+0x2a8>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	bf00      	nop
 8004fde:	e055      	b.n	800508c <UART_SetConfig+0x2a8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a45      	ldr	r2, [pc, #276]	; (80050fc <UART_SetConfig+0x318>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d124      	bne.n	8005034 <UART_SetConfig+0x250>
 8004fea:	4b40      	ldr	r3, [pc, #256]	; (80050ec <UART_SetConfig+0x308>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff8:	d012      	beq.n	8005020 <UART_SetConfig+0x23c>
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	d802      	bhi.n	8005006 <UART_SetConfig+0x222>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <UART_SetConfig+0x230>
 8005004:	e012      	b.n	800502c <UART_SetConfig+0x248>
 8005006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500a:	d006      	beq.n	800501a <UART_SetConfig+0x236>
 800500c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005010:	d009      	beq.n	8005026 <UART_SetConfig+0x242>
 8005012:	e00b      	b.n	800502c <UART_SetConfig+0x248>
 8005014:	2300      	movs	r3, #0
 8005016:	76fb      	strb	r3, [r7, #27]
 8005018:	e038      	b.n	800508c <UART_SetConfig+0x2a8>
 800501a:	2302      	movs	r3, #2
 800501c:	76fb      	strb	r3, [r7, #27]
 800501e:	e035      	b.n	800508c <UART_SetConfig+0x2a8>
 8005020:	2304      	movs	r3, #4
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	e032      	b.n	800508c <UART_SetConfig+0x2a8>
 8005026:	2308      	movs	r3, #8
 8005028:	76fb      	strb	r3, [r7, #27]
 800502a:	e02f      	b.n	800508c <UART_SetConfig+0x2a8>
 800502c:	2310      	movs	r3, #16
 800502e:	76fb      	strb	r3, [r7, #27]
 8005030:	bf00      	nop
 8005032:	e02b      	b.n	800508c <UART_SetConfig+0x2a8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <UART_SetConfig+0x300>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d124      	bne.n	8005088 <UART_SetConfig+0x2a4>
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <UART_SetConfig+0x308>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d012      	beq.n	8005074 <UART_SetConfig+0x290>
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d802      	bhi.n	800505a <UART_SetConfig+0x276>
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <UART_SetConfig+0x284>
 8005058:	e012      	b.n	8005080 <UART_SetConfig+0x29c>
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d006      	beq.n	800506e <UART_SetConfig+0x28a>
 8005060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005064:	d009      	beq.n	800507a <UART_SetConfig+0x296>
 8005066:	e00b      	b.n	8005080 <UART_SetConfig+0x29c>
 8005068:	2300      	movs	r3, #0
 800506a:	76fb      	strb	r3, [r7, #27]
 800506c:	e00e      	b.n	800508c <UART_SetConfig+0x2a8>
 800506e:	2302      	movs	r3, #2
 8005070:	76fb      	strb	r3, [r7, #27]
 8005072:	e00b      	b.n	800508c <UART_SetConfig+0x2a8>
 8005074:	2304      	movs	r3, #4
 8005076:	76fb      	strb	r3, [r7, #27]
 8005078:	e008      	b.n	800508c <UART_SetConfig+0x2a8>
 800507a:	2308      	movs	r3, #8
 800507c:	76fb      	strb	r3, [r7, #27]
 800507e:	e005      	b.n	800508c <UART_SetConfig+0x2a8>
 8005080:	2310      	movs	r3, #16
 8005082:	76fb      	strb	r3, [r7, #27]
 8005084:	bf00      	nop
 8005086:	e001      	b.n	800508c <UART_SetConfig+0x2a8>
 8005088:	2310      	movs	r3, #16
 800508a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <UART_SetConfig+0x300>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f040 80a1 	bne.w	80051da <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005098:	7efb      	ldrb	r3, [r7, #27]
 800509a:	2b08      	cmp	r3, #8
 800509c:	d836      	bhi.n	800510c <UART_SetConfig+0x328>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0x2c0>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	0800510d 	.word	0x0800510d
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	0800510d 	.word	0x0800510d
 80050c0:	0800510d 	.word	0x0800510d
 80050c4:	08005105 	.word	0x08005105
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fe fcaa 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80050cc:	6178      	str	r0, [r7, #20]
        break;
 80050ce:	e022      	b.n	8005116 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <UART_SetConfig+0x31c>)
 80050d2:	617b      	str	r3, [r7, #20]
        break;
 80050d4:	e01f      	b.n	8005116 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fe fc0d 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80050da:	6178      	str	r0, [r7, #20]
        break;
 80050dc:	e01b      	b.n	8005116 <UART_SetConfig+0x332>
 80050de:	bf00      	nop
 80050e0:	cfff69f3 	.word	0xcfff69f3
 80050e4:	40008000 	.word	0x40008000
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40004400 	.word	0x40004400
 80050f4:	40004800 	.word	0x40004800
 80050f8:	40004c00 	.word	0x40004c00
 80050fc:	40005000 	.word	0x40005000
 8005100:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005108:	617b      	str	r3, [r7, #20]
        break;
 800510a:	e004      	b.n	8005116 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	76bb      	strb	r3, [r7, #26]
        break;
 8005114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 811d 	beq.w	8005358 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	4a97      	ldr	r2, [pc, #604]	; (8005380 <UART_SetConfig+0x59c>)
 8005124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005128:	461a      	mov	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005130:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	4413      	add	r3, r2
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	429a      	cmp	r2, r3
 8005140:	d305      	bcc.n	800514e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d902      	bls.n	8005154 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	76bb      	strb	r3, [r7, #26]
 8005152:	e101      	b.n	8005358 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4618      	mov	r0, r3
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	4a87      	ldr	r2, [pc, #540]	; (8005380 <UART_SetConfig+0x59c>)
 8005162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005166:	b29b      	uxth	r3, r3
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	f7fb f896 	bl	80002a0 <__aeabi_uldivmod>
 8005174:	4603      	mov	r3, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4619      	mov	r1, r3
 800517a:	4622      	mov	r2, r4
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	f04f 0400 	mov.w	r4, #0
 8005184:	0214      	lsls	r4, r2, #8
 8005186:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800518a:	020b      	lsls	r3, r1, #8
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	0852      	lsrs	r2, r2, #1
 8005192:	4611      	mov	r1, r2
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	eb13 0b01 	adds.w	fp, r3, r1
 800519c:	eb44 0c02 	adc.w	ip, r4, r2
 80051a0:	4658      	mov	r0, fp
 80051a2:	4661      	mov	r1, ip
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	461a      	mov	r2, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	f7fb f876 	bl	80002a0 <__aeabi_uldivmod>
 80051b4:	4603      	mov	r3, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c0:	d308      	bcc.n	80051d4 <UART_SetConfig+0x3f0>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c8:	d204      	bcs.n	80051d4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e0c1      	b.n	8005358 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	76bb      	strb	r3, [r7, #26]
 80051d8:	e0be      	b.n	8005358 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e2:	d164      	bne.n	80052ae <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80051e4:	7efb      	ldrb	r3, [r7, #27]
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d827      	bhi.n	800523a <UART_SetConfig+0x456>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x40c>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe fc04 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8005218:	6178      	str	r0, [r7, #20]
        break;
 800521a:	e013      	b.n	8005244 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fe fc16 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8005220:	6178      	str	r0, [r7, #20]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b57      	ldr	r3, [pc, #348]	; (8005384 <UART_SetConfig+0x5a0>)
 8005226:	617b      	str	r3, [r7, #20]
        break;
 8005228:	e00c      	b.n	8005244 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fe fb63 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 800522e:	6178      	str	r0, [r7, #20]
        break;
 8005230:	e008      	b.n	8005244 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	617b      	str	r3, [r7, #20]
        break;
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	76bb      	strb	r3, [r7, #26]
        break;
 8005242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8086 	beq.w	8005358 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	4a4b      	ldr	r2, [pc, #300]	; (8005380 <UART_SetConfig+0x59c>)
 8005252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005256:	461a      	mov	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	fbb3 f3f2 	udiv	r3, r3, r2
 800525e:	005a      	lsls	r2, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	b29b      	uxth	r3, r3
 8005272:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d916      	bls.n	80052a8 <UART_SetConfig+0x4c4>
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d212      	bcs.n	80052a8 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f023 030f 	bic.w	r3, r3, #15
 800528a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	b29a      	uxth	r2, r3
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	4313      	orrs	r3, r2
 800529c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	89fa      	ldrh	r2, [r7, #14]
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	e057      	b.n	8005358 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	76bb      	strb	r3, [r7, #26]
 80052ac:	e054      	b.n	8005358 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ae:	7efb      	ldrb	r3, [r7, #27]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d828      	bhi.n	8005306 <UART_SetConfig+0x522>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0x4d8>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	08005307 	.word	0x08005307
 80052cc:	080052f7 	.word	0x080052f7
 80052d0:	08005307 	.word	0x08005307
 80052d4:	08005307 	.word	0x08005307
 80052d8:	08005307 	.word	0x08005307
 80052dc:	080052ff 	.word	0x080052ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe fb9e 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80052e4:	6178      	str	r0, [r7, #20]
        break;
 80052e6:	e013      	b.n	8005310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e8:	f7fe fbb0 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80052ec:	6178      	str	r0, [r7, #20]
        break;
 80052ee:	e00f      	b.n	8005310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f0:	4b24      	ldr	r3, [pc, #144]	; (8005384 <UART_SetConfig+0x5a0>)
 80052f2:	617b      	str	r3, [r7, #20]
        break;
 80052f4:	e00c      	b.n	8005310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f6:	f7fe fafd 	bl	80038f4 <HAL_RCC_GetSysClockFreq>
 80052fa:	6178      	str	r0, [r7, #20]
        break;
 80052fc:	e008      	b.n	8005310 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005302:	617b      	str	r3, [r7, #20]
        break;
 8005304:	e004      	b.n	8005310 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	76bb      	strb	r3, [r7, #26]
        break;
 800530e:	bf00      	nop
    }

    if (pclk != 0U)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	4a19      	ldr	r2, [pc, #100]	; (8005380 <UART_SetConfig+0x59c>)
 800531c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005320:	461a      	mov	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fbb3 f2f2 	udiv	r2, r3, r2
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	441a      	add	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d908      	bls.n	8005354 <UART_SetConfig+0x570>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d204      	bcs.n	8005354 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	e001      	b.n	8005358 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005374:	7ebb      	ldrb	r3, [r7, #26]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005380:	080061e4 	.word	0x080061e4
 8005384:	00f42400 	.word	0x00f42400

08005388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01a      	beq.n	800549e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005486:	d10a      	bne.n	800549e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054dc:	f7fc fa76 	bl	80019cc <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d10e      	bne.n	800550e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f82c 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e022      	b.n	8005554 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d10e      	bne.n	800553a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800551c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f816 	bl	800555c <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e00c      	b.n	8005554 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	e062      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005574:	d05e      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fc fa29 	bl	80019cc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <UART_WaitOnFlagUntilTimeout+0x30>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11d      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800559a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0201 	bic.w	r2, r2, #1
 80055aa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e045      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d02e      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e4:	d126      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055fe:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e00f      	b.n	8005654 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d08d      	beq.n	800556e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UARTEx_DisableFifoMode+0x16>
 800566e:	2302      	movs	r3, #2
 8005670:	e027      	b.n	80056c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2224      	movs	r2, #36	; 0x24
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e02d      	b.n	8005742 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2224      	movs	r2, #36	; 0x24
 80056f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f850 	bl	80057c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800575e:	2302      	movs	r3, #2
 8005760:	e02d      	b.n	80057be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2224      	movs	r2, #36	; 0x24
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f812 	bl	80057c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80057d0:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <UARTEx_SetNbDataToProcess+0xc8>)
 80057d2:	f107 0314 	add.w	r3, r7, #20
 80057d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057da:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80057de:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <UARTEx_SetNbDataToProcess+0xcc>)
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057e8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005804:	e03d      	b.n	8005882 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005806:	2308      	movs	r3, #8
 8005808:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800580a:	2308      	movs	r3, #8
 800580c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	0e5b      	lsrs	r3, r3, #25
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	0f5b      	lsrs	r3, r3, #29
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800582e:	7fbb      	ldrb	r3, [r7, #30]
 8005830:	7f3a      	ldrb	r2, [r7, #28]
 8005832:	f107 0120 	add.w	r1, r7, #32
 8005836:	440a      	add	r2, r1
 8005838:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	7f3a      	ldrb	r2, [r7, #28]
 8005842:	f107 0120 	add.w	r1, r7, #32
 8005846:	440a      	add	r2, r1
 8005848:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800584c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005858:	7ffb      	ldrb	r3, [r7, #31]
 800585a:	7f7a      	ldrb	r2, [r7, #29]
 800585c:	f107 0120 	add.w	r1, r7, #32
 8005860:	440a      	add	r2, r1
 8005862:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	7f7a      	ldrb	r2, [r7, #29]
 800586c:	f107 0120 	add.w	r1, r7, #32
 8005870:	440a      	add	r2, r1
 8005872:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005876:	fb93 f3f2 	sdiv	r3, r3, r2
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005882:	bf00      	nop
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	0800618c 	.word	0x0800618c
 8005894:	08006194 	.word	0x08006194

08005898 <__errno>:
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <__errno+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000068 	.word	0x20000068

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0d      	ldr	r6, [pc, #52]	; (80058dc <__libc_init_array+0x38>)
 80058a8:	4c0d      	ldr	r4, [pc, #52]	; (80058e0 <__libc_init_array+0x3c>)
 80058aa:	1ba4      	subs	r4, r4, r6
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	2500      	movs	r5, #0
 80058b0:	42a5      	cmp	r5, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	4e0b      	ldr	r6, [pc, #44]	; (80058e4 <__libc_init_array+0x40>)
 80058b6:	4c0c      	ldr	r4, [pc, #48]	; (80058e8 <__libc_init_array+0x44>)
 80058b8:	f000 fc26 	bl	8006108 <_init>
 80058bc:	1ba4      	subs	r4, r4, r6
 80058be:	10a4      	asrs	r4, r4, #2
 80058c0:	2500      	movs	r5, #0
 80058c2:	42a5      	cmp	r5, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058cc:	4798      	blx	r3
 80058ce:	3501      	adds	r5, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d6:	4798      	blx	r3
 80058d8:	3501      	adds	r5, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08006238 	.word	0x08006238
 80058e0:	08006238 	.word	0x08006238
 80058e4:	08006238 	.word	0x08006238
 80058e8:	0800623c 	.word	0x0800623c

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <siprintf>:
 80058fc:	b40e      	push	{r1, r2, r3}
 80058fe:	b500      	push	{lr}
 8005900:	b09c      	sub	sp, #112	; 0x70
 8005902:	ab1d      	add	r3, sp, #116	; 0x74
 8005904:	9002      	str	r0, [sp, #8]
 8005906:	9006      	str	r0, [sp, #24]
 8005908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <siprintf+0x38>)
 800590e:	9107      	str	r1, [sp, #28]
 8005910:	9104      	str	r1, [sp, #16]
 8005912:	4909      	ldr	r1, [pc, #36]	; (8005938 <siprintf+0x3c>)
 8005914:	f853 2b04 	ldr.w	r2, [r3], #4
 8005918:	9105      	str	r1, [sp, #20]
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	a902      	add	r1, sp, #8
 8005920:	f000 f866 	bl	80059f0 <_svfiprintf_r>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	b01c      	add	sp, #112	; 0x70
 800592c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005930:	b003      	add	sp, #12
 8005932:	4770      	bx	lr
 8005934:	20000068 	.word	0x20000068
 8005938:	ffff0208 	.word	0xffff0208

0800593c <__ssputs_r>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	688e      	ldr	r6, [r1, #8]
 8005942:	429e      	cmp	r6, r3
 8005944:	4682      	mov	sl, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4690      	mov	r8, r2
 800594a:	4699      	mov	r9, r3
 800594c:	d837      	bhi.n	80059be <__ssputs_r+0x82>
 800594e:	898a      	ldrh	r2, [r1, #12]
 8005950:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005954:	d031      	beq.n	80059ba <__ssputs_r+0x7e>
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	6909      	ldr	r1, [r1, #16]
 800595a:	1a6f      	subs	r7, r5, r1
 800595c:	6965      	ldr	r5, [r4, #20]
 800595e:	2302      	movs	r3, #2
 8005960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005964:	fb95 f5f3 	sdiv	r5, r5, r3
 8005968:	f109 0301 	add.w	r3, r9, #1
 800596c:	443b      	add	r3, r7
 800596e:	429d      	cmp	r5, r3
 8005970:	bf38      	it	cc
 8005972:	461d      	movcc	r5, r3
 8005974:	0553      	lsls	r3, r2, #21
 8005976:	d530      	bpl.n	80059da <__ssputs_r+0x9e>
 8005978:	4629      	mov	r1, r5
 800597a:	f000 fb2b 	bl	8005fd4 <_malloc_r>
 800597e:	4606      	mov	r6, r0
 8005980:	b950      	cbnz	r0, 8005998 <__ssputs_r+0x5c>
 8005982:	230c      	movs	r3, #12
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	463a      	mov	r2, r7
 800599a:	6921      	ldr	r1, [r4, #16]
 800599c:	f000 faa8 	bl	8005ef0 <memcpy>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	6126      	str	r6, [r4, #16]
 80059ae:	6165      	str	r5, [r4, #20]
 80059b0:	443e      	add	r6, r7
 80059b2:	1bed      	subs	r5, r5, r7
 80059b4:	6026      	str	r6, [r4, #0]
 80059b6:	60a5      	str	r5, [r4, #8]
 80059b8:	464e      	mov	r6, r9
 80059ba:	454e      	cmp	r6, r9
 80059bc:	d900      	bls.n	80059c0 <__ssputs_r+0x84>
 80059be:	464e      	mov	r6, r9
 80059c0:	4632      	mov	r2, r6
 80059c2:	4641      	mov	r1, r8
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	f000 fa9e 	bl	8005f06 <memmove>
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	1b9b      	subs	r3, r3, r6
 80059ce:	60a3      	str	r3, [r4, #8]
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	441e      	add	r6, r3
 80059d4:	6026      	str	r6, [r4, #0]
 80059d6:	2000      	movs	r0, #0
 80059d8:	e7dc      	b.n	8005994 <__ssputs_r+0x58>
 80059da:	462a      	mov	r2, r5
 80059dc:	f000 fb54 	bl	8006088 <_realloc_r>
 80059e0:	4606      	mov	r6, r0
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d1e2      	bne.n	80059ac <__ssputs_r+0x70>
 80059e6:	6921      	ldr	r1, [r4, #16]
 80059e8:	4650      	mov	r0, sl
 80059ea:	f000 faa5 	bl	8005f38 <_free_r>
 80059ee:	e7c8      	b.n	8005982 <__ssputs_r+0x46>

080059f0 <_svfiprintf_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	461d      	mov	r5, r3
 80059f6:	898b      	ldrh	r3, [r1, #12]
 80059f8:	061f      	lsls	r7, r3, #24
 80059fa:	b09d      	sub	sp, #116	; 0x74
 80059fc:	4680      	mov	r8, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	4616      	mov	r6, r2
 8005a02:	d50f      	bpl.n	8005a24 <_svfiprintf_r+0x34>
 8005a04:	690b      	ldr	r3, [r1, #16]
 8005a06:	b96b      	cbnz	r3, 8005a24 <_svfiprintf_r+0x34>
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	f000 fae3 	bl	8005fd4 <_malloc_r>
 8005a0e:	6020      	str	r0, [r4, #0]
 8005a10:	6120      	str	r0, [r4, #16]
 8005a12:	b928      	cbnz	r0, 8005a20 <_svfiprintf_r+0x30>
 8005a14:	230c      	movs	r3, #12
 8005a16:	f8c8 3000 	str.w	r3, [r8]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1e:	e0c8      	b.n	8005bb2 <_svfiprintf_r+0x1c2>
 8005a20:	2340      	movs	r3, #64	; 0x40
 8005a22:	6163      	str	r3, [r4, #20]
 8005a24:	2300      	movs	r3, #0
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	2320      	movs	r3, #32
 8005a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2e:	2330      	movs	r3, #48	; 0x30
 8005a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a34:	9503      	str	r5, [sp, #12]
 8005a36:	f04f 0b01 	mov.w	fp, #1
 8005a3a:	4637      	mov	r7, r6
 8005a3c:	463d      	mov	r5, r7
 8005a3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a42:	b10b      	cbz	r3, 8005a48 <_svfiprintf_r+0x58>
 8005a44:	2b25      	cmp	r3, #37	; 0x25
 8005a46:	d13e      	bne.n	8005ac6 <_svfiprintf_r+0xd6>
 8005a48:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a4c:	d00b      	beq.n	8005a66 <_svfiprintf_r+0x76>
 8005a4e:	4653      	mov	r3, sl
 8005a50:	4632      	mov	r2, r6
 8005a52:	4621      	mov	r1, r4
 8005a54:	4640      	mov	r0, r8
 8005a56:	f7ff ff71 	bl	800593c <__ssputs_r>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f000 80a4 	beq.w	8005ba8 <_svfiprintf_r+0x1b8>
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	4453      	add	r3, sl
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
 8005a66:	783b      	ldrb	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 809d 	beq.w	8005ba8 <_svfiprintf_r+0x1b8>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	9307      	str	r3, [sp, #28]
 8005a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a80:	931a      	str	r3, [sp, #104]	; 0x68
 8005a82:	462f      	mov	r7, r5
 8005a84:	2205      	movs	r2, #5
 8005a86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a8a:	4850      	ldr	r0, [pc, #320]	; (8005bcc <_svfiprintf_r+0x1dc>)
 8005a8c:	f7fa fbb8 	bl	8000200 <memchr>
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	b9d0      	cbnz	r0, 8005aca <_svfiprintf_r+0xda>
 8005a94:	06d9      	lsls	r1, r3, #27
 8005a96:	bf44      	itt	mi
 8005a98:	2220      	movmi	r2, #32
 8005a9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a9e:	071a      	lsls	r2, r3, #28
 8005aa0:	bf44      	itt	mi
 8005aa2:	222b      	movmi	r2, #43	; 0x2b
 8005aa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005aa8:	782a      	ldrb	r2, [r5, #0]
 8005aaa:	2a2a      	cmp	r2, #42	; 0x2a
 8005aac:	d015      	beq.n	8005ada <_svfiprintf_r+0xea>
 8005aae:	9a07      	ldr	r2, [sp, #28]
 8005ab0:	462f      	mov	r7, r5
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	250a      	movs	r5, #10
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94d      	bls.n	8005b5e <_svfiprintf_r+0x16e>
 8005ac2:	b1b8      	cbz	r0, 8005af4 <_svfiprintf_r+0x104>
 8005ac4:	e00f      	b.n	8005ae6 <_svfiprintf_r+0xf6>
 8005ac6:	462f      	mov	r7, r5
 8005ac8:	e7b8      	b.n	8005a3c <_svfiprintf_r+0x4c>
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <_svfiprintf_r+0x1dc>)
 8005acc:	1a80      	subs	r0, r0, r2
 8005ace:	fa0b f000 	lsl.w	r0, fp, r0
 8005ad2:	4318      	orrs	r0, r3
 8005ad4:	9004      	str	r0, [sp, #16]
 8005ad6:	463d      	mov	r5, r7
 8005ad8:	e7d3      	b.n	8005a82 <_svfiprintf_r+0x92>
 8005ada:	9a03      	ldr	r2, [sp, #12]
 8005adc:	1d11      	adds	r1, r2, #4
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	db01      	blt.n	8005aea <_svfiprintf_r+0xfa>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e004      	b.n	8005af4 <_svfiprintf_r+0x104>
 8005aea:	4252      	negs	r2, r2
 8005aec:	f043 0302 	orr.w	r3, r3, #2
 8005af0:	9207      	str	r2, [sp, #28]
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	783b      	ldrb	r3, [r7, #0]
 8005af6:	2b2e      	cmp	r3, #46	; 0x2e
 8005af8:	d10c      	bne.n	8005b14 <_svfiprintf_r+0x124>
 8005afa:	787b      	ldrb	r3, [r7, #1]
 8005afc:	2b2a      	cmp	r3, #42	; 0x2a
 8005afe:	d133      	bne.n	8005b68 <_svfiprintf_r+0x178>
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	1d1a      	adds	r2, r3, #4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	9203      	str	r2, [sp, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b10:	3702      	adds	r7, #2
 8005b12:	9305      	str	r3, [sp, #20]
 8005b14:	4d2e      	ldr	r5, [pc, #184]	; (8005bd0 <_svfiprintf_r+0x1e0>)
 8005b16:	7839      	ldrb	r1, [r7, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7fa fb70 	bl	8000200 <memchr>
 8005b20:	b138      	cbz	r0, 8005b32 <_svfiprintf_r+0x142>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	1b40      	subs	r0, r0, r5
 8005b26:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	4303      	orrs	r3, r0
 8005b2e:	3701      	adds	r7, #1
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	7839      	ldrb	r1, [r7, #0]
 8005b34:	4827      	ldr	r0, [pc, #156]	; (8005bd4 <_svfiprintf_r+0x1e4>)
 8005b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3a:	2206      	movs	r2, #6
 8005b3c:	1c7e      	adds	r6, r7, #1
 8005b3e:	f7fa fb5f 	bl	8000200 <memchr>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d038      	beq.n	8005bb8 <_svfiprintf_r+0x1c8>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <_svfiprintf_r+0x1e8>)
 8005b48:	bb13      	cbnz	r3, 8005b90 <_svfiprintf_r+0x1a0>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	3308      	adds	r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	444b      	add	r3, r9
 8005b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5c:	e76d      	b.n	8005a3a <_svfiprintf_r+0x4a>
 8005b5e:	fb05 3202 	mla	r2, r5, r2, r3
 8005b62:	2001      	movs	r0, #1
 8005b64:	460f      	mov	r7, r1
 8005b66:	e7a6      	b.n	8005ab6 <_svfiprintf_r+0xc6>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	3701      	adds	r7, #1
 8005b6c:	9305      	str	r3, [sp, #20]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	250a      	movs	r5, #10
 8005b72:	4638      	mov	r0, r7
 8005b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b78:	3a30      	subs	r2, #48	; 0x30
 8005b7a:	2a09      	cmp	r2, #9
 8005b7c:	d903      	bls.n	8005b86 <_svfiprintf_r+0x196>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0c8      	beq.n	8005b14 <_svfiprintf_r+0x124>
 8005b82:	9105      	str	r1, [sp, #20]
 8005b84:	e7c6      	b.n	8005b14 <_svfiprintf_r+0x124>
 8005b86:	fb05 2101 	mla	r1, r5, r1, r2
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	e7f0      	b.n	8005b72 <_svfiprintf_r+0x182>
 8005b90:	ab03      	add	r3, sp, #12
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4622      	mov	r2, r4
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005b98:	a904      	add	r1, sp, #16
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f3af 8000 	nop.w
 8005ba0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005ba4:	4681      	mov	r9, r0
 8005ba6:	d1d6      	bne.n	8005b56 <_svfiprintf_r+0x166>
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	065b      	lsls	r3, r3, #25
 8005bac:	f53f af35 	bmi.w	8005a1a <_svfiprintf_r+0x2a>
 8005bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb2:	b01d      	add	sp, #116	; 0x74
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	ab03      	add	r3, sp, #12
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <_svfiprintf_r+0x1ec>)
 8005bc0:	a904      	add	r1, sp, #16
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f000 f882 	bl	8005ccc <_printf_i>
 8005bc8:	e7ea      	b.n	8005ba0 <_svfiprintf_r+0x1b0>
 8005bca:	bf00      	nop
 8005bcc:	080061fc 	.word	0x080061fc
 8005bd0:	08006202 	.word	0x08006202
 8005bd4:	08006206 	.word	0x08006206
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	0800593d 	.word	0x0800593d

08005be0 <_printf_common>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	4691      	mov	r9, r2
 8005be6:	461f      	mov	r7, r3
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bfb8      	it	lt
 8005bf4:	4613      	movlt	r3, r2
 8005bf6:	f8c9 3000 	str.w	r3, [r9]
 8005bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bfe:	4606      	mov	r6, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	b112      	cbz	r2, 8005c0a <_printf_common+0x2a>
 8005c04:	3301      	adds	r3, #1
 8005c06:	f8c9 3000 	str.w	r3, [r9]
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0699      	lsls	r1, r3, #26
 8005c0e:	bf42      	ittt	mi
 8005c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c14:	3302      	addmi	r3, #2
 8005c16:	f8c9 3000 	strmi.w	r3, [r9]
 8005c1a:	6825      	ldr	r5, [r4, #0]
 8005c1c:	f015 0506 	ands.w	r5, r5, #6
 8005c20:	d107      	bne.n	8005c32 <_printf_common+0x52>
 8005c22:	f104 0a19 	add.w	sl, r4, #25
 8005c26:	68e3      	ldr	r3, [r4, #12]
 8005c28:	f8d9 2000 	ldr.w	r2, [r9]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	dc28      	bgt.n	8005c84 <_printf_common+0xa4>
 8005c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c36:	6822      	ldr	r2, [r4, #0]
 8005c38:	3300      	adds	r3, #0
 8005c3a:	bf18      	it	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	0692      	lsls	r2, r2, #26
 8005c40:	d42d      	bmi.n	8005c9e <_printf_common+0xbe>
 8005c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c46:	4639      	mov	r1, r7
 8005c48:	4630      	mov	r0, r6
 8005c4a:	47c0      	blx	r8
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d020      	beq.n	8005c92 <_printf_common+0xb2>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	68e5      	ldr	r5, [r4, #12]
 8005c54:	f8d9 2000 	ldr.w	r2, [r9]
 8005c58:	f003 0306 	and.w	r3, r3, #6
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	bf08      	it	eq
 8005c60:	1aad      	subeq	r5, r5, r2
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	6922      	ldr	r2, [r4, #16]
 8005c66:	bf0c      	ite	eq
 8005c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c6c:	2500      	movne	r5, #0
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bfc4      	itt	gt
 8005c72:	1a9b      	subgt	r3, r3, r2
 8005c74:	18ed      	addgt	r5, r5, r3
 8005c76:	f04f 0900 	mov.w	r9, #0
 8005c7a:	341a      	adds	r4, #26
 8005c7c:	454d      	cmp	r5, r9
 8005c7e:	d11a      	bne.n	8005cb6 <_printf_common+0xd6>
 8005c80:	2000      	movs	r0, #0
 8005c82:	e008      	b.n	8005c96 <_printf_common+0xb6>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4652      	mov	r2, sl
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	47c0      	blx	r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d103      	bne.n	8005c9a <_printf_common+0xba>
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c9a:	3501      	adds	r5, #1
 8005c9c:	e7c3      	b.n	8005c26 <_printf_common+0x46>
 8005c9e:	18e1      	adds	r1, r4, r3
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	2030      	movs	r0, #48	; 0x30
 8005ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ca8:	4422      	add	r2, r4
 8005caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb2:	3302      	adds	r3, #2
 8005cb4:	e7c5      	b.n	8005c42 <_printf_common+0x62>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4622      	mov	r2, r4
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	47c0      	blx	r8
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d0e6      	beq.n	8005c92 <_printf_common+0xb2>
 8005cc4:	f109 0901 	add.w	r9, r9, #1
 8005cc8:	e7d8      	b.n	8005c7c <_printf_common+0x9c>
	...

08005ccc <_printf_i>:
 8005ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	7e09      	ldrb	r1, [r1, #24]
 8005cd8:	b085      	sub	sp, #20
 8005cda:	296e      	cmp	r1, #110	; 0x6e
 8005cdc:	4617      	mov	r7, r2
 8005cde:	4606      	mov	r6, r0
 8005ce0:	4698      	mov	r8, r3
 8005ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ce4:	f000 80b3 	beq.w	8005e4e <_printf_i+0x182>
 8005ce8:	d822      	bhi.n	8005d30 <_printf_i+0x64>
 8005cea:	2963      	cmp	r1, #99	; 0x63
 8005cec:	d036      	beq.n	8005d5c <_printf_i+0x90>
 8005cee:	d80a      	bhi.n	8005d06 <_printf_i+0x3a>
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	f000 80b9 	beq.w	8005e68 <_printf_i+0x19c>
 8005cf6:	2958      	cmp	r1, #88	; 0x58
 8005cf8:	f000 8083 	beq.w	8005e02 <_printf_i+0x136>
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d04:	e032      	b.n	8005d6c <_printf_i+0xa0>
 8005d06:	2964      	cmp	r1, #100	; 0x64
 8005d08:	d001      	beq.n	8005d0e <_printf_i+0x42>
 8005d0a:	2969      	cmp	r1, #105	; 0x69
 8005d0c:	d1f6      	bne.n	8005cfc <_printf_i+0x30>
 8005d0e:	6820      	ldr	r0, [r4, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	0605      	lsls	r5, r0, #24
 8005d14:	f103 0104 	add.w	r1, r3, #4
 8005d18:	d52a      	bpl.n	8005d70 <_printf_i+0xa4>
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da03      	bge.n	8005d2a <_printf_i+0x5e>
 8005d22:	222d      	movs	r2, #45	; 0x2d
 8005d24:	425b      	negs	r3, r3
 8005d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d2a:	486f      	ldr	r0, [pc, #444]	; (8005ee8 <_printf_i+0x21c>)
 8005d2c:	220a      	movs	r2, #10
 8005d2e:	e039      	b.n	8005da4 <_printf_i+0xd8>
 8005d30:	2973      	cmp	r1, #115	; 0x73
 8005d32:	f000 809d 	beq.w	8005e70 <_printf_i+0x1a4>
 8005d36:	d808      	bhi.n	8005d4a <_printf_i+0x7e>
 8005d38:	296f      	cmp	r1, #111	; 0x6f
 8005d3a:	d020      	beq.n	8005d7e <_printf_i+0xb2>
 8005d3c:	2970      	cmp	r1, #112	; 0x70
 8005d3e:	d1dd      	bne.n	8005cfc <_printf_i+0x30>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	f043 0320 	orr.w	r3, r3, #32
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	e003      	b.n	8005d52 <_printf_i+0x86>
 8005d4a:	2975      	cmp	r1, #117	; 0x75
 8005d4c:	d017      	beq.n	8005d7e <_printf_i+0xb2>
 8005d4e:	2978      	cmp	r1, #120	; 0x78
 8005d50:	d1d4      	bne.n	8005cfc <_printf_i+0x30>
 8005d52:	2378      	movs	r3, #120	; 0x78
 8005d54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d58:	4864      	ldr	r0, [pc, #400]	; (8005eec <_printf_i+0x220>)
 8005d5a:	e055      	b.n	8005e08 <_printf_i+0x13c>
 8005d5c:	6813      	ldr	r3, [r2, #0]
 8005d5e:	1d19      	adds	r1, r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e08c      	b.n	8005e8a <_printf_i+0x1be>
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6011      	str	r1, [r2, #0]
 8005d74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d78:	bf18      	it	ne
 8005d7a:	b21b      	sxthne	r3, r3
 8005d7c:	e7cf      	b.n	8005d1e <_printf_i+0x52>
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	6825      	ldr	r5, [r4, #0]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6010      	str	r0, [r2, #0]
 8005d86:	0628      	lsls	r0, r5, #24
 8005d88:	d501      	bpl.n	8005d8e <_printf_i+0xc2>
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	e002      	b.n	8005d94 <_printf_i+0xc8>
 8005d8e:	0668      	lsls	r0, r5, #25
 8005d90:	d5fb      	bpl.n	8005d8a <_printf_i+0xbe>
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_printf_i+0x21c>)
 8005d96:	296f      	cmp	r1, #111	; 0x6f
 8005d98:	bf14      	ite	ne
 8005d9a:	220a      	movne	r2, #10
 8005d9c:	2208      	moveq	r2, #8
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da4:	6865      	ldr	r5, [r4, #4]
 8005da6:	60a5      	str	r5, [r4, #8]
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	f2c0 8095 	blt.w	8005ed8 <_printf_i+0x20c>
 8005dae:	6821      	ldr	r1, [r4, #0]
 8005db0:	f021 0104 	bic.w	r1, r1, #4
 8005db4:	6021      	str	r1, [r4, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d13d      	bne.n	8005e36 <_printf_i+0x16a>
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	f040 808e 	bne.w	8005edc <_printf_i+0x210>
 8005dc0:	4665      	mov	r5, ip
 8005dc2:	2a08      	cmp	r2, #8
 8005dc4:	d10b      	bne.n	8005dde <_printf_i+0x112>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	07db      	lsls	r3, r3, #31
 8005dca:	d508      	bpl.n	8005dde <_printf_i+0x112>
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bfde      	ittt	le
 8005dd4:	2330      	movle	r3, #48	; 0x30
 8005dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dda:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dde:	ebac 0305 	sub.w	r3, ip, r5
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	f8cd 8000 	str.w	r8, [sp]
 8005de8:	463b      	mov	r3, r7
 8005dea:	aa03      	add	r2, sp, #12
 8005dec:	4621      	mov	r1, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff fef6 	bl	8005be0 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	d14d      	bne.n	8005e94 <_printf_i+0x1c8>
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dfc:	b005      	add	sp, #20
 8005dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e02:	4839      	ldr	r0, [pc, #228]	; (8005ee8 <_printf_i+0x21c>)
 8005e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e08:	6813      	ldr	r3, [r2, #0]
 8005e0a:	6821      	ldr	r1, [r4, #0]
 8005e0c:	1d1d      	adds	r5, r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6015      	str	r5, [r2, #0]
 8005e12:	060a      	lsls	r2, r1, #24
 8005e14:	d50b      	bpl.n	8005e2e <_printf_i+0x162>
 8005e16:	07ca      	lsls	r2, r1, #31
 8005e18:	bf44      	itt	mi
 8005e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8005e1e:	6021      	strmi	r1, [r4, #0]
 8005e20:	b91b      	cbnz	r3, 8005e2a <_printf_i+0x15e>
 8005e22:	6822      	ldr	r2, [r4, #0]
 8005e24:	f022 0220 	bic.w	r2, r2, #32
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	e7b7      	b.n	8005d9e <_printf_i+0xd2>
 8005e2e:	064d      	lsls	r5, r1, #25
 8005e30:	bf48      	it	mi
 8005e32:	b29b      	uxthmi	r3, r3
 8005e34:	e7ef      	b.n	8005e16 <_printf_i+0x14a>
 8005e36:	4665      	mov	r5, ip
 8005e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8005e40:	5cc3      	ldrb	r3, [r0, r3]
 8005e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e46:	460b      	mov	r3, r1
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d1f5      	bne.n	8005e38 <_printf_i+0x16c>
 8005e4c:	e7b9      	b.n	8005dc2 <_printf_i+0xf6>
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	6825      	ldr	r5, [r4, #0]
 8005e52:	6961      	ldr	r1, [r4, #20]
 8005e54:	1d18      	adds	r0, r3, #4
 8005e56:	6010      	str	r0, [r2, #0]
 8005e58:	0628      	lsls	r0, r5, #24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	d501      	bpl.n	8005e62 <_printf_i+0x196>
 8005e5e:	6019      	str	r1, [r3, #0]
 8005e60:	e002      	b.n	8005e68 <_printf_i+0x19c>
 8005e62:	066a      	lsls	r2, r5, #25
 8005e64:	d5fb      	bpl.n	8005e5e <_printf_i+0x192>
 8005e66:	8019      	strh	r1, [r3, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	4665      	mov	r5, ip
 8005e6e:	e7b9      	b.n	8005de4 <_printf_i+0x118>
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	681d      	ldr	r5, [r3, #0]
 8005e78:	6862      	ldr	r2, [r4, #4]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f7fa f9bf 	bl	8000200 <memchr>
 8005e82:	b108      	cbz	r0, 8005e88 <_printf_i+0x1bc>
 8005e84:	1b40      	subs	r0, r0, r5
 8005e86:	6060      	str	r0, [r4, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e92:	e7a7      	b.n	8005de4 <_printf_i+0x118>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4639      	mov	r1, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0aa      	beq.n	8005df8 <_printf_i+0x12c>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	079b      	lsls	r3, r3, #30
 8005ea6:	d413      	bmi.n	8005ed0 <_printf_i+0x204>
 8005ea8:	68e0      	ldr	r0, [r4, #12]
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	4298      	cmp	r0, r3
 8005eae:	bfb8      	it	lt
 8005eb0:	4618      	movlt	r0, r3
 8005eb2:	e7a3      	b.n	8005dfc <_printf_i+0x130>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	464a      	mov	r2, r9
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	47c0      	blx	r8
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	d09a      	beq.n	8005df8 <_printf_i+0x12c>
 8005ec2:	3501      	adds	r5, #1
 8005ec4:	68e3      	ldr	r3, [r4, #12]
 8005ec6:	9a03      	ldr	r2, [sp, #12]
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	dcf2      	bgt.n	8005eb4 <_printf_i+0x1e8>
 8005ece:	e7eb      	b.n	8005ea8 <_printf_i+0x1dc>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	f104 0919 	add.w	r9, r4, #25
 8005ed6:	e7f5      	b.n	8005ec4 <_printf_i+0x1f8>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ac      	bne.n	8005e36 <_printf_i+0x16a>
 8005edc:	7803      	ldrb	r3, [r0, #0]
 8005ede:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee6:	e76c      	b.n	8005dc2 <_printf_i+0xf6>
 8005ee8:	0800620d 	.word	0x0800620d
 8005eec:	0800621e 	.word	0x0800621e

08005ef0 <memcpy>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	1e43      	subs	r3, r0, #1
 8005ef4:	440a      	add	r2, r1
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	d100      	bne.n	8005efc <memcpy+0xc>
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f04:	e7f7      	b.n	8005ef6 <memcpy+0x6>

08005f06 <memmove>:
 8005f06:	4288      	cmp	r0, r1
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	eb01 0302 	add.w	r3, r1, r2
 8005f0e:	d807      	bhi.n	8005f20 <memmove+0x1a>
 8005f10:	1e42      	subs	r2, r0, #1
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d00a      	beq.n	8005f2c <memmove+0x26>
 8005f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f1e:	e7f8      	b.n	8005f12 <memmove+0xc>
 8005f20:	4283      	cmp	r3, r0
 8005f22:	d9f5      	bls.n	8005f10 <memmove+0xa>
 8005f24:	1881      	adds	r1, r0, r2
 8005f26:	1ad2      	subs	r2, r2, r3
 8005f28:	42d3      	cmn	r3, r2
 8005f2a:	d100      	bne.n	8005f2e <memmove+0x28>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f32:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f36:	e7f7      	b.n	8005f28 <memmove+0x22>

08005f38 <_free_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d045      	beq.n	8005fcc <_free_r+0x94>
 8005f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f44:	1f0c      	subs	r4, r1, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb8      	it	lt
 8005f4a:	18e4      	addlt	r4, r4, r3
 8005f4c:	f000 f8d2 	bl	80060f4 <__malloc_lock>
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <_free_r+0x98>)
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	4610      	mov	r0, r2
 8005f56:	b933      	cbnz	r3, 8005f66 <_free_r+0x2e>
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	6014      	str	r4, [r2, #0]
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f62:	f000 b8c8 	b.w	80060f6 <__malloc_unlock>
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	d90c      	bls.n	8005f84 <_free_r+0x4c>
 8005f6a:	6821      	ldr	r1, [r4, #0]
 8005f6c:	1862      	adds	r2, r4, r1
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	bf04      	itt	eq
 8005f72:	681a      	ldreq	r2, [r3, #0]
 8005f74:	685b      	ldreq	r3, [r3, #4]
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	bf04      	itt	eq
 8005f7a:	1852      	addeq	r2, r2, r1
 8005f7c:	6022      	streq	r2, [r4, #0]
 8005f7e:	6004      	str	r4, [r0, #0]
 8005f80:	e7ec      	b.n	8005f5c <_free_r+0x24>
 8005f82:	4613      	mov	r3, r2
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	b10a      	cbz	r2, 8005f8c <_free_r+0x54>
 8005f88:	42a2      	cmp	r2, r4
 8005f8a:	d9fa      	bls.n	8005f82 <_free_r+0x4a>
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	1858      	adds	r0, r3, r1
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d10b      	bne.n	8005fac <_free_r+0x74>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	4401      	add	r1, r0
 8005f98:	1858      	adds	r0, r3, r1
 8005f9a:	4282      	cmp	r2, r0
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	d1dd      	bne.n	8005f5c <_free_r+0x24>
 8005fa0:	6810      	ldr	r0, [r2, #0]
 8005fa2:	6852      	ldr	r2, [r2, #4]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	6019      	str	r1, [r3, #0]
 8005faa:	e7d7      	b.n	8005f5c <_free_r+0x24>
 8005fac:	d902      	bls.n	8005fb4 <_free_r+0x7c>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	e7d3      	b.n	8005f5c <_free_r+0x24>
 8005fb4:	6820      	ldr	r0, [r4, #0]
 8005fb6:	1821      	adds	r1, r4, r0
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	bf04      	itt	eq
 8005fbc:	6811      	ldreq	r1, [r2, #0]
 8005fbe:	6852      	ldreq	r2, [r2, #4]
 8005fc0:	6062      	str	r2, [r4, #4]
 8005fc2:	bf04      	itt	eq
 8005fc4:	1809      	addeq	r1, r1, r0
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	605c      	str	r4, [r3, #4]
 8005fca:	e7c7      	b.n	8005f5c <_free_r+0x24>
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000100 	.word	0x20000100

08005fd4 <_malloc_r>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	1ccd      	adds	r5, r1, #3
 8005fd8:	f025 0503 	bic.w	r5, r5, #3
 8005fdc:	3508      	adds	r5, #8
 8005fde:	2d0c      	cmp	r5, #12
 8005fe0:	bf38      	it	cc
 8005fe2:	250c      	movcc	r5, #12
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	db01      	blt.n	8005fee <_malloc_r+0x1a>
 8005fea:	42a9      	cmp	r1, r5
 8005fec:	d903      	bls.n	8005ff6 <_malloc_r+0x22>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	f000 f87d 	bl	80060f4 <__malloc_lock>
 8005ffa:	4a21      	ldr	r2, [pc, #132]	; (8006080 <_malloc_r+0xac>)
 8005ffc:	6814      	ldr	r4, [r2, #0]
 8005ffe:	4621      	mov	r1, r4
 8006000:	b991      	cbnz	r1, 8006028 <_malloc_r+0x54>
 8006002:	4c20      	ldr	r4, [pc, #128]	; (8006084 <_malloc_r+0xb0>)
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	b91b      	cbnz	r3, 8006010 <_malloc_r+0x3c>
 8006008:	4630      	mov	r0, r6
 800600a:	f000 f863 	bl	80060d4 <_sbrk_r>
 800600e:	6020      	str	r0, [r4, #0]
 8006010:	4629      	mov	r1, r5
 8006012:	4630      	mov	r0, r6
 8006014:	f000 f85e 	bl	80060d4 <_sbrk_r>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d124      	bne.n	8006066 <_malloc_r+0x92>
 800601c:	230c      	movs	r3, #12
 800601e:	6033      	str	r3, [r6, #0]
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f868 	bl	80060f6 <__malloc_unlock>
 8006026:	e7e4      	b.n	8005ff2 <_malloc_r+0x1e>
 8006028:	680b      	ldr	r3, [r1, #0]
 800602a:	1b5b      	subs	r3, r3, r5
 800602c:	d418      	bmi.n	8006060 <_malloc_r+0x8c>
 800602e:	2b0b      	cmp	r3, #11
 8006030:	d90f      	bls.n	8006052 <_malloc_r+0x7e>
 8006032:	600b      	str	r3, [r1, #0]
 8006034:	50cd      	str	r5, [r1, r3]
 8006036:	18cc      	adds	r4, r1, r3
 8006038:	4630      	mov	r0, r6
 800603a:	f000 f85c 	bl	80060f6 <__malloc_unlock>
 800603e:	f104 000b 	add.w	r0, r4, #11
 8006042:	1d23      	adds	r3, r4, #4
 8006044:	f020 0007 	bic.w	r0, r0, #7
 8006048:	1ac3      	subs	r3, r0, r3
 800604a:	d0d3      	beq.n	8005ff4 <_malloc_r+0x20>
 800604c:	425a      	negs	r2, r3
 800604e:	50e2      	str	r2, [r4, r3]
 8006050:	e7d0      	b.n	8005ff4 <_malloc_r+0x20>
 8006052:	428c      	cmp	r4, r1
 8006054:	684b      	ldr	r3, [r1, #4]
 8006056:	bf16      	itet	ne
 8006058:	6063      	strne	r3, [r4, #4]
 800605a:	6013      	streq	r3, [r2, #0]
 800605c:	460c      	movne	r4, r1
 800605e:	e7eb      	b.n	8006038 <_malloc_r+0x64>
 8006060:	460c      	mov	r4, r1
 8006062:	6849      	ldr	r1, [r1, #4]
 8006064:	e7cc      	b.n	8006000 <_malloc_r+0x2c>
 8006066:	1cc4      	adds	r4, r0, #3
 8006068:	f024 0403 	bic.w	r4, r4, #3
 800606c:	42a0      	cmp	r0, r4
 800606e:	d005      	beq.n	800607c <_malloc_r+0xa8>
 8006070:	1a21      	subs	r1, r4, r0
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f82e 	bl	80060d4 <_sbrk_r>
 8006078:	3001      	adds	r0, #1
 800607a:	d0cf      	beq.n	800601c <_malloc_r+0x48>
 800607c:	6025      	str	r5, [r4, #0]
 800607e:	e7db      	b.n	8006038 <_malloc_r+0x64>
 8006080:	20000100 	.word	0x20000100
 8006084:	20000104 	.word	0x20000104

08006088 <_realloc_r>:
 8006088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608a:	4607      	mov	r7, r0
 800608c:	4614      	mov	r4, r2
 800608e:	460e      	mov	r6, r1
 8006090:	b921      	cbnz	r1, 800609c <_realloc_r+0x14>
 8006092:	4611      	mov	r1, r2
 8006094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006098:	f7ff bf9c 	b.w	8005fd4 <_malloc_r>
 800609c:	b922      	cbnz	r2, 80060a8 <_realloc_r+0x20>
 800609e:	f7ff ff4b 	bl	8005f38 <_free_r>
 80060a2:	4625      	mov	r5, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a8:	f000 f826 	bl	80060f8 <_malloc_usable_size_r>
 80060ac:	42a0      	cmp	r0, r4
 80060ae:	d20f      	bcs.n	80060d0 <_realloc_r+0x48>
 80060b0:	4621      	mov	r1, r4
 80060b2:	4638      	mov	r0, r7
 80060b4:	f7ff ff8e 	bl	8005fd4 <_malloc_r>
 80060b8:	4605      	mov	r5, r0
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0f2      	beq.n	80060a4 <_realloc_r+0x1c>
 80060be:	4631      	mov	r1, r6
 80060c0:	4622      	mov	r2, r4
 80060c2:	f7ff ff15 	bl	8005ef0 <memcpy>
 80060c6:	4631      	mov	r1, r6
 80060c8:	4638      	mov	r0, r7
 80060ca:	f7ff ff35 	bl	8005f38 <_free_r>
 80060ce:	e7e9      	b.n	80060a4 <_realloc_r+0x1c>
 80060d0:	4635      	mov	r5, r6
 80060d2:	e7e7      	b.n	80060a4 <_realloc_r+0x1c>

080060d4 <_sbrk_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4c06      	ldr	r4, [pc, #24]	; (80060f0 <_sbrk_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4605      	mov	r5, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f7fb fbb2 	bl	8001848 <_sbrk>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_sbrk_r+0x1a>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_sbrk_r+0x1a>
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	2000051c 	.word	0x2000051c

080060f4 <__malloc_lock>:
 80060f4:	4770      	bx	lr

080060f6 <__malloc_unlock>:
 80060f6:	4770      	bx	lr

080060f8 <_malloc_usable_size_r>:
 80060f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060fc:	1f18      	subs	r0, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfbc      	itt	lt
 8006102:	580b      	ldrlt	r3, [r1, r0]
 8006104:	18c0      	addlt	r0, r0, r3
 8006106:	4770      	bx	lr

08006108 <_init>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr

08006114 <_fini>:
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	bf00      	nop
 8006118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611a:	bc08      	pop	{r3}
 800611c:	469e      	mov	lr, r3
 800611e:	4770      	bx	lr
