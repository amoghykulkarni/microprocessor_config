
ECSE444_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c4  080077c4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077cc  080077cc  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077d0  080077d0  000177d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080077d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200000d0  080078a4  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  080078a4  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f753  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d83  00000000  00000000  0003f853  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  000435d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00044f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e8df  00000000  00000000  00046750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000164cc  00000000  00000000  0007502f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00119769  00000000  00000000  0008b4fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4c64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d04  00000000  00000000  001a4ce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d0 	.word	0x200000d0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007604 	.word	0x08007604

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	08007604 	.word	0x08007604

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000ec 	.word	0x200000ec
 80005d0:	20000140 	.word	0x20000140

080005d4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2120      	movs	r1, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff3b 	bl	8001460 <SENSOR_IO_Read>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f023 0304 	bic.w	r3, r3, #4
 80005f4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f023 0303 	bic.w	r3, r3, #3
 8000604:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000614:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	7bfa      	ldrb	r2, [r7, #15]
 800061c:	2120      	movs	r1, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f000 ff04 	bl	800142c <SENSOR_IO_Write>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800063a:	f000 feed 	bl	8001418 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	210f      	movs	r1, #15
 8000644:	4618      	mov	r0, r3
 8000646:	f000 ff0b 	bl	8001460 <SENSOR_IO_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	b2d8      	uxtb	r0, r3
 8000666:	f107 020c 	add.w	r2, r7, #12
 800066a:	2302      	movs	r3, #2
 800066c:	21b0      	movs	r1, #176	; 0xb0
 800066e:	f000 ff15 	bl	800149c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8000672:	7b3b      	ldrb	r3, [r7, #12]
 8000674:	085b      	lsrs	r3, r3, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	085b      	lsrs	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	f107 020c 	add.w	r2, r7, #12
 800068a:	2302      	movs	r3, #2
 800068c:	21b6      	movs	r1, #182	; 0xb6
 800068e:	f000 ff05 	bl	800149c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000692:	7b7b      	ldrb	r3, [r7, #13]
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21a      	sxth	r2, r3
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	b21b      	sxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	b2d8      	uxtb	r0, r3
 80006a4:	f107 020c 	add.w	r2, r7, #12
 80006a8:	2302      	movs	r3, #2
 80006aa:	21ba      	movs	r1, #186	; 0xba
 80006ac:	f000 fef6 	bl	800149c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006b0:	7b7b      	ldrb	r3, [r7, #13]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	7b3b      	ldrb	r3, [r7, #12]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	b2d8      	uxtb	r0, r3
 80006c2:	f107 020c 	add.w	r2, r7, #12
 80006c6:	2302      	movs	r3, #2
 80006c8:	21a8      	movs	r1, #168	; 0xa8
 80006ca:	f000 fee7 	bl	800149c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	7b3b      	ldrb	r3, [r7, #12]
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000700:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000704:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000708:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	ee07 3a90 	vmov	s15, r3
 8000712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800071a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800072e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000732:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800073e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000742:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000788 <HTS221_H_ReadHumidity+0x130>
 8000746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	dd01      	ble.n	8000754 <HTS221_H_ReadHumidity+0xfc>
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HTS221_H_ReadHumidity+0x134>)
 8000752:	e00a      	b.n	800076a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000754:	edd7 7a04 	vldr	s15, [r7, #16]
 8000758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000760:	d502      	bpl.n	8000768 <HTS221_H_ReadHumidity+0x110>
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	e000      	b.n	800076a <HTS221_H_ReadHumidity+0x112>
 8000768:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800076a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800076c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000770:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000778:	eef0 7a66 	vmov.f32	s15, s13
}
 800077c:	eeb0 0a67 	vmov.f32	s0, s15
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	447a0000 	.word	0x447a0000
 800078c:	447a0000 	.word	0x447a0000

08000790 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2120      	movs	r1, #32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fe5c 	bl	8001460 <SENSOR_IO_Read>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f023 0304 	bic.w	r3, r3, #4
 80007b2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	f023 0303 	bic.w	r3, r3, #3
 80007c2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007d2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	7bfa      	ldrb	r2, [r7, #15]
 80007da:	2120      	movs	r1, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 fe25 	bl	800142c <SENSOR_IO_Write>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b088      	sub	sp, #32
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	b2d8      	uxtb	r0, r3
 80007f8:	f107 0208 	add.w	r2, r7, #8
 80007fc:	2302      	movs	r3, #2
 80007fe:	21b2      	movs	r1, #178	; 0xb2
 8000800:	f000 fe4c 	bl	800149c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2135      	movs	r1, #53	; 0x35
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fe28 	bl	8001460 <SENSOR_IO_Read>
 8000810:	4603      	mov	r3, r0
 8000812:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8000814:	7ffb      	ldrb	r3, [r7, #31]
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b21b      	sxth	r3, r3
 800081a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800081e:	b21a      	sxth	r2, r3
 8000820:	7a3b      	ldrb	r3, [r7, #8]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000828:	7ffb      	ldrb	r3, [r7, #31]
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	b21b      	sxth	r3, r3
 800082e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000832:	b21a      	sxth	r2, r3
 8000834:	7a7b      	ldrb	r3, [r7, #9]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800083c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000840:	10db      	asrs	r3, r3, #3
 8000842:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8000844:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000848:	10db      	asrs	r3, r3, #3
 800084a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	b2d8      	uxtb	r0, r3
 8000850:	f107 0208 	add.w	r2, r7, #8
 8000854:	2304      	movs	r3, #4
 8000856:	21bc      	movs	r1, #188	; 0xbc
 8000858:	f000 fe20 	bl	800149c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800085c:	7a7b      	ldrb	r3, [r7, #9]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	7a3b      	ldrb	r3, [r7, #8]
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7abb      	ldrb	r3, [r7, #10]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8000878:	88fb      	ldrh	r3, [r7, #6]
 800087a:	b2d8      	uxtb	r0, r3
 800087c:	f107 0208 	add.w	r2, r7, #8
 8000880:	2302      	movs	r3, #2
 8000882:	21aa      	movs	r1, #170	; 0xaa
 8000884:	f000 fe0a 	bl	800149c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21a      	sxth	r2, r3
 800088e:	7a3b      	ldrb	r3, [r7, #8]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8000896:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800089a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	ee07 3a90 	vmov	s15, r3
 80008a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80008ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	ee07 3a90 	vmov	s15, r3
 80008b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80008be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80008c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f87b 	bl	8000a00 <LPS22HB_Init>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000920:	f000 fd7a 	bl	8001418 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	210f      	movs	r1, #15
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fd98 	bl	8001460 <SENSOR_IO_Read>
 8000930:	4603      	mov	r3, r0
 8000932:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800094e:	2300      	movs	r3, #0
 8000950:	74fb      	strb	r3, [r7, #19]
 8000952:	e013      	b.n	800097c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	7cfb      	ldrb	r3, [r7, #19]
 800095a:	3328      	adds	r3, #40	; 0x28
 800095c:	b2db      	uxtb	r3, r3
 800095e:	7cfc      	ldrb	r4, [r7, #19]
 8000960:	4619      	mov	r1, r3
 8000962:	4610      	mov	r0, r2
 8000964:	f000 fd7c 	bl	8001460 <SENSOR_IO_Read>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	4423      	add	r3, r4
 8000972:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	3301      	adds	r3, #1
 800097a:	74fb      	strb	r3, [r7, #19]
 800097c:	7cfb      	ldrb	r3, [r7, #19]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d9e8      	bls.n	8000954 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	74fb      	strb	r3, [r7, #19]
 8000986:	e010      	b.n	80009aa <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	f107 0218 	add.w	r2, r7, #24
 800098e:	4413      	add	r3, r2
 8000990:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000994:	461a      	mov	r2, r3
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	3301      	adds	r3, #1
 80009a8:	74fb      	strb	r3, [r7, #19]
 80009aa:	7cfb      	ldrb	r3, [r7, #19]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d9eb      	bls.n	8000988 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80009c0:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2264      	movs	r2, #100	; 0x64
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da01      	bge.n	80009d6 <LPS22HB_P_ReadPressure+0x96>
 80009d2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80009d6:	131b      	asrs	r3, r3, #12
 80009d8:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80009fc <LPS22HB_P_ReadPressure+0xbc>
 80009e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80009ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80009f0:	eeb0 0a67 	vmov.f32	s0, s15
 80009f4:	371c      	adds	r7, #28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	42c80000 	.word	0x42c80000

08000a00 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	211a      	movs	r1, #26
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fd25 	bl	8001460 <SENSOR_IO_Read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	211a      	movs	r1, #26
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fcfa 	bl	800142c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a38:	88fb      	ldrh	r3, [r7, #6]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fd0e 	bl	8001460 <SENSOR_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a4e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000a56:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	f023 0302 	bic.w	r3, r3, #2
 8000a5e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fcdb 	bl	800142c <SENSOR_IO_Write>
}  
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b084      	sub	sp, #16
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	20d4      	movs	r0, #212	; 0xd4
 8000a90:	f000 fce6 	bl	8001460 <SENSOR_IO_Read>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000aa4:	7bba      	ldrb	r2, [r7, #14]
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	20d4      	movs	r0, #212	; 0xd4
 8000ab4:	f000 fcba 	bl	800142c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000ab8:	2112      	movs	r1, #18
 8000aba:	20d4      	movs	r0, #212	; 0xd4
 8000abc:	f000 fcd0 	bl	8001460 <SENSOR_IO_Read>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000acc:	7bbb      	ldrb	r3, [r7, #14]
 8000ace:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000ad2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000ad4:	7bba      	ldrb	r2, [r7, #14]
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2112      	movs	r1, #18
 8000ae2:	20d4      	movs	r0, #212	; 0xd4
 8000ae4:	f000 fca2 	bl	800142c <SENSOR_IO_Write>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000af6:	2300      	movs	r3, #0
 8000af8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000afa:	2110      	movs	r1, #16
 8000afc:	20d4      	movs	r0, #212	; 0xd4
 8000afe:	f000 fcaf 	bl	8001460 <SENSOR_IO_Read>
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	461a      	mov	r2, r3
 8000b12:	2110      	movs	r1, #16
 8000b14:	20d4      	movs	r0, #212	; 0xd4
 8000b16:	f000 fc89 	bl	800142c <SENSOR_IO_Write>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000b26:	f000 fc77 	bl	8001418 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	20d4      	movs	r0, #212	; 0xd4
 8000b2e:	f000 fc97 	bl	8001460 <SENSOR_IO_Read>
 8000b32:	4603      	mov	r3, r0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000b46:	2115      	movs	r1, #21
 8000b48:	20d4      	movs	r0, #212	; 0xd4
 8000b4a:	f000 fc89 	bl	8001460 <SENSOR_IO_Read>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	f023 0310 	bic.w	r3, r3, #16
 8000b58:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2115      	movs	r1, #21
 8000b6e:	20d4      	movs	r0, #212	; 0xd4
 8000b70:	f000 fc5c 	bl	800142c <SENSOR_IO_Write>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000b92:	2110      	movs	r1, #16
 8000b94:	20d4      	movs	r0, #212	; 0xd4
 8000b96:	f000 fc63 	bl	8001460 <SENSOR_IO_Read>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000b9e:	f107 0208 	add.w	r2, r7, #8
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	2128      	movs	r1, #40	; 0x28
 8000ba6:	20d4      	movs	r0, #212	; 0xd4
 8000ba8:	f000 fc78 	bl	800149c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	e01f      	b.n	8000bf2 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000bb2:	7ffb      	ldrb	r3, [r7, #31]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f107 0220 	add.w	r2, r7, #32
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	7ffb      	ldrb	r3, [r7, #31]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	f107 0120 	add.w	r1, r7, #32
 8000bd0:	440b      	add	r3, r1
 8000bd2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	b212      	sxth	r2, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	f107 0120 	add.w	r1, r7, #32
 8000be6:	440b      	add	r3, r1
 8000be8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000bec:	7ffb      	ldrb	r3, [r7, #31]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	77fb      	strb	r3, [r7, #31]
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d9dc      	bls.n	8000bb2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b0c      	cmp	r3, #12
 8000c00:	d828      	bhi.n	8000c54 <LSM6DSL_AccReadXYZ+0xd8>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <LSM6DSL_AccReadXYZ+0x8c>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c3d 	.word	0x08000c3d
 8000c0c:	08000c55 	.word	0x08000c55
 8000c10:	08000c55 	.word	0x08000c55
 8000c14:	08000c55 	.word	0x08000c55
 8000c18:	08000c4f 	.word	0x08000c4f
 8000c1c:	08000c55 	.word	0x08000c55
 8000c20:	08000c55 	.word	0x08000c55
 8000c24:	08000c55 	.word	0x08000c55
 8000c28:	08000c43 	.word	0x08000c43
 8000c2c:	08000c55 	.word	0x08000c55
 8000c30:	08000c55 	.word	0x08000c55
 8000c34:	08000c55 	.word	0x08000c55
 8000c38:	08000c49 	.word	0x08000c49
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <LSM6DSL_AccReadXYZ+0x124>)
 8000c3e:	61bb      	str	r3, [r7, #24]
    break;
 8000c40:	e008      	b.n	8000c54 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <LSM6DSL_AccReadXYZ+0x128>)
 8000c44:	61bb      	str	r3, [r7, #24]
    break;
 8000c46:	e005      	b.n	8000c54 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <LSM6DSL_AccReadXYZ+0x12c>)
 8000c4a:	61bb      	str	r3, [r7, #24]
    break;
 8000c4c:	e002      	b.n	8000c54 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <LSM6DSL_AccReadXYZ+0x130>)
 8000c50:	61bb      	str	r3, [r7, #24]
    break;    
 8000c52:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	77fb      	strb	r3, [r7, #31]
 8000c58:	e01b      	b.n	8000c92 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000c5a:	7ffb      	ldrb	r3, [r7, #31]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	f107 0220 	add.w	r2, r7, #32
 8000c62:	4413      	add	r3, r2
 8000c64:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	7ffb      	ldrb	r3, [r7, #31]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c84:	ee17 2a90 	vmov	r2, s15
 8000c88:	b212      	sxth	r2, r2
 8000c8a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000c8c:	7ffb      	ldrb	r3, [r7, #31]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	77fb      	strb	r3, [r7, #31]
 8000c92:	7ffb      	ldrb	r3, [r7, #31]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d9e0      	bls.n	8000c5a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	3d79db23 	.word	0x3d79db23
 8000ca4:	3df9db23 	.word	0x3df9db23
 8000ca8:	3e79db23 	.word	0x3e79db23
 8000cac:	3ef9db23 	.word	0x3ef9db23

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b096      	sub	sp, #88	; 0x58
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fed2 	bl	8001a5e <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_HSENSOR_Init();
 8000cba:	f000 fc63 	bl	8001584 <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000cbe:	f000 fcbd 	bl	800163c <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 8000cc2:	f000 fc09 	bl	80014d8 <BSP_ACCELERO_Init>
  BSP_PSENSOR_Init();
 8000cc6:	f000 fc8b 	bl	80015e0 <BSP_PSENSOR_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f84d 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f951 	bl	8000f74 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000cd2:	f000 f8c3 	bl	8000e5c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000cd6:	f000 f901 	bl	8000edc <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of checkButton */
  osThreadDef(checkButton, StartDefaultTask, osPriorityNormal, 0, 128);
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0xa0>)
 8000cdc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkButtonHandle = osThreadCreate(osThread(checkButton), NULL);
 8000cee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fe4c 	bl	8005992 <osThreadCreate>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <main+0xa4>)
 8000cfe:	601a      	str	r2, [r3, #0]

  /* definition and creation of transmitData */
  osThreadDef(transmitData, StartTask02, osPriorityIdle, 0, 128);
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <main+0xa8>)
 8000d02:	f107 0420 	add.w	r4, r7, #32
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDataHandle = osThreadCreate(osThread(transmitData), NULL);
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 fe39 	bl	8005992 <osThreadCreate>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <main+0xac>)
 8000d24:	601a      	str	r2, [r3, #0]

  /* definition and creation of readSensorData */
  osThreadDef(readSensorData, StartTask03, osPriorityIdle, 0, 128);
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <main+0xb0>)
 8000d28:	1d3c      	adds	r4, r7, #4
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorDataHandle = osThreadCreate(osThread(readSensorData), NULL);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f004 fe28 	bl	8005992 <osThreadCreate>
 8000d42:	4602      	mov	r2, r0
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <main+0xb4>)
 8000d46:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d48:	f004 fe1c 	bl	8005984 <osKernelStart>
  tValue = BSP_TSENSOR_ReadTemp();
  psensor = BSP_PSENSOR_ReadPressure();
  BSP_ACCELERO_AccGetXYZ(accelero);
#endif

  while (1){
 8000d4c:	e7fe      	b.n	8000d4c <main+0x9c>
 8000d4e:	bf00      	nop
 8000d50:	08007628 	.word	0x08007628
 8000d54:	200012e0 	.word	0x200012e0
 8000d58:	08007654 	.word	0x08007654
 8000d5c:	200012dc 	.word	0x200012dc
 8000d60:	08007680 	.word	0x08007680
 8000d64:	20001358 	.word	0x20001358

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0bc      	sub	sp, #240	; 0xf0
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d72:	2244      	movs	r2, #68	; 0x44
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f006 f83f 	bl	8006dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2294      	movs	r2, #148	; 0x94
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f006 f831 	bl	8006dfa <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d9c:	f002 f812 	bl	8002dc4 <HAL_PWREx_ControlVoltageScaling>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000da6:	f000 fa43 	bl	8001230 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000daa:	2310      	movs	r3, #16
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000dd4:	2328      	movs	r3, #40	; 0x28
 8000dd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 f88b 	bl	8002f0c <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dfc:	f000 fa18 	bl	8001230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e1e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e22:	2103      	movs	r1, #3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fc97 	bl	8003758 <HAL_RCC_ClockConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e30:	f000 f9fe 	bl	8001230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000e34:	2381      	movs	r3, #129	; 0x81
 8000e36:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 ff6a 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e4e:	f000 f9ef 	bl	8001230 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	37f0      	adds	r7, #240	; 0xf0
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_I2C2_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e98:	f001 f9d3 	bl	8002242 <HAL_I2C_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ea2:	f000 f9c5 	bl	8001230 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000eaa:	f001 fed3 	bl	8002c54 <HAL_I2CEx_ConfigAnalogFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 f9bc 	bl	8001230 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000ebc:	f001 ff15 	bl	8002cea <HAL_I2CEx_ConfigDigitalFilter>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f9b3 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200010c8 	.word	0x200010c8
 8000ed4:	40005800 	.word	0x40005800
 8000ed8:	10909cec 	.word	0x10909cec

08000edc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee0:	4b22      	ldr	r3, [pc, #136]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <MX_USART1_UART_Init+0x94>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f24:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f26:	f003 fed3 	bl	8004cd0 <HAL_UART_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 f97e 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f38:	f004 fc27 	bl	800578a <HAL_UARTEx_SetTxFifoThreshold>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f42:	f000 f975 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4808      	ldr	r0, [pc, #32]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f4a:	f004 fc5c 	bl	8005806 <HAL_UARTEx_SetRxFifoThreshold>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 f96c 	bl	8001230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <MX_USART1_UART_Init+0x90>)
 8000f5a:	f004 fbdd 	bl	8005718 <HAL_UARTEx_DisableFifoMode>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 f964 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20001250 	.word	0x20001250
 8000f70:	40013800 	.word	0x40013800

08000f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_GPIO_Init+0xa4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <MX_GPIO_Init+0xa8>)
 8000fc2:	f001 f903 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_GPIO_Init+0xac>)
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4812      	ldr	r0, [pc, #72]	; (8001024 <MX_GPIO_Init+0xb0>)
 8000fdc:	f000 fe5a 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <MX_GPIO_Init+0xa8>)
 8000ffa:	f000 fe4b 	bl	8001c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2028      	movs	r0, #40	; 0x28
 8001004:	f000 fe1c 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f000 fe35 	bl	8001c78 <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400
 8001020:	10110000 	.word	0x10110000
 8001024:	48000800 	.word	0x48000800

08001028 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001030:	f242 7010 	movw	r0, #10000	; 0x2710
 8001034:	f004 fcf9 	bl	8005a2a <osDelay>
    //Check if button pressed and increment state
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <StartDefaultTask+0x3c>)
 800103e:	f001 f8ad 	bl	800219c <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f3      	bne.n	8001030 <StartDefaultTask+0x8>
    	state = (state+1)%4;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <StartDefaultTask+0x40>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	425a      	negs	r2, r3
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	bf58      	it	pl
 800105a:	4253      	negpl	r3, r2
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b02      	ldr	r3, [pc, #8]	; (8001068 <StartDefaultTask+0x40>)
 8001060:	701a      	strb	r2, [r3, #0]
    osDelay(10000);
 8001062:	e7e5      	b.n	8001030 <StartDefaultTask+0x8>
 8001064:	48000800 	.word	0x48000800
 8001068:	20000340 	.word	0x20000340

0800106c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;)
	{
		osDelay(2500);
 8001074:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001078:	f004 fcd7 	bl	8005a2a <osDelay>
		if(state == 0){
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <StartTask02+0x68>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d107      	bne.n	8001094 <StartTask02+0x28>
			hValue = BSP_HSENSOR_ReadHumidity();
 8001084:	f000 fa9e 	bl	80015c4 <BSP_HSENSOR_ReadHumidity>
 8001088:	eef0 7a40 	vmov.f32	s15, s0
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <StartTask02+0x6c>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
 8001092:	e7ef      	b.n	8001074 <StartTask02+0x8>
		}
		else if(state == 1){
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <StartTask02+0x68>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <StartTask02+0x40>
			tValue = BSP_TSENSOR_ReadTemp();
 800109c:	f000 faea 	bl	8001674 <BSP_TSENSOR_ReadTemp>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <StartTask02+0x70>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
 80010aa:	e7e3      	b.n	8001074 <StartTask02+0x8>

		}
		else if(state == 2){
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <StartTask02+0x68>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d103      	bne.n	80010bc <StartTask02+0x50>
			BSP_ACCELERO_AccGetXYZ(accelero);
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <StartTask02+0x74>)
 80010b6:	f000 fa4d 	bl	8001554 <BSP_ACCELERO_AccGetXYZ>
 80010ba:	e7db      	b.n	8001074 <StartTask02+0x8>

		}
		else if(state == 3){
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <StartTask02+0x68>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d1d7      	bne.n	8001074 <StartTask02+0x8>
			psensor = BSP_PSENSOR_ReadPressure();
 80010c4:	f000 faac 	bl	8001620 <BSP_PSENSOR_ReadPressure>
 80010c8:	eef0 7a40 	vmov.f32	s15, s0
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <StartTask02+0x78>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]
		osDelay(2500);
 80010d2:	e7cf      	b.n	8001074 <StartTask02+0x8>
 80010d4:	20000340 	.word	0x20000340
 80010d8:	20001348 	.word	0x20001348
 80010dc:	20001240 	.word	0x20001240
 80010e0:	20001350 	.word	0x20001350
 80010e4:	2000134c 	.word	0x2000134c

080010e8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2500);
 80010f0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80010f4:	f004 fc99 	bl	8005a2a <osDelay>
	if(state%4 == 0){
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <StartTask03+0xec>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d112      	bne.n	800112c <StartTask03+0x44>
		sprintf(hSensor_buffer, "\n Humidity Value: %d\n", (int)hValue);
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <StartTask03+0xf0>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 2a90 	vmov	r2, s15
 8001114:	4931      	ldr	r1, [pc, #196]	; (80011dc <StartTask03+0xf4>)
 8001116:	4832      	ldr	r0, [pc, #200]	; (80011e0 <StartTask03+0xf8>)
 8001118:	f005 fe78 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)hSensor_buffer, 25, 10000);
 800111c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001120:	2219      	movs	r2, #25
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <StartTask03+0xf8>)
 8001124:	482f      	ldr	r0, [pc, #188]	; (80011e4 <StartTask03+0xfc>)
 8001126:	f003 fe23 	bl	8004d70 <HAL_UART_Transmit>
 800112a:	e7e1      	b.n	80010f0 <StartTask03+0x8>
	}
	else if(state%4 == 1){
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <StartTask03+0xec>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d112      	bne.n	8001160 <StartTask03+0x78>
		sprintf(tSensor_buffer, "\n Temperature Value: %d\n", (int)tValue);
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <StartTask03+0x100>)
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001144:	ee17 2a90 	vmov	r2, s15
 8001148:	4928      	ldr	r1, [pc, #160]	; (80011ec <StartTask03+0x104>)
 800114a:	4829      	ldr	r0, [pc, #164]	; (80011f0 <StartTask03+0x108>)
 800114c:	f005 fe5e 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tSensor_buffer, 25, 10000);
 8001150:	f242 7310 	movw	r3, #10000	; 0x2710
 8001154:	2219      	movs	r2, #25
 8001156:	4926      	ldr	r1, [pc, #152]	; (80011f0 <StartTask03+0x108>)
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <StartTask03+0xfc>)
 800115a:	f003 fe09 	bl	8004d70 <HAL_UART_Transmit>
 800115e:	e7c7      	b.n	80010f0 <StartTask03+0x8>
	}
	else if(state%4 == 2){
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <StartTask03+0xec>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d118      	bne.n	80011a0 <StartTask03+0xb8>
		sprintf(accelero_buffer, "\n Accelerometer Values: \n X: %d Y: %d Z: %d\n", accelero[0], accelero[1], accelero[2]);
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <StartTask03+0x10c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	461a      	mov	r2, r3
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <StartTask03+0x10c>)
 8001178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117c:	4619      	mov	r1, r3
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <StartTask03+0x10c>)
 8001180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	460b      	mov	r3, r1
 8001188:	491b      	ldr	r1, [pc, #108]	; (80011f8 <StartTask03+0x110>)
 800118a:	481c      	ldr	r0, [pc, #112]	; (80011fc <StartTask03+0x114>)
 800118c:	f005 fe3e 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)accelero_buffer, 50, 10000);
 8001190:	f242 7310 	movw	r3, #10000	; 0x2710
 8001194:	2232      	movs	r2, #50	; 0x32
 8001196:	4919      	ldr	r1, [pc, #100]	; (80011fc <StartTask03+0x114>)
 8001198:	4812      	ldr	r0, [pc, #72]	; (80011e4 <StartTask03+0xfc>)
 800119a:	f003 fde9 	bl	8004d70 <HAL_UART_Transmit>
 800119e:	e7a7      	b.n	80010f0 <StartTask03+0x8>
	}
	else if(state%4 == 3){
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <StartTask03+0xec>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d1a0      	bne.n	80010f0 <StartTask03+0x8>
		sprintf(pressure_buff, "\n Pressure Value: %d\n", (int)psensor);
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <StartTask03+0x118>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 2a90 	vmov	r2, s15
 80011bc:	4911      	ldr	r1, [pc, #68]	; (8001204 <StartTask03+0x11c>)
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <StartTask03+0x120>)
 80011c0:	f005 fe24 	bl	8006e0c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pressure_buff, 25, 10000);
 80011c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80011c8:	2219      	movs	r2, #25
 80011ca:	490f      	ldr	r1, [pc, #60]	; (8001208 <StartTask03+0x120>)
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <StartTask03+0xfc>)
 80011ce:	f003 fdcf 	bl	8004d70 <HAL_UART_Transmit>
    osDelay(2500);
 80011d2:	e78d      	b.n	80010f0 <StartTask03+0x8>
 80011d4:	20000340 	.word	0x20000340
 80011d8:	20001348 	.word	0x20001348
 80011dc:	0800769c 	.word	0x0800769c
 80011e0:	20001178 	.word	0x20001178
 80011e4:	20001250 	.word	0x20001250
 80011e8:	20001240 	.word	0x20001240
 80011ec:	080076b4 	.word	0x080076b4
 80011f0:	200011dc 	.word	0x200011dc
 80011f4:	20001350 	.word	0x20001350
 80011f8:	080076d0 	.word	0x080076d0
 80011fc:	20001114 	.word	0x20001114
 8001200:	2000134c 	.word	0x2000134c
 8001204:	08007700 	.word	0x08007700
 8001208:	200012e4 	.word	0x200012e4

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800121e:	f000 fc37 	bl	8001a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40001000 	.word	0x40001000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001236:	e7fe      	b.n	8001236 <Error_Handler+0x6>

08001238 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <I2Cx_MspInit+0xa8>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	4a26      	ldr	r2, [pc, #152]	; (80012e0 <I2Cx_MspInit+0xa8>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <I2Cx_MspInit+0xa8>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001258:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800125c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001262:	2301      	movs	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800126a:	2304      	movs	r3, #4
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	481b      	ldr	r0, [pc, #108]	; (80012e4 <I2Cx_MspInit+0xac>)
 8001276:	f000 fd0d 	bl	8001c94 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4818      	ldr	r0, [pc, #96]	; (80012e4 <I2Cx_MspInit+0xac>)
 8001282:	f000 fd07 	bl	8001c94 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <I2Cx_MspInit+0xa8>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <I2Cx_MspInit+0xa8>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <I2Cx_MspInit+0xa8>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <I2Cx_MspInit+0xa8>)
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <I2Cx_MspInit+0xa8>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <I2Cx_MspInit+0xa8>)
 80012ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ae:	4a0c      	ldr	r2, [pc, #48]	; (80012e0 <I2Cx_MspInit+0xa8>)
 80012b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	210f      	movs	r1, #15
 80012ba:	2021      	movs	r0, #33	; 0x21
 80012bc:	f000 fcc0 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80012c0:	2021      	movs	r0, #33	; 0x21
 80012c2:	f000 fcd9 	bl	8001c78 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	210f      	movs	r1, #15
 80012ca:	2022      	movs	r0, #34	; 0x22
 80012cc:	f000 fcb8 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80012d0:	2022      	movs	r0, #34	; 0x22
 80012d2:	f000 fcd1 	bl	8001c78 <HAL_NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	48000400 	.word	0x48000400

080012e8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <I2Cx_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <I2Cx_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff89 	bl	8001238 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 ff8b 	bl	8002242 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800132c:	2100      	movs	r1, #0
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f001 fc90 	bl	8002c54 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005800 	.word	0x40005800
 8001340:	00702681 	.word	0x00702681

08001344 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af04      	add	r7, sp, #16
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	72fb      	strb	r3, [r7, #11]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	b299      	uxth	r1, r3
 8001366:	88f8      	ldrh	r0, [r7, #6]
 8001368:	893a      	ldrh	r2, [r7, #8]
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4603      	mov	r3, r0
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f934 	bl	80025e8 <HAL_I2C_Mem_Read>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	4619      	mov	r1, r3
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f832 	bl	80013f8 <I2Cx_Error>
  }
  return status;
 8001394:	7dfb      	ldrb	r3, [r7, #23]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b08a      	sub	sp, #40	; 0x28
 80013a2:	af04      	add	r7, sp, #16
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	4608      	mov	r0, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	72fb      	strb	r3, [r7, #11]
 80013b0:	460b      	mov	r3, r1
 80013b2:	813b      	strh	r3, [r7, #8]
 80013b4:	4613      	mov	r3, r2
 80013b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	b299      	uxth	r1, r3
 80013c0:	88f8      	ldrh	r0, [r7, #6]
 80013c2:	893a      	ldrh	r2, [r7, #8]
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	4603      	mov	r3, r0
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fff3 	bl	80023c0 <HAL_I2C_Mem_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	4619      	mov	r1, r3
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f805 	bl	80013f8 <I2Cx_Error>
  }
  return status;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 ffab 	bl	8002360 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff6c 	bl	80012e8 <I2Cx_Init>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <SENSOR_IO_Init+0x10>)
 800141e:	f7ff ff63 	bl	80012e8 <I2Cx_Init>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200013e8 	.word	0x200013e8

0800142c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	460b      	mov	r3, r1
 8001438:	71bb      	strb	r3, [r7, #6]
 800143a:	4613      	mov	r3, r2
 800143c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	b29a      	uxth	r2, r3
 8001442:	79f9      	ldrb	r1, [r7, #7]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	1d7b      	adds	r3, r7, #5
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <SENSOR_IO_Write+0x30>)
 8001450:	f7ff ffa5 	bl	800139e <I2Cx_WriteMultiple>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200013e8 	.word	0x200013e8

08001460 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	71fb      	strb	r3, [r7, #7]
 800146c:	4613      	mov	r3, r2
 800146e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	b29a      	uxth	r2, r3
 8001478:	79f9      	ldrb	r1, [r7, #7]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 030f 	add.w	r3, r7, #15
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <SENSOR_IO_Read+0x38>)
 8001488:	f7ff ff5c 	bl	8001344 <I2Cx_ReadMultiple>

  return read_value;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200013e8 	.word	0x200013e8

0800149c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af02      	add	r7, sp, #8
 80014a2:	603a      	str	r2, [r7, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
 80014aa:	460b      	mov	r3, r1
 80014ac:	71bb      	strb	r3, [r7, #6]
 80014ae:	4613      	mov	r3, r2
 80014b0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	79f9      	ldrb	r1, [r7, #7]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <SENSOR_IO_ReadMultiple+0x38>)
 80014c4:	f7ff ff3e 	bl	8001344 <I2Cx_ReadMultiple>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200013e8 	.word	0x200013e8

080014d8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80014e2:	2300      	movs	r3, #0
 80014e4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <BSP_ACCELERO_Init+0x74>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b6a      	cmp	r3, #106	; 0x6a
 80014f0:	d002      	beq.n	80014f8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e024      	b.n	8001542 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <BSP_ACCELERO_Init+0x78>)
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <BSP_ACCELERO_Init+0x74>)
 80014fc:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80014fe:	2330      	movs	r3, #48	; 0x30
 8001500:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001506:	2300      	movs	r3, #0
 8001508:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001516:	797a      	ldrb	r2, [r7, #5]
 8001518:	7abb      	ldrb	r3, [r7, #10]
 800151a:	4313      	orrs	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001520:	7a3b      	ldrb	r3, [r7, #8]
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	b2db      	uxtb	r3, r3
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	b21b      	sxth	r3, r3
 8001534:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <BSP_ACCELERO_Init+0x78>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	89ba      	ldrh	r2, [r7, #12]
 800153e:	4610      	mov	r0, r2
 8001540:	4798      	blx	r3
  }  

  return ret;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000028 	.word	0x20000028
 8001550:	20000344 	.word	0x20000344

08001554 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
    }
  }
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000344 	.word	0x20000344

08001584 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <BSP_HSENSOR_Init+0x38>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	20be      	movs	r0, #190	; 0xbe
 8001590:	4798      	blx	r3
 8001592:	4603      	mov	r3, r0
 8001594:	2bbc      	cmp	r3, #188	; 0xbc
 8001596:	d002      	beq.n	800159e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	e009      	b.n	80015b2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <BSP_HSENSOR_Init+0x3c>)
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <BSP_HSENSOR_Init+0x38>)
 80015a2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <BSP_HSENSOR_Init+0x3c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	20be      	movs	r0, #190	; 0xbe
 80015ac:	4798      	blx	r3
    ret = HSENSOR_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000348 	.word	0x20000348

080015c4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <BSP_HSENSOR_ReadHumidity+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	20be      	movs	r0, #190	; 0xbe
 80015d0:	4798      	blx	r3
 80015d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000348 	.word	0x20000348

080015e0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <BSP_PSENSOR_Init+0x38>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	20ba      	movs	r0, #186	; 0xba
 80015ec:	4798      	blx	r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	2bb1      	cmp	r3, #177	; 0xb1
 80015f2:	d002      	beq.n	80015fa <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e009      	b.n	800160e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <BSP_PSENSOR_Init+0x3c>)
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <BSP_PSENSOR_Init+0x38>)
 80015fe:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <BSP_PSENSOR_Init+0x3c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	20ba      	movs	r0, #186	; 0xba
 8001608:	4798      	blx	r3
    ret = PSENSOR_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000001c 	.word	0x2000001c
 800161c:	2000034c 	.word	0x2000034c

08001620 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <BSP_PSENSOR_ReadPressure+0x18>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	20ba      	movs	r0, #186	; 0xba
 800162c:	4798      	blx	r3
 800162e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	bd80      	pop	{r7, pc}
 8001638:	2000034c 	.word	0x2000034c

0800163c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <BSP_TSENSOR_Init+0x30>)
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <BSP_TSENSOR_Init+0x34>)
 800164a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800164c:	f7ff fee4 	bl	8001418 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <BSP_TSENSOR_Init+0x30>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2100      	movs	r1, #0
 8001658:	20be      	movs	r0, #190	; 0xbe
 800165a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001660:	79fb      	ldrb	r3, [r7, #7]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000350 	.word	0x20000350
 8001670:	2000000c 	.word	0x2000000c

08001674 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <BSP_TSENSOR_ReadTemp+0x18>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	20be      	movs	r0, #190	; 0xbe
 8001680:	4798      	blx	r3
 8001682:	eef0 7a40 	vmov.f32	s15, s0
}
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000350 	.word	0x20000350

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_MspInit+0x4c>)
 8001698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6613      	str	r3, [r2, #96]	; 0x60
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x4c>)
 80016a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_MspInit+0x4c>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	f06f 0001 	mvn.w	r0, #1
 80016ce:	f000 fab7 	bl	8001c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_I2C_MspInit+0x7c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d128      	bne.n	8001754 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_I2C_MspInit+0x80>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <HAL_I2C_MspInit+0x80>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_I2C_MspInit+0x80>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800172c:	2304      	movs	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_I2C_MspInit+0x84>)
 8001738:	f000 faac 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_I2C_MspInit+0x80>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_I2C_MspInit+0x80>)
 8001742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_I2C_MspInit+0x80>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005800 	.word	0x40005800
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400

08001768 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_I2C_MspDeInit+0x3c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d10f      	bne.n	800179a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_I2C_MspDeInit+0x40>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_I2C_MspDeInit+0x40>)
 8001780:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001784:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178a:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_I2C_MspDeInit+0x44>)
 800178c:	f000 fc14 	bl	8001fb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <HAL_I2C_MspDeInit+0x44>)
 8001796:	f000 fc0f 	bl	8001fb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40005800 	.word	0x40005800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000400 	.word	0x48000400

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_UART_MspInit+0x7c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d127      	bne.n	8001822 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0x84>)
 800181e:	f000 fa39 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40013800 	.word	0x40013800
 8001830:	40021000 	.word	0x40021000
 8001834:	48000400 	.word	0x48000400

08001838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08c      	sub	sp, #48	; 0x30
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	2036      	movs	r0, #54	; 0x36
 800184e:	f000 f9f7 	bl	8001c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001852:	2036      	movs	r0, #54	; 0x36
 8001854:	f000 fa10 	bl	8001c78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_InitTick+0x9c>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_InitTick+0x9c>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6593      	str	r3, [r2, #88]	; 0x58
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_InitTick+0x9c>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001870:	f107 0210 	add.w	r2, r7, #16
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f002 f95a 	bl	8003b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001880:	f002 f92c 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8001884:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <HAL_InitTick+0xa0>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0c9b      	lsrs	r3, r3, #18
 8001890:	3b01      	subs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_InitTick+0xa4>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_InitTick+0xa8>)
 8001898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_InitTick+0xa4>)
 800189c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_InitTick+0xa4>)
 80018a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_InitTick+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_InitTick+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_InitTick+0xa4>)
 80018b6:	f002 ff39 	bl	800472c <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HAL_InitTick+0xa4>)
 80018c2:	f002 ff95 	bl	80047f0 <HAL_TIM_Base_Start_IT>
 80018c6:	4603      	mov	r3, r0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3730      	adds	r7, #48	; 0x30
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	431bde83 	.word	0x431bde83
 80018dc:	20001434 	.word	0x20001434
 80018e0:	40001000 	.word	0x40001000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001914:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001918:	f000 fc70 	bl	80021fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM6_DAC_IRQHandler+0x10>)
 8001926:	f002 ffd3 	bl	80048d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001434 	.word	0x20001434

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f005 fa14 	bl	8006d90 <__errno>
 8001968:	4602      	mov	r2, r0
 800196a:	230c      	movs	r3, #12
 800196c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200a0000 	.word	0x200a0000
 8001994:	00000400 	.word	0x00000400
 8001998:	20000354 	.word	0x20000354
 800199c:	20001488 	.word	0x20001488

080019a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <SystemInit+0x64>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <SystemInit+0x64>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <SystemInit+0x68>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <SystemInit+0x68>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <SystemInit+0x68>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <SystemInit+0x68>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <SystemInit+0x68>)
 80019cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <SystemInit+0x68>)
 80019d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <SystemInit+0x68>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <SystemInit+0x68>)
 80019e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <SystemInit+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SystemInit+0x64>)
 80019f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019f6:	609a      	str	r2, [r3, #8]
#endif
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	40021000 	.word	0x40021000

08001a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a10:	f7ff ffc6 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a16:	e003      	b.n	8001a20 <LoopCopyDataInit>

08001a18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a1e:	3104      	adds	r1, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a20:	480a      	ldr	r0, [pc, #40]	; (8001a4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a28:	d3f6      	bcc.n	8001a18 <CopyDataInit>
	ldr	r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a2c:	e002      	b.n	8001a34 <LoopFillZerobss>

08001a2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a30:	f842 3b04 	str.w	r3, [r2], #4

08001a34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LoopForever+0x16>)
	cmp	r2, r3
 8001a36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a38:	d3f9      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f005 f9af 	bl	8006d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3e:	f7ff f937 	bl	8000cb0 <main>

08001a42 <LoopForever>:

LoopForever:
    b LoopForever
 8001a42:	e7fe      	b.n	8001a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001a48:	080077d4 	.word	0x080077d4
	ldr	r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a50:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 8001a54:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 8001a58:	20001488 	.word	0x20001488

08001a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_IRQHandler>

08001a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f000 f8de 	bl	8001c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fee2 	bl	8001838 <HAL_InitTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a80:	f7ff fe06 	bl	8001690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000064 	.word	0x20000064
 8001ab4:	20001480 	.word	0x20001480

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20001480 	.word	0x20001480

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff4c 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c52:	f7ff ff61 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6978      	ldr	r0, [r7, #20]
 8001c5e:	f7ff ffb1 	bl	8001bc4 <NVIC_EncodePriority>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <__NVIC_SetPriority>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff54 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e166      	b.n	8001f72 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8158 	beq.w	8001f6c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d00b      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd0:	2b11      	cmp	r3, #17
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0xea>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d123      	bne.n	8001dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b2 	beq.w	8001f6c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	4a60      	ldr	r2, [pc, #384]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6613      	str	r3, [r2, #96]	; 0x60
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e20:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4a:	d02b      	beq.n	8001ea4 <HAL_GPIO_Init+0x210>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d025      	beq.n	8001ea0 <HAL_GPIO_Init+0x20c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d01f      	beq.n	8001e9c <HAL_GPIO_Init+0x208>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d019      	beq.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4f      	ldr	r2, [pc, #316]	; (8001fa4 <HAL_GPIO_Init+0x310>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_GPIO_Init+0x200>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4e      	ldr	r2, [pc, #312]	; (8001fa8 <HAL_GPIO_Init+0x314>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00d      	beq.n	8001e90 <HAL_GPIO_Init+0x1fc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4d      	ldr	r2, [pc, #308]	; (8001fac <HAL_GPIO_Init+0x318>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d007      	beq.n	8001e8c <HAL_GPIO_Init+0x1f8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4c      	ldr	r2, [pc, #304]	; (8001fb0 <HAL_GPIO_Init+0x31c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_GPIO_Init+0x1f4>
 8001e84:	2307      	movs	r3, #7
 8001e86:	e00e      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e88:	2308      	movs	r3, #8
 8001e8a:	e00c      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	e00a      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e90:	2305      	movs	r3, #5
 8001e92:	e008      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb6:	4937      	ldr	r1, [pc, #220]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee8:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f ae91 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	48000400 	.word	0x48000400
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	48000c00 	.word	0x48000c00
 8001fa4:	48001000 	.word	0x48001000
 8001fa8:	48001400 	.word	0x48001400
 8001fac:	48001800 	.word	0x48001800
 8001fb0:	48001c00 	.word	0x48001c00
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fc6:	e0c9      	b.n	800215c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80bc 	beq.w	8002156 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <HAL_GPIO_DeInit+0x1c0>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002006:	d02b      	beq.n	8002060 <HAL_GPIO_DeInit+0xa8>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a5c      	ldr	r2, [pc, #368]	; (800217c <HAL_GPIO_DeInit+0x1c4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d025      	beq.n	800205c <HAL_GPIO_DeInit+0xa4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_GPIO_DeInit+0x1c8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_DeInit+0xa0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <HAL_GPIO_DeInit+0x1cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_GPIO_DeInit+0x9c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a59      	ldr	r2, [pc, #356]	; (8002188 <HAL_GPIO_DeInit+0x1d0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_DeInit+0x98>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_GPIO_DeInit+0x1d4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_DeInit+0x94>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_GPIO_DeInit+0x1d8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_DeInit+0x90>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_GPIO_DeInit+0x1dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_DeInit+0x8c>
 8002040:	2307      	movs	r3, #7
 8002042:	e00e      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002044:	2308      	movs	r3, #8
 8002046:	e00c      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002048:	2306      	movs	r3, #6
 800204a:	e00a      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 800204c:	2305      	movs	r3, #5
 800204e:	e008      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002050:	2304      	movs	r3, #4
 8002052:	e006      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002054:	2303      	movs	r3, #3
 8002056:	e004      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002058:	2302      	movs	r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_GPIO_DeInit+0xaa>
 8002060:	2300      	movs	r3, #0
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	429a      	cmp	r2, r3
 8002070:	d132      	bne.n	80020d8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002072:	4b49      	ldr	r3, [pc, #292]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	43db      	mvns	r3, r3
 800207a:	4947      	ldr	r1, [pc, #284]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 800207c:	4013      	ands	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	4943      	ldr	r1, [pc, #268]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 800208a:	4013      	ands	r3, r2
 800208c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800208e:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	4940      	ldr	r1, [pc, #256]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 8002098:	4013      	ands	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	493c      	ldr	r1, [pc, #240]	; (8002198 <HAL_GPIO_DeInit+0x1e0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020ba:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <HAL_GPIO_DeInit+0x1c0>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43da      	mvns	r2, r3
 80020ca:	482b      	ldr	r0, [pc, #172]	; (8002178 <HAL_GPIO_DeInit+0x1c0>)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	400a      	ands	r2, r1
 80020d2:	3302      	adds	r3, #2
 80020d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2103      	movs	r1, #3
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	08d2      	lsrs	r2, r2, #3
 800210c:	4019      	ands	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2103      	movs	r1, #3
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2103      	movs	r1, #3
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f af2f 	bne.w	8001fc8 <HAL_GPIO_DeInit+0x10>
  }
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40010000 	.word	0x40010000
 800217c:	48000400 	.word	0x48000400
 8002180:	48000800 	.word	0x48000800
 8002184:	48000c00 	.word	0x48000c00
 8002188:	48001000 	.word	0x48001000
 800218c:	48001400 	.word	0x48001400
 8002190:	48001800 	.word	0x48001800
 8002194:	48001c00 	.word	0x48001c00
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f806 	bl	800222c <HAL_GPIO_EXTI_Callback>
  }
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e081      	b.n	8002358 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fa39 	bl	80016e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2224      	movs	r2, #36	; 0x24
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002292:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d107      	bne.n	80022bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	e006      	b.n	80022ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d104      	bne.n	80022dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	ea42 0103 	orr.w	r1, r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69d9      	ldr	r1, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1a      	ldr	r2, [r3, #32]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e021      	b.n	80023b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2224      	movs	r2, #36	; 0x24
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff f9ec 	bl	8001768 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	817b      	strh	r3, [r7, #10]
 80023d2:	460b      	mov	r3, r1
 80023d4:	813b      	strh	r3, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	f040 80f9 	bne.w	80025da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x34>
 80023ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0ed      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_I2C_Mem_Write+0x4e>
 800240a:	2302      	movs	r3, #2
 800240c:	e0e6      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002416:	f7ff fb4f 	bl	8001ab8 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2319      	movs	r3, #25
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fac3 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d1      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2221      	movs	r2, #33	; 0x21
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2240      	movs	r2, #64	; 0x40
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002460:	88f8      	ldrh	r0, [r7, #6]
 8002462:	893a      	ldrh	r2, [r7, #8]
 8002464:	8979      	ldrh	r1, [r7, #10]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4603      	mov	r3, r0
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f9d3 	bl	800281c <I2C_RequestMemoryWrite>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0a9      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d90e      	bls.n	80024b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	b2da      	uxtb	r2, r3
 800249e:	8979      	ldrh	r1, [r7, #10]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fba5 	bl	8002bf8 <I2C_TransferConfig>
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	8979      	ldrh	r1, [r7, #10]
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fb94 	bl	8002bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 faad 	bl	8002a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e07b      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d034      	beq.n	8002588 <HAL_I2C_Mem_Write+0x1c8>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	2b00      	cmp	r3, #0
 8002524:	d130      	bne.n	8002588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	2200      	movs	r2, #0
 800252e:	2180      	movs	r1, #128	; 0x80
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fa3f 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e04d      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2bff      	cmp	r3, #255	; 0xff
 8002548:	d90e      	bls.n	8002568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	22ff      	movs	r2, #255	; 0xff
 800254e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	b2da      	uxtb	r2, r3
 8002556:	8979      	ldrh	r1, [r7, #10]
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fb49 	bl	8002bf8 <I2C_TransferConfig>
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002576:	b2da      	uxtb	r2, r3
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fb38 	bl	8002bf8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d19e      	bne.n	80024d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa8c 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e01a      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2220      	movs	r2, #32
 80025ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_I2C_Mem_Write+0x224>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	fe00e800 	.word	0xfe00e800

080025e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	817b      	strh	r3, [r7, #10]
 80025fa:	460b      	mov	r3, r1
 80025fc:	813b      	strh	r3, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	f040 80fd 	bne.w	800280a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_I2C_Mem_Read+0x34>
 8002616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0f1      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Mem_Read+0x4e>
 8002632:	2302      	movs	r3, #2
 8002634:	e0ea      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800263e:	f7ff fa3b 	bl	8001ab8 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f9af 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0d5      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2222      	movs	r2, #34	; 0x22
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2240      	movs	r2, #64	; 0x40
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002688:	88f8      	ldrh	r0, [r7, #6]
 800268a:	893a      	ldrh	r2, [r7, #8]
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4603      	mov	r3, r0
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f913 	bl	80028c4 <I2C_RequestMemoryRead>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ad      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2bff      	cmp	r3, #255	; 0xff
 80026b8:	d90e      	bls.n	80026d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	22ff      	movs	r2, #255	; 0xff
 80026be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	8979      	ldrh	r1, [r7, #10]
 80026c8:	4b52      	ldr	r3, [pc, #328]	; (8002814 <HAL_I2C_Mem_Read+0x22c>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fa91 	bl	8002bf8 <I2C_TransferConfig>
 80026d6:	e00f      	b.n	80026f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <HAL_I2C_Mem_Read+0x22c>)
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa80 	bl	8002bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	2200      	movs	r2, #0
 8002700:	2104      	movs	r1, #4
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f956 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07c      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d034      	beq.n	80027b8 <HAL_I2C_Mem_Read+0x1d0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d130      	bne.n	80027b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f927 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e04d      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2bff      	cmp	r3, #255	; 0xff
 8002778:	d90e      	bls.n	8002798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	22ff      	movs	r2, #255	; 0xff
 800277e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	b2da      	uxtb	r2, r3
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fa31 	bl	8002bf8 <I2C_TransferConfig>
 8002796:	e00f      	b.n	80027b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	2300      	movs	r3, #0
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa20 	bl	8002bf8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d19a      	bne.n	80026f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f974 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e01a      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2220      	movs	r2, #32
 80027dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_I2C_Mem_Read+0x230>)
 80027ea:	400b      	ands	r3, r1
 80027ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	80002400 	.word	0x80002400
 8002818:	fe00e800 	.word	0xfe00e800

0800281c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	817b      	strh	r3, [r7, #10]
 800282e:	460b      	mov	r3, r1
 8002830:	813b      	strh	r3, [r7, #8]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <I2C_RequestMemoryWrite+0xa4>)
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f9d7 	bl	8002bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	69b9      	ldr	r1, [r7, #24]
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f8f0 	bl	8002a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e02c      	b.n	80028b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002864:	893b      	ldrh	r3, [r7, #8]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
 800286e:	e015      	b.n	800289c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b29b      	uxth	r3, r3
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	69b9      	ldr	r1, [r7, #24]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8d6 	bl	8002a34 <I2C_WaitOnTXISFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e012      	b.n	80028b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f884 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	80002000 	.word	0x80002000

080028c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	460b      	mov	r3, r1
 80028d8:	813b      	strh	r3, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	4b20      	ldr	r3, [pc, #128]	; (8002968 <I2C_RequestMemoryRead+0xa4>)
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2300      	movs	r3, #0
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f984 	bl	8002bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	69b9      	ldr	r1, [r7, #24]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f89d 	bl	8002a34 <I2C_WaitOnTXISFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e02c      	b.n	800295e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d105      	bne.n	8002916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800290a:	893b      	ldrh	r3, [r7, #8]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
 8002914:	e015      	b.n	8002942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002916:	893b      	ldrh	r3, [r7, #8]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	b29b      	uxth	r3, r3
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	69b9      	ldr	r1, [r7, #24]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f883 	bl	8002a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e012      	b.n	800295e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2200      	movs	r2, #0
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f831 	bl	80029b4 <I2C_WaitOnFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	80002000 	.word	0x80002000

0800296c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d103      	bne.n	800298a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d007      	beq.n	80029a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	619a      	str	r2, [r3, #24]
  }
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c4:	e022      	b.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029cc:	d01e      	beq.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7ff f873 	bl	8001ab8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d113      	bne.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	f043 0220 	orr.w	r2, r3, #32
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e00f      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d0cd      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a40:	e02c      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f870 	bl	8002b2c <I2C_IsAcknowledgeFailed>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02a      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5c:	d01e      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7ff f82b 	bl	8001ab8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d113      	bne.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d1cb      	bne.n	8002a42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	e028      	b.n	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f830 	bl	8002b2c <I2C_IsAcknowledgeFailed>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e026      	b.n	8002b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7fe ffef 	bl	8001ab8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d113      	bne.n	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	f043 0220 	orr.w	r2, r3, #32
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e007      	b.n	8002b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1cf      	bne.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d151      	bne.n	8002bea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b46:	e022      	b.n	8002b8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4e:	d01e      	beq.n	8002b8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b50:	f7fe ffb2 	bl	8001ab8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d302      	bcc.n	8002b66 <I2C_IsAcknowledgeFailed+0x3a>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d113      	bne.n	8002b8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e02e      	b.n	8002bec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d1d5      	bne.n	8002b48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fedd 	bl	800296c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f043 0204 	orr.w	r2, r3, #4
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	fe00e800 	.word	0xfe00e800

08002bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	4613      	mov	r3, r2
 8002c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <I2C_TransferConfig+0x58>)
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	ea02 0103 	and.w	r1, r2, r3
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	03ff63ff 	.word	0x03ff63ff

08002c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d138      	bne.n	8002cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e032      	b.n	8002cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0201 	bic.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cdc:	2302      	movs	r3, #2
  }
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d139      	bne.n	8002d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e033      	b.n	8002d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2224      	movs	r2, #36	; 0x24
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d88:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d102      	bne.n	8002d9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9a:	e00b      	b.n	8002db4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002daa:	d102      	bne.n	8002db2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db0:	e000      	b.n	8002db4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002db2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40007000 	.word	0x40007000

08002dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d141      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dd2:	4b4b      	ldr	r3, [pc, #300]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d131      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de0:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de6:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df0:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df8:	4a41      	ldr	r2, [pc, #260]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e00:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2232      	movs	r2, #50	; 0x32
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	4a3f      	ldr	r2, [pc, #252]	; (8002f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	0c9b      	lsrs	r3, r3, #18
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e16:	e002      	b.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d102      	bne.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f2      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d158      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e057      	b.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e54:	e04d      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5c:	d141      	bne.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6a:	d131      	bne.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e7c:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e84:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2232      	movs	r2, #50	; 0x32
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea2:	e002      	b.n	8002eaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d102      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f2      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d112      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e011      	b.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ee0:	e007      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40007000 	.word	0x40007000
 8002f04:	2000005c 	.word	0x2000005c
 8002f08:	431bde83 	.word	0x431bde83

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f000 bc16 	b.w	800374c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f20:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2a:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80e4 	beq.w	800310a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4c>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2b0c      	cmp	r3, #12
 8002f4c:	f040 808b 	bne.w	8003066 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f040 8087 	bne.w	8003066 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f58:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_OscConfig+0x64>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e3ed      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	4b8b      	ldr	r3, [pc, #556]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_RCC_OscConfig+0x7e>
 8002f80:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f88:	e005      	b.n	8002f96 <HAL_RCC_OscConfig+0x8a>
 8002f8a:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d223      	bcs.n	8002fe2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fdfa 	bl	8003b98 <RCC_SetFlashLatencyFromMSIRange>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e3ce      	b.n	800374c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fae:	4b7d      	ldr	r3, [pc, #500]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4977      	ldr	r1, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	4972      	ldr	r1, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e025      	b.n	800302e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe2:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a6f      	ldr	r2, [pc, #444]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	496a      	ldr	r1, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	4965      	ldr	r1, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fdba 	bl	8003b98 <RCC_SetFlashLatencyFromMSIRange>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e38e      	b.n	800374c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302e:	f000 fcbf 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003032:	4601      	mov	r1, r0
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a5a      	ldr	r2, [pc, #360]	; (80031a8 <HAL_RCC_OscConfig+0x29c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	fa21 f303 	lsr.w	r3, r1, r3
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_RCC_OscConfig+0x2a0>)
 800304c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800304e:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <HAL_RCC_OscConfig+0x2a4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fbf0 	bl	8001838 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d052      	beq.n	8003108 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	e372      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d032      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4c      	ldr	r2, [pc, #304]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800307a:	f7fe fd1d 	bl	8001ab8 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003082:	f7fe fd19 	bl	8001ab8 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e35b      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003094:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a0:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3f      	ldr	r2, [pc, #252]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	493a      	ldr	r1, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030be:	4b39      	ldr	r3, [pc, #228]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	4935      	ldr	r1, [pc, #212]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	e01a      	b.n	800310a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030d4:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fcea 	bl	8001ab8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030e8:	f7fe fce6 	bl	8001ab8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e328      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1dc>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d073      	beq.n	80031fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x21c>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d10e      	bne.n	8003140 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b03      	cmp	r3, #3
 8003126:	d10b      	bne.n	8003140 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d063      	beq.n	80031fc <HAL_RCC_OscConfig+0x2f0>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d15f      	bne.n	80031fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e305      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d106      	bne.n	8003158 <HAL_RCC_OscConfig+0x24c>
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0x288>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x270>
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x288>
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_OscConfig+0x298>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fc8c 	bl	8001ab8 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	e010      	b.n	80031c6 <HAL_RCC_OscConfig+0x2ba>
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08007730 	.word	0x08007730
 80031ac:	2000005c 	.word	0x2000005c
 80031b0:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fc80 	bl	8001ab8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e2c2      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c6:	4baf      	ldr	r3, [pc, #700]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2a8>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fc70 	bl	8001ab8 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fe fc6c 	bl	8001ab8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e2ae      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ee:	4ba5      	ldr	r3, [pc, #660]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x2d0>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d060      	beq.n	80032cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d005      	beq.n	800321c <HAL_RCC_OscConfig+0x310>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d119      	bne.n	800324a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d116      	bne.n	800324a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x328>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e28b      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b93      	ldr	r3, [pc, #588]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	061b      	lsls	r3, r3, #24
 8003242:	4990      	ldr	r1, [pc, #576]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003248:	e040      	b.n	80032cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d023      	beq.n	800329a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003252:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a8b      	ldr	r2, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7fe fc2b 	bl	8001ab8 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003266:	f7fe fc27 	bl	8001ab8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e269      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	497c      	ldr	r1, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
 8003298:	e018      	b.n	80032cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	4b7a      	ldr	r3, [pc, #488]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a79      	ldr	r2, [pc, #484]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fc07 	bl	8001ab8 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fc03 	bl	8001ab8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e245      	b.n	800374c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d03c      	beq.n	8003352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01c      	beq.n	800331a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e0:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	4a67      	ldr	r2, [pc, #412]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fbe2 	bl	8001ab8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f8:	f7fe fbde 	bl	8001ab8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e220      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330a:	4b5e      	ldr	r3, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800330c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <HAL_RCC_OscConfig+0x3ec>
 8003318:	e01b      	b.n	8003352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800331c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe fbc5 	bl	8001ab8 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003332:	f7fe fbc1 	bl	8001ab8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e203      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ef      	bne.n	8003332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80a6 	beq.w	80034ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003360:	2300      	movs	r3, #0
 8003362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b44      	ldr	r3, [pc, #272]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003388:	2301      	movs	r3, #1
 800338a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338c:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <HAL_RCC_OscConfig+0x57c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d118      	bne.n	80033ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003398:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x57c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3a      	ldr	r2, [pc, #232]	; (8003488 <HAL_RCC_OscConfig+0x57c>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a4:	f7fe fb88 	bl	8001ab8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ac:	f7fe fb84 	bl	8001ab8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1c6      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCC_OscConfig+0x57c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4d8>
 80033d2:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e2:	e024      	b.n	800342e <HAL_RCC_OscConfig+0x522>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d110      	bne.n	800340e <HAL_RCC_OscConfig+0x502>
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800340c:	e00f      	b.n	800342e <HAL_RCC_OscConfig+0x522>
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003426:	f023 0304 	bic.w	r3, r3, #4
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe fb3f 	bl	8001ab8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe fb3b 	bl	8001ab8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e17b      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x578>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ed      	beq.n	800343e <HAL_RCC_OscConfig+0x532>
 8003462:	e01a      	b.n	800349a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fe fb28 	bl	8001ab8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800346a:	e00f      	b.n	800348c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fb24 	bl	8001ab8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d906      	bls.n	800348c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e164      	b.n	800374c <HAL_RCC_OscConfig+0x840>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800348c:	4ba8      	ldr	r3, [pc, #672]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e8      	bne.n	800346c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d105      	bne.n	80034ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a0:	4ba3      	ldr	r3, [pc, #652]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	4aa2      	ldr	r2, [pc, #648]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03c      	beq.n	8003532 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034c0:	4b9b      	ldr	r3, [pc, #620]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c6:	4a9a      	ldr	r2, [pc, #616]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe faf2 	bl	8001ab8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d8:	f7fe faee 	bl	8001ab8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e130      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ea:	4b91      	ldr	r3, [pc, #580]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ef      	beq.n	80034d8 <HAL_RCC_OscConfig+0x5cc>
 80034f8:	e01b      	b.n	8003532 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034fa:	4b8d      	ldr	r3, [pc, #564]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80034fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003500:	4a8b      	ldr	r2, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe fad5 	bl	8001ab8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003512:	f7fe fad1 	bl	8001ab8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e113      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003524:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ef      	bne.n	8003512 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8107 	beq.w	800374a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	2b02      	cmp	r3, #2
 8003542:	f040 80cb 	bne.w	80036dc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003546:	4b7a      	ldr	r3, [pc, #488]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	429a      	cmp	r2, r3
 8003558:	d12c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	3b01      	subs	r3, #1
 8003566:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d123      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d11b      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d113      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d109      	bne.n	80035b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	3b01      	subs	r3, #1
 80035ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d06d      	beq.n	8003690 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d068      	beq.n	800368c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035ba:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035c6:	4b5a      	ldr	r3, [pc, #360]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0ba      	b.n	800374c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e2:	f7fe fa69 	bl	8001ab8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fa65 	bl	8001ab8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0a7      	b.n	800374c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b49      	ldr	r3, [pc, #292]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b49      	ldr	r3, [pc, #292]	; (8003734 <HAL_RCC_OscConfig+0x828>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003618:	3a01      	subs	r2, #1
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003622:	0212      	lsls	r2, r2, #8
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800362a:	0852      	lsrs	r2, r2, #1
 800362c:	3a01      	subs	r2, #1
 800362e:	0552      	lsls	r2, r2, #21
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003636:	0852      	lsrs	r2, r2, #1
 8003638:	3a01      	subs	r2, #1
 800363a:	0652      	lsls	r2, r2, #25
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003642:	06d2      	lsls	r2, r2, #27
 8003644:	430a      	orrs	r2, r1
 8003646:	493a      	ldr	r1, [pc, #232]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a37      	ldr	r2, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a34      	ldr	r2, [pc, #208]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003664:	f7fe fa28 	bl	8001ab8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fe fa24 	bl	8001ab8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e066      	b.n	800374c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800368a:	e05e      	b.n	800374a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e05d      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d156      	bne.n	800374a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b4:	f7fe fa00 	bl	8001ab8 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f9fc 	bl	8001ab8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e03e      	b.n	800374c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x7b0>
 80036da:	e036      	b.n	800374a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d031      	beq.n	8003746 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003700:	f023 0303 	bic.w	r3, r3, #3
 8003704:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_RCC_OscConfig+0x824>)
 800370c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003714:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe f9cf 	bl	8001ab8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800371c:	e00c      	b.n	8003738 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe f9cb 	bl	8001ab8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d905      	bls.n	8003738 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e00d      	b.n	800374c <HAL_RCC_OscConfig+0x840>
 8003730:	40021000 	.word	0x40021000
 8003734:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <HAL_RCC_OscConfig+0x848>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ec      	bne.n	800371e <HAL_RCC_OscConfig+0x812>
 8003744:	e001      	b.n	800374a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e10f      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003770:	4b89      	ldr	r3, [pc, #548]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d910      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377e:	4b86      	ldr	r3, [pc, #536]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 020f 	bic.w	r2, r3, #15
 8003786:	4984      	ldr	r1, [pc, #528]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378e:	4b82      	ldr	r3, [pc, #520]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d001      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0f7      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8089 	beq.w	80038c0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d133      	bne.n	800381e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b6:	4b79      	ldr	r3, [pc, #484]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e4      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80037c6:	f000 fa41 	bl	8003c4c <RCC_GetSysClockFreqFromPLLSource>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <HAL_RCC_ClockConfig+0x248>)
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d955      	bls.n	800387e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037d2:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037de:	4b6f      	ldr	r3, [pc, #444]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	4a6d      	ldr	r2, [pc, #436]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80037e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e044      	b.n	800387e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d03e      	beq.n	800387e <HAL_RCC_ClockConfig+0x126>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d13a      	bne.n	800387e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003808:	4b64      	ldr	r3, [pc, #400]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003810:	4a62      	ldr	r2, [pc, #392]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003816:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e02f      	b.n	800387e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	4b5d      	ldr	r3, [pc, #372]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0ac      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e0a0      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800384e:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e098      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800385e:	f000 f8a7 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <HAL_RCC_ClockConfig+0x248>)
 8003866:	429a      	cmp	r2, r3
 8003868:	d909      	bls.n	800387e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800386a:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003872:	4a4a      	ldr	r2, [pc, #296]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003878:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4944      	ldr	r1, [pc, #272]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003890:	f7fe f912 	bl	8001ab8 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fe f90e 	bl	8001ab8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e070      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4930      	ldr	r1, [pc, #192]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
 80038de:	e008      	b.n	80038f2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d105      	bne.n	80038f2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	4a2c      	ldr	r2, [pc, #176]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 80038ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f2:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d210      	bcs.n	8003922 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 020f 	bic.w	r2, r3, #15
 8003908:	4923      	ldr	r1, [pc, #140]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_RCC_ClockConfig+0x240>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d001      	beq.n	8003922 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e036      	b.n	8003990 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4918      	ldr	r1, [pc, #96]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394c:	4b13      	ldr	r3, [pc, #76]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4910      	ldr	r1, [pc, #64]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003960:	f000 f826 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003964:	4601      	mov	r1, r0
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCC_ClockConfig+0x244>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <HAL_RCC_ClockConfig+0x24c>)
 8003972:	5cd3      	ldrb	r3, [r2, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x250>)
 800397e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x254>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd ff57 	bl	8001838 <HAL_InitTick>
 800398a:	4603      	mov	r3, r0
 800398c:	73fb      	strb	r3, [r7, #15]

  return status;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40022000 	.word	0x40022000
 800399c:	40021000 	.word	0x40021000
 80039a0:	04c4b400 	.word	0x04c4b400
 80039a4:	08007730 	.word	0x08007730
 80039a8:	2000005c 	.word	0x2000005c
 80039ac:	20000060 	.word	0x20000060

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d121      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d11e      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039e4:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a28:	4b24      	ldr	r3, [pc, #144]	; (8003abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e004      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a34:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d133      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0xaa>
 8003a52:	e005      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a56:	617b      	str	r3, [r7, #20]
      break;
 8003a58:	e005      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a5a:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a5c:	617b      	str	r3, [r7, #20]
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	617b      	str	r3, [r7, #20]
      break;
 8003a64:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	3301      	adds	r3, #1
 8003a72:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	fb02 f203 	mul.w	r2, r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0e5b      	lsrs	r3, r3, #25
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3724      	adds	r7, #36	; 0x24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	08007748 	.word	0x08007748
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	007a1200 	.word	0x007a1200

08003ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000005c 	.word	0x2000005c

08003adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ae0:	f7ff fff0 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0a1b      	lsrs	r3, r3, #8
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08007740 	.word	0x08007740

08003b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b0c:	f7ff ffda 	bl	8003ac4 <HAL_RCC_GetHCLKFreq>
 8003b10:	4601      	mov	r1, r0
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	0adb      	lsrs	r3, r3, #11
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08007740 	.word	0x08007740

08003b34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	220f      	movs	r2, #15
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b44:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <HAL_RCC_GetClockConfig+0x60>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40022000 	.word	0x40022000

08003b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bb0:	f7ff f8e8 	bl	8002d84 <HAL_PWREx_GetVoltageRange>
 8003bb4:	6178      	str	r0, [r7, #20]
 8003bb6:	e014      	b.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	4a21      	ldr	r2, [pc, #132]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f8d8 	bl	8002d84 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be8:	d10b      	bne.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b80      	cmp	r3, #128	; 0x80
 8003bee:	d913      	bls.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8003bf4:	d902      	bls.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e00d      	b.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e00a      	b.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b7f      	cmp	r3, #127	; 0x7f
 8003c06:	d902      	bls.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c08:	2302      	movs	r3, #2
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e004      	b.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b70      	cmp	r3, #112	; 0x70
 8003c12:	d101      	bne.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c14:	2301      	movs	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f023 020f 	bic.w	r2, r3, #15
 8003c20:	4909      	ldr	r1, [pc, #36]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c28:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40022000 	.word	0x40022000

08003c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d118      	bne.n	8003c94 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e005      	b.n	8003c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d002      	beq.n	8003caa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d003      	beq.n	8003cb0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003ca8:	e005      	b.n	8003cb6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cac:	613b      	str	r3, [r7, #16]
    break;
 8003cae:	e005      	b.n	8003cbc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cb2:	613b      	str	r3, [r7, #16]
    break;
 8003cb4:	e002      	b.n	8003cbc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	613b      	str	r3, [r7, #16]
    break;
 8003cba:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	fb02 f203 	mul.w	r2, r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	0e5b      	lsrs	r3, r3, #25
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	3301      	adds	r3, #1
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003cfc:	683b      	ldr	r3, [r7, #0]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08007748 	.word	0x08007748
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03d      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d00b      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d804      	bhi.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d015      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d4c:	e01d      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d4e:	2b60      	cmp	r3, #96	; 0x60
 8003d50:	d01e      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d01c      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d56:	e018      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d58:	4b86      	ldr	r3, [pc, #536]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a85      	ldr	r2, [pc, #532]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d64:	e015      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fafd 	bl	800436c <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d76:	e00c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3320      	adds	r3, #32
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fbe4 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d98:	4b76      	ldr	r3, [pc, #472]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da6:	4973      	ldr	r1, [pc, #460]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d042      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d00f      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	d805      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d011      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dd8:	d017      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003dda:	e01f      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de0:	d01f      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de6:	d01c      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003de8:	e018      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dea:	4b62      	ldr	r3, [pc, #392]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a61      	ldr	r2, [pc, #388]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df6:	e015      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fab4 	bl	800436c <RCCEx_PLLSAI1_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e08:	e00c      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3320      	adds	r3, #32
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fb9b 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e2a:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	494e      	ldr	r1, [pc, #312]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 809f 	beq.w	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e54:	2300      	movs	r3, #0
 8003e56:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e58:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e96:	f7fd fe0f 	bl	8001ab8 <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fd fe0b 	bl	8001ab8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
        break;
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ef      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d15b      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01f      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f0e:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d016      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fdca 	bl	8001ab8 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f26:	e00b      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fd fdc6 	bl	8001ab8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d902      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f3e:	e006      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ec      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f6c:	e008      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	74bb      	strb	r3, [r7, #18]
 8003f72:	e005      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f80:	7c7b      	ldrb	r3, [r7, #17]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f86:	4ba0      	ldr	r3, [pc, #640]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	4a9f      	ldr	r2, [pc, #636]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f9e:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f023 0203 	bic.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	4996      	ldr	r1, [pc, #600]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f023 020c 	bic.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	498e      	ldr	r1, [pc, #568]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fe2:	4b89      	ldr	r3, [pc, #548]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	4985      	ldr	r1, [pc, #532]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004004:	4b80      	ldr	r3, [pc, #512]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	497d      	ldr	r1, [pc, #500]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004026:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004034:	4974      	ldr	r1, [pc, #464]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	496c      	ldr	r1, [pc, #432]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800406a:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004078:	4963      	ldr	r1, [pc, #396]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409a:	495b      	ldr	r1, [pc, #364]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ae:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	4952      	ldr	r1, [pc, #328]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d0:	4b4d      	ldr	r3, [pc, #308]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	494a      	ldr	r1, [pc, #296]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f2:	4b45      	ldr	r3, [pc, #276]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	4941      	ldr	r1, [pc, #260]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004114:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	4939      	ldr	r1, [pc, #228]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d028      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004136:	4b34      	ldr	r3, [pc, #208]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004154:	d106      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004160:	60d3      	str	r3, [r2, #12]
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f8f9 	bl	800436c <RCCEx_PLLSAI1_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d04d      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800419c:	d108      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800419e:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041ae:	e012      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041b6:	4a14      	ldr	r2, [pc, #80]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ce:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041de:	d106      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ea:	60d3      	str	r3, [r2, #12]
 80041ec:	e020      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f6:	d109      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041f8:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a02      	ldr	r2, [pc, #8]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
 8004204:	e014      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f8a5 	bl	800436c <RCCEx_PLLSAI1_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004226:	7cfb      	ldrb	r3, [r7, #19]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d028      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424a:	4947      	ldr	r1, [pc, #284]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425a:	d106      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800425c:	4b42      	ldr	r3, [pc, #264]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a41      	ldr	r2, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004266:	60d3      	str	r3, [r2, #12]
 8004268:	e011      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004272:	d10c      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f876 	bl	800436c <RCCEx_PLLSAI1_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01e      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429a:	4b33      	ldr	r3, [pc, #204]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	492f      	ldr	r1, [pc, #188]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f851 	bl	800436c <RCCEx_PLLSAI1_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ea:	f023 0204 	bic.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	491c      	ldr	r1, [pc, #112]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800430a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430e:	f023 0218 	bic.w	r2, r3, #24
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	4913      	ldr	r1, [pc, #76]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d017      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800432e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433c:	490a      	ldr	r1, [pc, #40]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800435c:	7cbb      	ldrb	r3, [r7, #18]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000

0800436c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800437a:	4b70      	ldr	r3, [pc, #448]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004386:	4b6d      	ldr	r3, [pc, #436]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0203 	and.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
       ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d13f      	bne.n	800441e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e03c      	b.n	800441e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d00c      	beq.n	80043c6 <RCCEx_PLLSAI1_Config+0x5a>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d013      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x6c>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d120      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b4:	4b61      	ldr	r3, [pc, #388]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11d      	bne.n	80043fc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e01a      	b.n	80043fc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c6:	4b5d      	ldr	r3, [pc, #372]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d6:	e013      	b.n	8004400 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d8:	4b58      	ldr	r3, [pc, #352]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10f      	bne.n	8004404 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e4:	4b55      	ldr	r3, [pc, #340]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f4:	e006      	b.n	8004404 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
      break;
 80043fa:	e004      	b.n	8004406 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004404:	bf00      	nop
    }

    if(status == HAL_OK)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f023 0203 	bic.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4948      	ldr	r1, [pc, #288]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 800441a:	4313      	orrs	r3, r2
 800441c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8086 	bne.w	8004532 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004426:	4b45      	ldr	r3, [pc, #276]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a44      	ldr	r2, [pc, #272]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 800442c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004432:	f7fd fb41 	bl	8001ab8 <HAL_GetTick>
 8004436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004438:	e009      	b.n	800444e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800443a:	f7fd fb3d 	bl	8001ab8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d902      	bls.n	800444e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	73fb      	strb	r3, [r7, #15]
        break;
 800444c:	e005      	b.n	800445a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800444e:	4b3b      	ldr	r3, [pc, #236]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ef      	bne.n	800443a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d168      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d113      	bne.n	800448e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004466:	4b35      	ldr	r3, [pc, #212]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	4b35      	ldr	r3, [pc, #212]	; (8004540 <RCCEx_PLLSAI1_Config+0x1d4>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6892      	ldr	r2, [r2, #8]
 8004472:	0211      	lsls	r1, r2, #8
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68d2      	ldr	r2, [r2, #12]
 8004478:	06d2      	lsls	r2, r2, #27
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6852      	ldr	r2, [r2, #4]
 8004480:	3a01      	subs	r2, #1
 8004482:	0112      	lsls	r2, r2, #4
 8004484:	430a      	orrs	r2, r1
 8004486:	492d      	ldr	r1, [pc, #180]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
 800448c:	e02d      	b.n	80044ea <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d115      	bne.n	80044c0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <RCCEx_PLLSAI1_Config+0x1d8>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	0211      	lsls	r1, r2, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6912      	ldr	r2, [r2, #16]
 80044a6:	0852      	lsrs	r2, r2, #1
 80044a8:	3a01      	subs	r2, #1
 80044aa:	0552      	lsls	r2, r2, #21
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	3a01      	subs	r2, #1
 80044b4:	0112      	lsls	r2, r2, #4
 80044b6:	430a      	orrs	r2, r1
 80044b8:	4920      	ldr	r1, [pc, #128]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	610b      	str	r3, [r1, #16]
 80044be:	e014      	b.n	80044ea <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044c6:	4013      	ands	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6952      	ldr	r2, [r2, #20]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0652      	lsls	r2, r2, #25
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6852      	ldr	r2, [r2, #4]
 80044de:	3a01      	subs	r2, #1
 80044e0:	0112      	lsls	r2, r2, #4
 80044e2:	430a      	orrs	r2, r1
 80044e4:	4915      	ldr	r1, [pc, #84]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 80044f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fd fadf 	bl	8001ab8 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fc:	e009      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fe:	f7fd fadb 	bl	8001ab8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d902      	bls.n	8004512 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	73fb      	strb	r3, [r7, #15]
          break;
 8004510:	e005      	b.n	800451e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ef      	beq.n	80044fe <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <RCCEx_PLLSAI1_Config+0x1d0>)
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	07ff800f 	.word	0x07ff800f
 8004544:	ff9f800f 	.word	0xff9f800f
 8004548:	f9ff800f 	.word	0xf9ff800f

0800454c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800455a:	4b70      	ldr	r3, [pc, #448]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00e      	beq.n	8004584 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0203 	and.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d103      	bne.n	800457e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
       ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d13f      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e03c      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d00c      	beq.n	80045a6 <RCCEx_PLLSAI2_Config+0x5a>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d013      	beq.n	80045b8 <RCCEx_PLLSAI2_Config+0x6c>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d120      	bne.n	80045d6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11d      	bne.n	80045dc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e01a      	b.n	80045dc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d116      	bne.n	80045e0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b6:	e013      	b.n	80045e0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045b8:	4b58      	ldr	r3, [pc, #352]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10f      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045c4:	4b55      	ldr	r3, [pc, #340]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045d4:	e006      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      break;
 80045da:	e004      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80045e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d108      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f023 0203 	bic.w	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4948      	ldr	r1, [pc, #288]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8086 	bne.w	8004712 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004606:	4b45      	ldr	r3, [pc, #276]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a44      	ldr	r2, [pc, #272]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 800460c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004612:	f7fd fa51 	bl	8001ab8 <HAL_GetTick>
 8004616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004618:	e009      	b.n	800462e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800461a:	f7fd fa4d 	bl	8001ab8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d902      	bls.n	800462e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	73fb      	strb	r3, [r7, #15]
        break;
 800462c:	e005      	b.n	800463a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800462e:	4b3b      	ldr	r3, [pc, #236]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ef      	bne.n	800461a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d168      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d113      	bne.n	800466e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004646:	4b35      	ldr	r3, [pc, #212]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	4b35      	ldr	r3, [pc, #212]	; (8004720 <RCCEx_PLLSAI2_Config+0x1d4>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	0211      	lsls	r1, r2, #8
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68d2      	ldr	r2, [r2, #12]
 8004658:	06d2      	lsls	r2, r2, #27
 800465a:	4311      	orrs	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6852      	ldr	r2, [r2, #4]
 8004660:	3a01      	subs	r2, #1
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	430a      	orrs	r2, r1
 8004666:	492d      	ldr	r1, [pc, #180]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004668:	4313      	orrs	r3, r2
 800466a:	614b      	str	r3, [r1, #20]
 800466c:	e02d      	b.n	80046ca <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d115      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <RCCEx_PLLSAI2_Config+0x1d8>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6912      	ldr	r2, [r2, #16]
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0552      	lsls	r2, r2, #21
 800468c:	4311      	orrs	r1, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	3a01      	subs	r2, #1
 8004694:	0112      	lsls	r2, r2, #4
 8004696:	430a      	orrs	r2, r1
 8004698:	4920      	ldr	r1, [pc, #128]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	614b      	str	r3, [r1, #20]
 800469e:	e014      	b.n	80046ca <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046a0:	4b1e      	ldr	r3, [pc, #120]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	4b20      	ldr	r3, [pc, #128]	; (8004728 <RCCEx_PLLSAI2_Config+0x1dc>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	0211      	lsls	r1, r2, #8
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6952      	ldr	r2, [r2, #20]
 80046b2:	0852      	lsrs	r2, r2, #1
 80046b4:	3a01      	subs	r2, #1
 80046b6:	0652      	lsls	r2, r2, #25
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6852      	ldr	r2, [r2, #4]
 80046be:	3a01      	subs	r2, #1
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	430a      	orrs	r2, r1
 80046c4:	4915      	ldr	r1, [pc, #84]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fd f9ef 	bl	8001ab8 <HAL_GetTick>
 80046da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046dc:	e009      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046de:	f7fd f9eb 	bl	8001ab8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	73fb      	strb	r3, [r7, #15]
          break;
 80046f0:	e005      	b.n	80046fe <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046f2:	4b0a      	ldr	r3, [pc, #40]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	4903      	ldr	r1, [pc, #12]	; (800471c <RCCEx_PLLSAI2_Config+0x1d0>)
 800470e:	4313      	orrs	r3, r2
 8004710:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	07ff800f 	.word	0x07ff800f
 8004724:	ff9f800f 	.word	0xff9f800f
 8004728:	f9ff800f 	.word	0xf9ff800f

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e049      	b.n	80047d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f841 	bl	80047da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f000 f9f8 	bl	8004b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04f      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0201 	orr.w	r2, r2, #1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d018      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xcc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_Base_Start_IT+0x76>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d115      	bne.n	8004892 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_TIM_Base_Start_IT+0xdc>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d015      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d011      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	e008      	b.n	80048a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	00010007 	.word	0x00010007

080048d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d122      	bne.n	800492c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d11b      	bne.n	800492c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0202 	mvn.w	r2, #2
 80048fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 0303 	and.w	r3, r3, #3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f905 	bl	8004b22 <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f8f7 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f908 	bl	8004b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d122      	bne.n	8004980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d11b      	bne.n	8004980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0204 	mvn.w	r2, #4
 8004950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f8db 	bl	8004b22 <HAL_TIM_IC_CaptureCallback>
 800496c:	e005      	b.n	800497a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f8cd 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f8de 	bl	8004b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b08      	cmp	r3, #8
 800498c:	d122      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d11b      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0208 	mvn.w	r2, #8
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8b1 	bl	8004b22 <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8a3 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f8b4 	bl	8004b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d122      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d11b      	bne.n	8004a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0210 	mvn.w	r2, #16
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2208      	movs	r2, #8
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f887 	bl	8004b22 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f879 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f88a 	bl	8004b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d10e      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d107      	bne.n	8004a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0201 	mvn.w	r2, #1
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fbdc 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b80      	cmp	r3, #128	; 0x80
 8004a60:	d10e      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d107      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f914 	bl	8004ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8e:	d10e      	bne.n	8004aae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f907 	bl	8004cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d10e      	bne.n	8004ada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	d107      	bne.n	8004ada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f838 	bl	8004b4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d10e      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d107      	bne.n	8004b06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f06f 0220 	mvn.w	r2, #32
 8004afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8c7 	bl	8004c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a40      	ldr	r2, [pc, #256]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d00f      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3d      	ldr	r2, [pc, #244]	; (8004c78 <TIM_Base_SetConfig+0x118>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00b      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3c      	ldr	r2, [pc, #240]	; (8004c7c <TIM_Base_SetConfig+0x11c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <TIM_Base_SetConfig+0x120>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d003      	beq.n	8004ba0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a3a      	ldr	r2, [pc, #232]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <TIM_Base_SetConfig+0x118>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <TIM_Base_SetConfig+0x11c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <TIM_Base_SetConfig+0x120>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <TIM_Base_SetConfig+0x128>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a26      	ldr	r2, [pc, #152]	; (8004c90 <TIM_Base_SetConfig+0x130>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <TIM_Base_SetConfig+0x128>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <TIM_Base_SetConfig+0x12c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0xf8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a0f      	ldr	r2, [pc, #60]	; (8004c90 <TIM_Base_SetConfig+0x130>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d103      	bne.n	8004c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	615a      	str	r2, [r3, #20]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800

08004c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e042      	b.n	8004d68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fc fd5b 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2224      	movs	r2, #36	; 0x24
 8004cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8c4 	bl	8004ea0 <UART_SetConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fb8a 	bl	8005444 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fc11 	bl	8005588 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f040 8084 	bne.w	8004e94 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_UART_Transmit+0x28>
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e07c      	b.n	8004e96 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Transmit+0x3a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e075      	b.n	8004e96 <HAL_UART_Transmit+0x126>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2221      	movs	r2, #33	; 0x21
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fe79 	bl	8001ab8 <HAL_GetTick>
 8004dc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	88fa      	ldrh	r2, [r7, #6]
 8004dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d108      	bne.n	8004df4 <HAL_UART_Transmit+0x84>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	e003      	b.n	8004dfc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8004e04:	e02d      	b.n	8004e62 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 fc01 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e03a      	b.n	8004e96 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	881a      	ldrh	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e32:	b292      	uxth	r2, r2
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	3302      	adds	r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e008      	b.n	8004e50 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b292      	uxth	r2, r2
 8004e48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2140      	movs	r1, #64	; 0x40
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fbcd 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e006      	b.n	8004e96 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ea4:	b088      	sub	sp, #32
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	4bb1      	ldr	r3, [pc, #708]	; (800519c <UART_SetConfig+0x2fc>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	69f9      	ldr	r1, [r7, #28]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4aa6      	ldr	r2, [pc, #664]	; (80051a0 <UART_SetConfig+0x300>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	69f9      	ldr	r1, [r7, #28]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	f023 010f 	bic.w	r1, r3, #15
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a97      	ldr	r2, [pc, #604]	; (80051a4 <UART_SetConfig+0x304>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d121      	bne.n	8004f90 <UART_SetConfig+0xf0>
 8004f4c:	4b96      	ldr	r3, [pc, #600]	; (80051a8 <UART_SetConfig+0x308>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d816      	bhi.n	8004f88 <UART_SetConfig+0xe8>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0xc0>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f71 	.word	0x08004f71
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f77 	.word	0x08004f77
 8004f6c:	08004f83 	.word	0x08004f83
 8004f70:	2301      	movs	r3, #1
 8004f72:	76fb      	strb	r3, [r7, #27]
 8004f74:	e0e8      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004f76:	2302      	movs	r3, #2
 8004f78:	76fb      	strb	r3, [r7, #27]
 8004f7a:	e0e5      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	76fb      	strb	r3, [r7, #27]
 8004f80:	e0e2      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004f82:	2308      	movs	r3, #8
 8004f84:	76fb      	strb	r3, [r7, #27]
 8004f86:	e0df      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004f88:	2310      	movs	r3, #16
 8004f8a:	76fb      	strb	r3, [r7, #27]
 8004f8c:	bf00      	nop
 8004f8e:	e0db      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a85      	ldr	r2, [pc, #532]	; (80051ac <UART_SetConfig+0x30c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d134      	bne.n	8005004 <UART_SetConfig+0x164>
 8004f9a:	4b83      	ldr	r3, [pc, #524]	; (80051a8 <UART_SetConfig+0x308>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d829      	bhi.n	8004ffc <UART_SetConfig+0x15c>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <UART_SetConfig+0x110>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fe5 	.word	0x08004fe5
 8004fb4:	08004ffd 	.word	0x08004ffd
 8004fb8:	08004ffd 	.word	0x08004ffd
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	08004ff1 	.word	0x08004ff1
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08004ffd 	.word	0x08004ffd
 8004fcc:	08004ffd 	.word	0x08004ffd
 8004fd0:	08004feb 	.word	0x08004feb
 8004fd4:	08004ffd 	.word	0x08004ffd
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08004ffd 	.word	0x08004ffd
 8004fe0:	08004ff7 	.word	0x08004ff7
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	e0ae      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004fea:	2302      	movs	r3, #2
 8004fec:	76fb      	strb	r3, [r7, #27]
 8004fee:	e0ab      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	76fb      	strb	r3, [r7, #27]
 8004ff4:	e0a8      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	76fb      	strb	r3, [r7, #27]
 8004ffa:	e0a5      	b.n	8005148 <UART_SetConfig+0x2a8>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	76fb      	strb	r3, [r7, #27]
 8005000:	bf00      	nop
 8005002:	e0a1      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a69      	ldr	r2, [pc, #420]	; (80051b0 <UART_SetConfig+0x310>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d120      	bne.n	8005050 <UART_SetConfig+0x1b0>
 800500e:	4b66      	ldr	r3, [pc, #408]	; (80051a8 <UART_SetConfig+0x308>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005018:	2b10      	cmp	r3, #16
 800501a:	d00f      	beq.n	800503c <UART_SetConfig+0x19c>
 800501c:	2b10      	cmp	r3, #16
 800501e:	d802      	bhi.n	8005026 <UART_SetConfig+0x186>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <UART_SetConfig+0x190>
 8005024:	e010      	b.n	8005048 <UART_SetConfig+0x1a8>
 8005026:	2b20      	cmp	r3, #32
 8005028:	d005      	beq.n	8005036 <UART_SetConfig+0x196>
 800502a:	2b30      	cmp	r3, #48	; 0x30
 800502c:	d009      	beq.n	8005042 <UART_SetConfig+0x1a2>
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x1a8>
 8005030:	2300      	movs	r3, #0
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e088      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005036:	2302      	movs	r3, #2
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e085      	b.n	8005148 <UART_SetConfig+0x2a8>
 800503c:	2304      	movs	r3, #4
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e082      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005042:	2308      	movs	r3, #8
 8005044:	76fb      	strb	r3, [r7, #27]
 8005046:	e07f      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005048:	2310      	movs	r3, #16
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	bf00      	nop
 800504e:	e07b      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a57      	ldr	r2, [pc, #348]	; (80051b4 <UART_SetConfig+0x314>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d120      	bne.n	800509c <UART_SetConfig+0x1fc>
 800505a:	4b53      	ldr	r3, [pc, #332]	; (80051a8 <UART_SetConfig+0x308>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d00f      	beq.n	8005088 <UART_SetConfig+0x1e8>
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d802      	bhi.n	8005072 <UART_SetConfig+0x1d2>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <UART_SetConfig+0x1dc>
 8005070:	e010      	b.n	8005094 <UART_SetConfig+0x1f4>
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d005      	beq.n	8005082 <UART_SetConfig+0x1e2>
 8005076:	2bc0      	cmp	r3, #192	; 0xc0
 8005078:	d009      	beq.n	800508e <UART_SetConfig+0x1ee>
 800507a:	e00b      	b.n	8005094 <UART_SetConfig+0x1f4>
 800507c:	2300      	movs	r3, #0
 800507e:	76fb      	strb	r3, [r7, #27]
 8005080:	e062      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005082:	2302      	movs	r3, #2
 8005084:	76fb      	strb	r3, [r7, #27]
 8005086:	e05f      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005088:	2304      	movs	r3, #4
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e05c      	b.n	8005148 <UART_SetConfig+0x2a8>
 800508e:	2308      	movs	r3, #8
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e059      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005094:	2310      	movs	r3, #16
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	bf00      	nop
 800509a:	e055      	b.n	8005148 <UART_SetConfig+0x2a8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a45      	ldr	r2, [pc, #276]	; (80051b8 <UART_SetConfig+0x318>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d124      	bne.n	80050f0 <UART_SetConfig+0x250>
 80050a6:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <UART_SetConfig+0x308>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b4:	d012      	beq.n	80050dc <UART_SetConfig+0x23c>
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d802      	bhi.n	80050c2 <UART_SetConfig+0x222>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <UART_SetConfig+0x230>
 80050c0:	e012      	b.n	80050e8 <UART_SetConfig+0x248>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d006      	beq.n	80050d6 <UART_SetConfig+0x236>
 80050c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050cc:	d009      	beq.n	80050e2 <UART_SetConfig+0x242>
 80050ce:	e00b      	b.n	80050e8 <UART_SetConfig+0x248>
 80050d0:	2300      	movs	r3, #0
 80050d2:	76fb      	strb	r3, [r7, #27]
 80050d4:	e038      	b.n	8005148 <UART_SetConfig+0x2a8>
 80050d6:	2302      	movs	r3, #2
 80050d8:	76fb      	strb	r3, [r7, #27]
 80050da:	e035      	b.n	8005148 <UART_SetConfig+0x2a8>
 80050dc:	2304      	movs	r3, #4
 80050de:	76fb      	strb	r3, [r7, #27]
 80050e0:	e032      	b.n	8005148 <UART_SetConfig+0x2a8>
 80050e2:	2308      	movs	r3, #8
 80050e4:	76fb      	strb	r3, [r7, #27]
 80050e6:	e02f      	b.n	8005148 <UART_SetConfig+0x2a8>
 80050e8:	2310      	movs	r3, #16
 80050ea:	76fb      	strb	r3, [r7, #27]
 80050ec:	bf00      	nop
 80050ee:	e02b      	b.n	8005148 <UART_SetConfig+0x2a8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <UART_SetConfig+0x300>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d124      	bne.n	8005144 <UART_SetConfig+0x2a4>
 80050fa:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <UART_SetConfig+0x308>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d012      	beq.n	8005130 <UART_SetConfig+0x290>
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d802      	bhi.n	8005116 <UART_SetConfig+0x276>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <UART_SetConfig+0x284>
 8005114:	e012      	b.n	800513c <UART_SetConfig+0x29c>
 8005116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511a:	d006      	beq.n	800512a <UART_SetConfig+0x28a>
 800511c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005120:	d009      	beq.n	8005136 <UART_SetConfig+0x296>
 8005122:	e00b      	b.n	800513c <UART_SetConfig+0x29c>
 8005124:	2300      	movs	r3, #0
 8005126:	76fb      	strb	r3, [r7, #27]
 8005128:	e00e      	b.n	8005148 <UART_SetConfig+0x2a8>
 800512a:	2302      	movs	r3, #2
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e00b      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005130:	2304      	movs	r3, #4
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e008      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005136:	2308      	movs	r3, #8
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e005      	b.n	8005148 <UART_SetConfig+0x2a8>
 800513c:	2310      	movs	r3, #16
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	bf00      	nop
 8005142:	e001      	b.n	8005148 <UART_SetConfig+0x2a8>
 8005144:	2310      	movs	r3, #16
 8005146:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <UART_SetConfig+0x300>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f040 80a1 	bne.w	8005296 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005154:	7efb      	ldrb	r3, [r7, #27]
 8005156:	2b08      	cmp	r3, #8
 8005158:	d836      	bhi.n	80051c8 <UART_SetConfig+0x328>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <UART_SetConfig+0x2c0>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005185 	.word	0x08005185
 8005164:	080051c9 	.word	0x080051c9
 8005168:	0800518d 	.word	0x0800518d
 800516c:	080051c9 	.word	0x080051c9
 8005170:	08005193 	.word	0x08005193
 8005174:	080051c9 	.word	0x080051c9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051c1 	.word	0x080051c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fe fcaa 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 8005188:	6178      	str	r0, [r7, #20]
        break;
 800518a:	e022      	b.n	80051d2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <UART_SetConfig+0x31c>)
 800518e:	617b      	str	r3, [r7, #20]
        break;
 8005190:	e01f      	b.n	80051d2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fc0d 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8005196:	6178      	str	r0, [r7, #20]
        break;
 8005198:	e01b      	b.n	80051d2 <UART_SetConfig+0x332>
 800519a:	bf00      	nop
 800519c:	cfff69f3 	.word	0xcfff69f3
 80051a0:	40008000 	.word	0x40008000
 80051a4:	40013800 	.word	0x40013800
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40004400 	.word	0x40004400
 80051b0:	40004800 	.word	0x40004800
 80051b4:	40004c00 	.word	0x40004c00
 80051b8:	40005000 	.word	0x40005000
 80051bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c4:	617b      	str	r3, [r7, #20]
        break;
 80051c6:	e004      	b.n	80051d2 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	76bb      	strb	r3, [r7, #26]
        break;
 80051d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 811d 	beq.w	8005414 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	4a97      	ldr	r2, [pc, #604]	; (800543c <UART_SetConfig+0x59c>)
 80051e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e4:	461a      	mov	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ec:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d305      	bcc.n	800520a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	d902      	bls.n	8005210 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	76bb      	strb	r3, [r7, #26]
 800520e:	e101      	b.n	8005414 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4618      	mov	r0, r3
 8005214:	f04f 0100 	mov.w	r1, #0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	4a87      	ldr	r2, [pc, #540]	; (800543c <UART_SetConfig+0x59c>)
 800521e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005222:	b29b      	uxth	r3, r3
 8005224:	f04f 0400 	mov.w	r4, #0
 8005228:	461a      	mov	r2, r3
 800522a:	4623      	mov	r3, r4
 800522c:	f7fb f838 	bl	80002a0 <__aeabi_uldivmod>
 8005230:	4603      	mov	r3, r0
 8005232:	460c      	mov	r4, r1
 8005234:	4619      	mov	r1, r3
 8005236:	4622      	mov	r2, r4
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	0214      	lsls	r4, r2, #8
 8005242:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005246:	020b      	lsls	r3, r1, #8
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	0852      	lsrs	r2, r2, #1
 800524e:	4611      	mov	r1, r2
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	eb13 0b01 	adds.w	fp, r3, r1
 8005258:	eb44 0c02 	adc.w	ip, r4, r2
 800525c:	4658      	mov	r0, fp
 800525e:	4661      	mov	r1, ip
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f04f 0400 	mov.w	r4, #0
 8005268:	461a      	mov	r2, r3
 800526a:	4623      	mov	r3, r4
 800526c:	f7fb f818 	bl	80002a0 <__aeabi_uldivmod>
 8005270:	4603      	mov	r3, r0
 8005272:	460c      	mov	r4, r1
 8005274:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527c:	d308      	bcc.n	8005290 <UART_SetConfig+0x3f0>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005284:	d204      	bcs.n	8005290 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e0c1      	b.n	8005414 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	76bb      	strb	r3, [r7, #26]
 8005294:	e0be      	b.n	8005414 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800529e:	d164      	bne.n	800536a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80052a0:	7efb      	ldrb	r3, [r7, #27]
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d827      	bhi.n	80052f6 <UART_SetConfig+0x456>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x40c>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fe fc04 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 80052d4:	6178      	str	r0, [r7, #20]
        break;
 80052d6:	e013      	b.n	8005300 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fe fc16 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 80052dc:	6178      	str	r0, [r7, #20]
        break;
 80052de:	e00f      	b.n	8005300 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <UART_SetConfig+0x5a0>)
 80052e2:	617b      	str	r3, [r7, #20]
        break;
 80052e4:	e00c      	b.n	8005300 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fe fb63 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 80052ea:	6178      	str	r0, [r7, #20]
        break;
 80052ec:	e008      	b.n	8005300 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	617b      	str	r3, [r7, #20]
        break;
 80052f4:	e004      	b.n	8005300 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	76bb      	strb	r3, [r7, #26]
        break;
 80052fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 8086 	beq.w	8005414 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530c:	4a4b      	ldr	r2, [pc, #300]	; (800543c <UART_SetConfig+0x59c>)
 800530e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005312:	461a      	mov	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fbb3 f3f2 	udiv	r3, r3, r2
 800531a:	005a      	lsls	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	b29b      	uxth	r3, r3
 800532e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d916      	bls.n	8005364 <UART_SetConfig+0x4c4>
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533c:	d212      	bcs.n	8005364 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	b29b      	uxth	r3, r3
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	b29a      	uxth	r2, r3
 8005354:	89fb      	ldrh	r3, [r7, #14]
 8005356:	4313      	orrs	r3, r2
 8005358:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	89fa      	ldrh	r2, [r7, #14]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	e057      	b.n	8005414 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	76bb      	strb	r3, [r7, #26]
 8005368:	e054      	b.n	8005414 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800536a:	7efb      	ldrb	r3, [r7, #27]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d828      	bhi.n	80053c2 <UART_SetConfig+0x522>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x4d8>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053b3 	.word	0x080053b3
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe fb9e 	bl	8003adc <HAL_RCC_GetPCLK1Freq>
 80053a0:	6178      	str	r0, [r7, #20]
        break;
 80053a2:	e013      	b.n	80053cc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a4:	f7fe fbb0 	bl	8003b08 <HAL_RCC_GetPCLK2Freq>
 80053a8:	6178      	str	r0, [r7, #20]
        break;
 80053aa:	e00f      	b.n	80053cc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b24      	ldr	r3, [pc, #144]	; (8005440 <UART_SetConfig+0x5a0>)
 80053ae:	617b      	str	r3, [r7, #20]
        break;
 80053b0:	e00c      	b.n	80053cc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fe fafd 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 80053b6:	6178      	str	r0, [r7, #20]
        break;
 80053b8:	e008      	b.n	80053cc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053be:	617b      	str	r3, [r7, #20]
        break;
 80053c0:	e004      	b.n	80053cc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	76bb      	strb	r3, [r7, #26]
        break;
 80053ca:	bf00      	nop
    }

    if (pclk != 0U)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d020      	beq.n	8005414 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <UART_SetConfig+0x59c>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	461a      	mov	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	441a      	add	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d908      	bls.n	8005410 <UART_SetConfig+0x570>
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d204      	bcs.n	8005410 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	e001      	b.n	8005414 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005430:	7ebb      	ldrb	r3, [r7, #26]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800543c:	08007778 	.word	0x08007778
 8005440:	00f42400 	.word	0x00f42400

08005444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01a      	beq.n	800555a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005542:	d10a      	bne.n	800555a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005598:	f7fc fa8e 	bl	8001ab8 <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d10e      	bne.n	80055ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f82c 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e022      	b.n	8005610 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d10e      	bne.n	80055f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f816 	bl	8005618 <UART_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e00c      	b.n	8005610 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005628:	e062      	b.n	80056f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005630:	d05e      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fc fa41 	bl	8001ab8 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <UART_WaitOnFlagUntilTimeout+0x30>
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11d      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005656:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e045      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02e      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a0:	d126      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056ba:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e00f      	b.n	8005710 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	429a      	cmp	r2, r3
 800570c:	d08d      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_UARTEx_DisableFifoMode+0x16>
 800572a:	2302      	movs	r3, #2
 800572c:	e027      	b.n	800577e <HAL_UARTEx_DisableFifoMode+0x66>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2224      	movs	r2, #36	; 0x24
 800573a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800575c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800579e:	2302      	movs	r3, #2
 80057a0:	e02d      	b.n	80057fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2224      	movs	r2, #36	; 0x24
 80057ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0201 	bic.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f850 	bl	8005884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800581a:	2302      	movs	r3, #2
 800581c:	e02d      	b.n	800587a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2224      	movs	r2, #36	; 0x24
 800582a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f812 	bl	8005884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800588c:	4a2f      	ldr	r2, [pc, #188]	; (800594c <UARTEx_SetNbDataToProcess+0xc8>)
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005896:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <UARTEx_SetNbDataToProcess+0xcc>)
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058c0:	e03d      	b.n	800593e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058c2:	2308      	movs	r3, #8
 80058c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058c6:	2308      	movs	r3, #8
 80058c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	0e5b      	lsrs	r3, r3, #25
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	0f5b      	lsrs	r3, r3, #29
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80058ea:	7fbb      	ldrb	r3, [r7, #30]
 80058ec:	7f3a      	ldrb	r2, [r7, #28]
 80058ee:	f107 0120 	add.w	r1, r7, #32
 80058f2:	440a      	add	r2, r1
 80058f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	7f3a      	ldrb	r2, [r7, #28]
 80058fe:	f107 0120 	add.w	r1, r7, #32
 8005902:	440a      	add	r2, r1
 8005904:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005908:	fb93 f3f2 	sdiv	r3, r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	7f7a      	ldrb	r2, [r7, #29]
 8005918:	f107 0120 	add.w	r1, r7, #32
 800591c:	440a      	add	r2, r1
 800591e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	7f7a      	ldrb	r2, [r7, #29]
 8005928:	f107 0120 	add.w	r1, r7, #32
 800592c:	440a      	add	r2, r1
 800592e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005932:	fb93 f3f2 	sdiv	r3, r3, r2
 8005936:	b29a      	uxth	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800593e:	bf00      	nop
 8005940:	3724      	adds	r7, #36	; 0x24
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	08007718 	.word	0x08007718
 8005950:	08007720 	.word	0x08007720

08005954 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005966:	2b84      	cmp	r3, #132	; 0x84
 8005968:	d005      	beq.n	8005976 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800596a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	3303      	adds	r3, #3
 8005974:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005988:	f000 fada 	bl	8005f40 <vTaskStartScheduler>
  
  return osOK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	bd80      	pop	{r7, pc}

08005992 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005994:	b089      	sub	sp, #36	; 0x24
 8005996:	af04      	add	r7, sp, #16
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d020      	beq.n	80059e6 <osThreadCreate+0x54>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01c      	beq.n	80059e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685c      	ldr	r4, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681d      	ldr	r5, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691e      	ldr	r6, [r3, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ffc8 	bl	8005954 <makeFreeRtosPriority>
 80059c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059ce:	9202      	str	r2, [sp, #8]
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	9100      	str	r1, [sp, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	4632      	mov	r2, r6
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f8ed 	bl	8005bba <xTaskCreateStatic>
 80059e0:	4603      	mov	r3, r0
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	e01c      	b.n	8005a20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685c      	ldr	r4, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059f2:	b29e      	uxth	r6, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ffaa 	bl	8005954 <makeFreeRtosPriority>
 8005a00:	4602      	mov	r2, r0
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	9200      	str	r2, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 f92c 	bl	8005c6e <xTaskCreate>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <osDelay+0x16>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e000      	b.n	8005a42 <osDelay+0x18>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fa48 	bl	8005ed8 <vTaskDelay>
  
  return osOK;
 8005a48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f103 0208 	add.w	r2, r3, #8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f103 0208 	add.w	r2, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f103 0208 	add.w	r2, r3, #8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	601a      	str	r2, [r3, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0a:	d103      	bne.n	8005b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e00c      	b.n	8005b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3308      	adds	r3, #8
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e002      	b.n	8005b22 <vListInsert+0x2e>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d2f6      	bcs.n	8005b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6892      	ldr	r2, [r2, #8]
 8005b7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6852      	ldr	r2, [r2, #4]
 8005b86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d103      	bne.n	8005b9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08e      	sub	sp, #56	; 0x38
 8005bbe:	af04      	add	r7, sp, #16
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	623b      	str	r3, [r7, #32]
 8005be0:	e7fe      	b.n	8005be0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <xTaskCreateStatic+0x42>
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e7fe      	b.n	8005bfa <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bfc:	2354      	movs	r3, #84	; 0x54
 8005bfe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b54      	cmp	r3, #84	; 0x54
 8005c04:	d009      	beq.n	8005c1a <xTaskCreateStatic+0x60>
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e7fe      	b.n	8005c18 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01e      	beq.n	8005c60 <xTaskCreateStatic+0xa6>
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01b      	beq.n	8005c60 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2202      	movs	r2, #2
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	f107 0314 	add.w	r3, r7, #20
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f850 	bl	8005cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c5a:	f000 f8d3 	bl	8005e04 <prvAddNewTaskToReadyList>
 8005c5e:	e001      	b.n	8005c64 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08c      	sub	sp, #48	; 0x30
 8005c72:	af04      	add	r7, sp, #16
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 feae 	bl	80069e4 <pvPortMalloc>
 8005c88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c90:	2054      	movs	r0, #84	; 0x54
 8005c92:	f000 fea7 	bl	80069e4 <pvPortMalloc>
 8005c96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ca4:	e005      	b.n	8005cb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f000 ff5e 	bl	8006b68 <vPortFree>
 8005cac:	e001      	b.n	8005cb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d017      	beq.n	8005ce8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9303      	str	r3, [sp, #12]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	9302      	str	r3, [sp, #8]
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f80e 	bl	8005cf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cdc:	69f8      	ldr	r0, [r7, #28]
 8005cde:	f000 f891 	bl	8005e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	e002      	b.n	8005cee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cee:	69bb      	ldr	r3, [r7, #24]
	}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d10:	3b01      	subs	r3, #1
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <prvInitialiseNewTask+0x46>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e7fe      	b.n	8005d3c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01f      	beq.n	8005d84 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	e012      	b.n	8005d70 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	7819      	ldrb	r1, [r3, #0]
 8005d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	3334      	adds	r3, #52	; 0x34
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d006      	beq.n	8005d78 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	d9e9      	bls.n	8005d4a <prvInitialiseNewTask+0x52>
 8005d76:	e000      	b.n	8005d7a <prvInitialiseNewTask+0x82>
			{
				break;
 8005d78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d82:	e003      	b.n	8005d8c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2b06      	cmp	r3, #6
 8005d90:	d901      	bls.n	8005d96 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d92:	2306      	movs	r3, #6
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fe70 	bl	8005a92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	3318      	adds	r3, #24
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fe6b 	bl	8005a92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	f1c3 0207 	rsb	r2, r3, #7
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	69b8      	ldr	r0, [r7, #24]
 8005de6:	f000 fbfd 	bl	80065e4 <pxPortInitialiseStack>
 8005dea:	4602      	mov	r2, r0
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dfc:	bf00      	nop
 8005dfe:	3720      	adds	r7, #32
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e0c:	f000 fd0e 	bl	800682c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e10:	4b2a      	ldr	r3, [pc, #168]	; (8005ebc <prvAddNewTaskToReadyList+0xb8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <prvAddNewTaskToReadyList+0xb8>)
 8005e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <prvAddNewTaskToReadyList+0xbc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d109      	bne.n	8005e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e22:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <prvAddNewTaskToReadyList+0xbc>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e28:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <prvAddNewTaskToReadyList+0xb8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d110      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e30:	f000 fab8 	bl	80063a4 <prvInitialiseTaskLists>
 8005e34:	e00d      	b.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e36:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <prvAddNewTaskToReadyList+0xc0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e3e:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <prvAddNewTaskToReadyList+0xbc>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d802      	bhi.n	8005e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <prvAddNewTaskToReadyList+0xbc>)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <prvAddNewTaskToReadyList+0xc4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <prvAddNewTaskToReadyList+0xc4>)
 8005e5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	2201      	movs	r2, #1
 8005e62:	409a      	lsls	r2, r3
 8005e64:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <prvAddNewTaskToReadyList+0xc8>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <prvAddNewTaskToReadyList+0xcc>)
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	4610      	mov	r0, r2
 8005e86:	f7ff fe11 	bl	8005aac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e8a:	f000 fcfd 	bl	8006888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <prvAddNewTaskToReadyList+0xc0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00e      	beq.n	8005eb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <prvAddNewTaskToReadyList+0xbc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d207      	bcs.n	8005eb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <prvAddNewTaskToReadyList+0xd0>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000458 	.word	0x20000458
 8005ec0:	20000358 	.word	0x20000358
 8005ec4:	20000464 	.word	0x20000464
 8005ec8:	20000474 	.word	0x20000474
 8005ecc:	20000460 	.word	0x20000460
 8005ed0:	2000035c 	.word	0x2000035c
 8005ed4:	e000ed04 	.word	0xe000ed04

08005ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eea:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <vTaskDelay+0x60>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <vTaskDelay+0x2e>
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	e7fe      	b.n	8005f04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005f06:	f000 f879 	bl	8005ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb03 	bl	8006518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f12:	f000 f881 	bl	8006018 <xTaskResumeAll>
 8005f16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d107      	bne.n	8005f2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <vTaskDelay+0x64>)
 8005f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000480 	.word	0x20000480
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f4e:	463a      	mov	r2, r7
 8005f50:	1d39      	adds	r1, r7, #4
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa fb22 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	9202      	str	r2, [sp, #8]
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	460a      	mov	r2, r1
 8005f6e:	491d      	ldr	r1, [pc, #116]	; (8005fe4 <vTaskStartScheduler+0xa4>)
 8005f70:	481d      	ldr	r0, [pc, #116]	; (8005fe8 <vTaskStartScheduler+0xa8>)
 8005f72:	f7ff fe22 	bl	8005bba <xTaskCreateStatic>
 8005f76:	4602      	mov	r2, r0
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <vTaskStartScheduler+0xac>)
 8005f7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <vTaskStartScheduler+0xac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e001      	b.n	8005f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d115      	bne.n	8005fc0 <vTaskStartScheduler+0x80>
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <vTaskStartScheduler+0xb0>)
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <vTaskStartScheduler+0xb4>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <vTaskStartScheduler+0xb8>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fba:	f000 fb99 	bl	80066f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fbe:	e00d      	b.n	8005fdc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc6:	d109      	bne.n	8005fdc <vTaskStartScheduler+0x9c>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e7fe      	b.n	8005fda <vTaskStartScheduler+0x9a>
}
 8005fdc:	bf00      	nop
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08007728 	.word	0x08007728
 8005fe8:	08006375 	.word	0x08006375
 8005fec:	2000047c 	.word	0x2000047c
 8005ff0:	20000478 	.word	0x20000478
 8005ff4:	20000464 	.word	0x20000464
 8005ff8:	2000045c 	.word	0x2000045c

08005ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <vTaskSuspendAll+0x18>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a03      	ldr	r2, [pc, #12]	; (8006014 <vTaskSuspendAll+0x18>)
 8006008:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800600a:	bf00      	nop
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000480 	.word	0x20000480

08006018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006026:	4b41      	ldr	r3, [pc, #260]	; (800612c <xTaskResumeAll+0x114>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <xTaskResumeAll+0x2a>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	e7fe      	b.n	8006040 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006042:	f000 fbf3 	bl	800682c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <xTaskResumeAll+0x114>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3b01      	subs	r3, #1
 800604c:	4a37      	ldr	r2, [pc, #220]	; (800612c <xTaskResumeAll+0x114>)
 800604e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006050:	4b36      	ldr	r3, [pc, #216]	; (800612c <xTaskResumeAll+0x114>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d161      	bne.n	800611c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006058:	4b35      	ldr	r3, [pc, #212]	; (8006130 <xTaskResumeAll+0x118>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d05d      	beq.n	800611c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006060:	e02e      	b.n	80060c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006062:	4b34      	ldr	r3, [pc, #208]	; (8006134 <xTaskResumeAll+0x11c>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	3318      	adds	r3, #24
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fd79 	bl	8005b66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3304      	adds	r3, #4
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fd74 	bl	8005b66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	2201      	movs	r2, #1
 8006084:	409a      	lsls	r2, r3
 8006086:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <xTaskResumeAll+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4313      	orrs	r3, r2
 800608c:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <xTaskResumeAll+0x120>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4a27      	ldr	r2, [pc, #156]	; (800613c <xTaskResumeAll+0x124>)
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7ff fd00 	bl	8005aac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4b23      	ldr	r3, [pc, #140]	; (8006140 <xTaskResumeAll+0x128>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <xTaskResumeAll+0x12c>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c0:	4b1c      	ldr	r3, [pc, #112]	; (8006134 <xTaskResumeAll+0x11c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1cc      	bne.n	8006062 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060ce:	f000 fa03 	bl	80064d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060d2:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <xTaskResumeAll+0x130>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d010      	beq.n	8006100 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060de:	f000 f837 	bl	8006150 <xTaskIncrementTick>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80060e8:	4b16      	ldr	r3, [pc, #88]	; (8006144 <xTaskResumeAll+0x12c>)
 80060ea:	2201      	movs	r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f1      	bne.n	80060de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <xTaskResumeAll+0x130>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <xTaskResumeAll+0x12c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <xTaskResumeAll+0x134>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800611c:	f000 fbb4 	bl	8006888 <vPortExitCritical>

	return xAlreadyYielded;
 8006120:	68bb      	ldr	r3, [r7, #8]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000480 	.word	0x20000480
 8006130:	20000458 	.word	0x20000458
 8006134:	20000418 	.word	0x20000418
 8006138:	20000460 	.word	0x20000460
 800613c:	2000035c 	.word	0x2000035c
 8006140:	20000358 	.word	0x20000358
 8006144:	2000046c 	.word	0x2000046c
 8006148:	20000468 	.word	0x20000468
 800614c:	e000ed04 	.word	0xe000ed04

08006150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615a:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <xTaskIncrementTick+0x144>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8087 	bne.w	8006272 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006164:	4b4c      	ldr	r3, [pc, #304]	; (8006298 <xTaskIncrementTick+0x148>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800616c:	4a4a      	ldr	r2, [pc, #296]	; (8006298 <xTaskIncrementTick+0x148>)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11f      	bne.n	80061b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006178:	4b48      	ldr	r3, [pc, #288]	; (800629c <xTaskIncrementTick+0x14c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <xTaskIncrementTick+0x46>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	e7fe      	b.n	8006194 <xTaskIncrementTick+0x44>
 8006196:	4b41      	ldr	r3, [pc, #260]	; (800629c <xTaskIncrementTick+0x14c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <xTaskIncrementTick+0x150>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a3e      	ldr	r2, [pc, #248]	; (800629c <xTaskIncrementTick+0x14c>)
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4a3e      	ldr	r2, [pc, #248]	; (80062a0 <xTaskIncrementTick+0x150>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	4b3e      	ldr	r3, [pc, #248]	; (80062a4 <xTaskIncrementTick+0x154>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	4a3c      	ldr	r2, [pc, #240]	; (80062a4 <xTaskIncrementTick+0x154>)
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	f000 f990 	bl	80064d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061b8:	4b3b      	ldr	r3, [pc, #236]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d348      	bcc.n	8006254 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c2:	4b36      	ldr	r3, [pc, #216]	; (800629c <xTaskIncrementTick+0x14c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d104      	bne.n	80061d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d2:	601a      	str	r2, [r3, #0]
					break;
 80061d4:	e03e      	b.n	8006254 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b31      	ldr	r3, [pc, #196]	; (800629c <xTaskIncrementTick+0x14c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d203      	bcs.n	80061f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061ee:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <xTaskIncrementTick+0x158>)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061f4:	e02e      	b.n	8006254 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fcb3 	bl	8005b66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	3318      	adds	r3, #24
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fcaa 	bl	8005b66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <xTaskIncrementTick+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4313      	orrs	r3, r2
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <xTaskIncrementTick+0x15c>)
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <xTaskIncrementTick+0x160>)
 8006232:	441a      	add	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7ff fc36 	bl	8005aac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <xTaskIncrementTick+0x164>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	429a      	cmp	r2, r3
 800624c:	d3b9      	bcc.n	80061c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800624e:	2301      	movs	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006252:	e7b6      	b.n	80061c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006254:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <xTaskIncrementTick+0x164>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	4915      	ldr	r1, [pc, #84]	; (80062b0 <xTaskIncrementTick+0x160>)
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d907      	bls.n	800627c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e004      	b.n	800627c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <xTaskIncrementTick+0x168>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <xTaskIncrementTick+0x168>)
 800627a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <xTaskIncrementTick+0x16c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006288:	697b      	ldr	r3, [r7, #20]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000480 	.word	0x20000480
 8006298:	2000045c 	.word	0x2000045c
 800629c:	20000410 	.word	0x20000410
 80062a0:	20000414 	.word	0x20000414
 80062a4:	20000470 	.word	0x20000470
 80062a8:	20000478 	.word	0x20000478
 80062ac:	20000460 	.word	0x20000460
 80062b0:	2000035c 	.word	0x2000035c
 80062b4:	20000358 	.word	0x20000358
 80062b8:	20000468 	.word	0x20000468
 80062bc:	2000046c 	.word	0x2000046c

080062c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062c6:	4b26      	ldr	r3, [pc, #152]	; (8006360 <vTaskSwitchContext+0xa0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ce:	4b25      	ldr	r3, [pc, #148]	; (8006364 <vTaskSwitchContext+0xa4>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062d4:	e03e      	b.n	8006354 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80062d6:	4b23      	ldr	r3, [pc, #140]	; (8006364 <vTaskSwitchContext+0xa4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062dc:	4b22      	ldr	r3, [pc, #136]	; (8006368 <vTaskSwitchContext+0xa8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	fab3 f383 	clz	r3, r3
 80062e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	f1c3 031f 	rsb	r3, r3, #31
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	491e      	ldr	r1, [pc, #120]	; (800636c <vTaskSwitchContext+0xac>)
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e7fe      	b.n	8006318 <vTaskSwitchContext+0x58>
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4a11      	ldr	r2, [pc, #68]	; (800636c <vTaskSwitchContext+0xac>)
 8006326:	4413      	add	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	605a      	str	r2, [r3, #4]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	3308      	adds	r3, #8
 800633c:	429a      	cmp	r2, r3
 800633e:	d104      	bne.n	800634a <vTaskSwitchContext+0x8a>
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4a07      	ldr	r2, [pc, #28]	; (8006370 <vTaskSwitchContext+0xb0>)
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	20000480 	.word	0x20000480
 8006364:	2000046c 	.word	0x2000046c
 8006368:	20000460 	.word	0x20000460
 800636c:	2000035c 	.word	0x2000035c
 8006370:	20000358 	.word	0x20000358

08006374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800637c:	f000 f852 	bl	8006424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <prvIdleTask+0x28>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d9f9      	bls.n	800637c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <prvIdleTask+0x2c>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006398:	e7f0      	b.n	800637c <prvIdleTask+0x8>
 800639a:	bf00      	nop
 800639c:	2000035c 	.word	0x2000035c
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	e00c      	b.n	80063ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <prvInitialiseTaskLists+0x60>)
 80063bc:	4413      	add	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fb47 	bl	8005a52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b06      	cmp	r3, #6
 80063ce:	d9ef      	bls.n	80063b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063d0:	480d      	ldr	r0, [pc, #52]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063d2:	f7ff fb3e 	bl	8005a52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063d6:	480d      	ldr	r0, [pc, #52]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063d8:	f7ff fb3b 	bl	8005a52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80063dc:	480c      	ldr	r0, [pc, #48]	; (8006410 <prvInitialiseTaskLists+0x6c>)
 80063de:	f7ff fb38 	bl	8005a52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063e2:	480c      	ldr	r0, [pc, #48]	; (8006414 <prvInitialiseTaskLists+0x70>)
 80063e4:	f7ff fb35 	bl	8005a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063e8:	480b      	ldr	r0, [pc, #44]	; (8006418 <prvInitialiseTaskLists+0x74>)
 80063ea:	f7ff fb32 	bl	8005a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <prvInitialiseTaskLists+0x78>)
 80063f0:	4a05      	ldr	r2, [pc, #20]	; (8006408 <prvInitialiseTaskLists+0x64>)
 80063f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvInitialiseTaskLists+0x7c>)
 80063f6:	4a05      	ldr	r2, [pc, #20]	; (800640c <prvInitialiseTaskLists+0x68>)
 80063f8:	601a      	str	r2, [r3, #0]
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2000035c 	.word	0x2000035c
 8006408:	200003e8 	.word	0x200003e8
 800640c:	200003fc 	.word	0x200003fc
 8006410:	20000418 	.word	0x20000418
 8006414:	2000042c 	.word	0x2000042c
 8006418:	20000444 	.word	0x20000444
 800641c:	20000410 	.word	0x20000410
 8006420:	20000414 	.word	0x20000414

08006424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800642a:	e019      	b.n	8006460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800642c:	f000 f9fe 	bl	800682c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006430:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <prvCheckTasksWaitingTermination+0x4c>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fb92 	bl	8005b66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3b01      	subs	r3, #1
 8006448:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <prvCheckTasksWaitingTermination+0x50>)
 800644a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3b01      	subs	r3, #1
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006456:	f000 fa17 	bl	8006888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f80e 	bl	800647c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <prvCheckTasksWaitingTermination+0x54>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e1      	bne.n	800642c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000042c 	.word	0x2000042c
 8006474:	20000458 	.word	0x20000458
 8006478:	20000440 	.word	0x20000440

0800647c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800648a:	2b00      	cmp	r3, #0
 800648c:	d108      	bne.n	80064a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fb68 	bl	8006b68 <vPortFree>
				vPortFree( pxTCB );
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb65 	bl	8006b68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800649e:	e017      	b.n	80064d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d103      	bne.n	80064b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fb5c 	bl	8006b68 <vPortFree>
	}
 80064b0:	e00e      	b.n	80064d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d009      	beq.n	80064d0 <prvDeleteTCB+0x54>
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e7fe      	b.n	80064ce <prvDeleteTCB+0x52>
	}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <prvResetNextTaskUnblockTime+0x38>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvResetNextTaskUnblockTime+0x3c>)
 80064ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064f0:	e008      	b.n	8006504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvResetNextTaskUnblockTime+0x38>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <prvResetNextTaskUnblockTime+0x3c>)
 8006502:	6013      	str	r3, [r2, #0]
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	20000410 	.word	0x20000410
 8006514:	20000478 	.word	0x20000478

08006518 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006522:	4b29      	ldr	r3, [pc, #164]	; (80065c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006528:	4b28      	ldr	r3, [pc, #160]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fb19 	bl	8005b66 <uxListRemove>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10b      	bne.n	8006552 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	2201      	movs	r2, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4013      	ands	r3, r2
 800654e:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006550:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006558:	d10a      	bne.n	8006570 <prvAddCurrentTaskToDelayedList+0x58>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d007      	beq.n	8006570 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3304      	adds	r3, #4
 8006566:	4619      	mov	r1, r3
 8006568:	481a      	ldr	r0, [pc, #104]	; (80065d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800656a:	f7ff fa9f 	bl	8005aac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800656e:	e026      	b.n	80065be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006578:	4b14      	ldr	r3, [pc, #80]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	429a      	cmp	r2, r3
 8006586:	d209      	bcs.n	800659c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f7ff faad 	bl	8005af4 <vListInsert>
}
 800659a:	e010      	b.n	80065be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3304      	adds	r3, #4
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7ff faa3 	bl	8005af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d202      	bcs.n	80065be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6013      	str	r3, [r2, #0]
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	2000045c 	.word	0x2000045c
 80065cc:	20000358 	.word	0x20000358
 80065d0:	20000460 	.word	0x20000460
 80065d4:	20000444 	.word	0x20000444
 80065d8:	20000414 	.word	0x20000414
 80065dc:	20000410 	.word	0x20000410
 80065e0:	20000478 	.word	0x20000478

080065e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3b04      	subs	r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3b04      	subs	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006614:	4a0c      	ldr	r2, [pc, #48]	; (8006648 <pxPortInitialiseStack+0x64>)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3b14      	subs	r3, #20
 800661e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f06f 0202 	mvn.w	r2, #2
 8006632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3b20      	subs	r3, #32
 8006638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	0800664d 	.word	0x0800664d

0800664c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <prvTaskExitError+0x50>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800665e:	d009      	beq.n	8006674 <prvTaskExitError+0x28>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e7fe      	b.n	8006672 <prvTaskExitError+0x26>
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006686:	bf00      	nop
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0fc      	beq.n	8006688 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000068 	.word	0x20000068

080066a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <pxCurrentTCBConst2>)
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	f380 8809 	msr	PSP, r0
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	4770      	bx	lr
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst2>:
 80066c0:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066c8:	4808      	ldr	r0, [pc, #32]	; (80066ec <prvPortStartFirstTask+0x24>)
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	6800      	ldr	r0, [r0, #0]
 80066ce:	f380 8808 	msr	MSP, r0
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8814 	msr	CONTROL, r0
 80066da:	b662      	cpsie	i
 80066dc:	b661      	cpsie	f
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	df00      	svc	0
 80066e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ea:	bf00      	nop
 80066ec:	e000ed08 	.word	0xe000ed08

080066f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066f6:	4b44      	ldr	r3, [pc, #272]	; (8006808 <xPortStartScheduler+0x118>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a44      	ldr	r2, [pc, #272]	; (800680c <xPortStartScheduler+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <xPortStartScheduler+0x24>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	e7fe      	b.n	8006712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006714:	4b3c      	ldr	r3, [pc, #240]	; (8006808 <xPortStartScheduler+0x118>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a3d      	ldr	r2, [pc, #244]	; (8006810 <xPortStartScheduler+0x120>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d109      	bne.n	8006732 <xPortStartScheduler+0x42>
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e7fe      	b.n	8006730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006732:	4b38      	ldr	r3, [pc, #224]	; (8006814 <xPortStartScheduler+0x124>)
 8006734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006754:	b2da      	uxtb	r2, r3
 8006756:	4b30      	ldr	r3, [pc, #192]	; (8006818 <xPortStartScheduler+0x128>)
 8006758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800675a:	4b30      	ldr	r3, [pc, #192]	; (800681c <xPortStartScheduler+0x12c>)
 800675c:	2207      	movs	r2, #7
 800675e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006760:	e009      	b.n	8006776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <xPortStartScheduler+0x12c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	4a2c      	ldr	r2, [pc, #176]	; (800681c <xPortStartScheduler+0x12c>)
 800676a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677e:	2b80      	cmp	r3, #128	; 0x80
 8006780:	d0ef      	beq.n	8006762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006782:	4b26      	ldr	r3, [pc, #152]	; (800681c <xPortStartScheduler+0x12c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f1c3 0307 	rsb	r3, r3, #7
 800678a:	2b04      	cmp	r3, #4
 800678c:	d009      	beq.n	80067a2 <xPortStartScheduler+0xb2>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	e7fe      	b.n	80067a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067a2:	4b1e      	ldr	r3, [pc, #120]	; (800681c <xPortStartScheduler+0x12c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	4a1c      	ldr	r2, [pc, #112]	; (800681c <xPortStartScheduler+0x12c>)
 80067aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	; (800681c <xPortStartScheduler+0x12c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <xPortStartScheduler+0x12c>)
 80067b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <xPortStartScheduler+0x130>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <xPortStartScheduler+0x130>)
 80067c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067cc:	4b14      	ldr	r3, [pc, #80]	; (8006820 <xPortStartScheduler+0x130>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <xPortStartScheduler+0x130>)
 80067d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067d8:	f000 f8d6 	bl	8006988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067dc:	4b11      	ldr	r3, [pc, #68]	; (8006824 <xPortStartScheduler+0x134>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067e2:	f000 f8f5 	bl	80069d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <xPortStartScheduler+0x138>)
 80067ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067f2:	f7ff ff69 	bl	80066c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067f6:	f7ff fd63 	bl	80062c0 <vTaskSwitchContext>
	prvTaskExitError();
 80067fa:	f7ff ff27 	bl	800664c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	e000ed00 	.word	0xe000ed00
 800680c:	410fc271 	.word	0x410fc271
 8006810:	410fc270 	.word	0x410fc270
 8006814:	e000e400 	.word	0xe000e400
 8006818:	20000484 	.word	0x20000484
 800681c:	20000488 	.word	0x20000488
 8006820:	e000ed20 	.word	0xe000ed20
 8006824:	20000068 	.word	0x20000068
 8006828:	e000ef34 	.word	0xe000ef34

0800682c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006844:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <vPortEnterCritical+0x54>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <vPortEnterCritical+0x54>)
 800684c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <vPortEnterCritical+0x54>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d10e      	bne.n	8006874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <vPortEnterCritical+0x58>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <vPortEnterCritical+0x48>
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	603b      	str	r3, [r7, #0]
 8006872:	e7fe      	b.n	8006872 <vPortEnterCritical+0x46>
	}
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000068 	.word	0x20000068
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <vPortExitCritical+0x4c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <vPortExitCritical+0x22>
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e7fe      	b.n	80068a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80068aa:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <vPortExitCritical+0x4c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <vPortExitCritical+0x4c>)
 80068b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068b4:	4b07      	ldr	r3, [pc, #28]	; (80068d4 <vPortExitCritical+0x4c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <vPortExitCritical+0x3e>
 80068bc:	2300      	movs	r3, #0
 80068be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000068 	.word	0x20000068
	...

080068e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068e0:	f3ef 8009 	mrs	r0, PSP
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <pxCurrentTCBConst>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f01e 0f10 	tst.w	lr, #16
 80068f0:	bf08      	it	eq
 80068f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	6010      	str	r0, [r2, #0]
 80068fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006904:	f380 8811 	msr	BASEPRI, r0
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f7ff fcd6 	bl	80062c0 <vTaskSwitchContext>
 8006914:	f04f 0000 	mov.w	r0, #0
 8006918:	f380 8811 	msr	BASEPRI, r0
 800691c:	bc09      	pop	{r0, r3}
 800691e:	6819      	ldr	r1, [r3, #0]
 8006920:	6808      	ldr	r0, [r1, #0]
 8006922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006926:	f01e 0f10 	tst.w	lr, #16
 800692a:	bf08      	it	eq
 800692c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006930:	f380 8809 	msr	PSP, r0
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w

08006940 <pxCurrentTCBConst>:
 8006940:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006960:	f7ff fbf6 	bl	8006150 <xTaskIncrementTick>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <SysTick_Handler+0x3c>)
 800696c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	2300      	movs	r3, #0
 8006974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <vPortSetupTimerInterrupt+0x34>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <vPortSetupTimerInterrupt+0x38>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <vPortSetupTimerInterrupt+0x3c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <vPortSetupTimerInterrupt+0x40>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <vPortSetupTimerInterrupt+0x44>)
 80069a6:	3b01      	subs	r3, #1
 80069a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <vPortSetupTimerInterrupt+0x34>)
 80069ac:	2207      	movs	r2, #7
 80069ae:	601a      	str	r2, [r3, #0]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	e000e010 	.word	0xe000e010
 80069c0:	e000e018 	.word	0xe000e018
 80069c4:	2000005c 	.word	0x2000005c
 80069c8:	10624dd3 	.word	0x10624dd3
 80069cc:	e000e014 	.word	0xe000e014

080069d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069e0 <vPortEnableVFP+0x10>
 80069d4:	6801      	ldr	r1, [r0, #0]
 80069d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069da:	6001      	str	r1, [r0, #0]
 80069dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069de:	bf00      	nop
 80069e0:	e000ed88 	.word	0xe000ed88

080069e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	; 0x28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069f0:	f7ff fb04 	bl	8005ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069f4:	4b57      	ldr	r3, [pc, #348]	; (8006b54 <pvPortMalloc+0x170>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069fc:	f000 f90c 	bl	8006c18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a00:	4b55      	ldr	r3, [pc, #340]	; (8006b58 <pvPortMalloc+0x174>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 808c 	bne.w	8006b26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01c      	beq.n	8006a4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006a14:	2208      	movs	r2, #8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4413      	add	r3, r2
 8006a1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d013      	beq.n	8006a4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f023 0307 	bic.w	r3, r3, #7
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <pvPortMalloc+0x6a>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	e7fe      	b.n	8006a4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d068      	beq.n	8006b26 <pvPortMalloc+0x142>
 8006a54:	4b41      	ldr	r3, [pc, #260]	; (8006b5c <pvPortMalloc+0x178>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d863      	bhi.n	8006b26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a5e:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <pvPortMalloc+0x17c>)
 8006a60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a62:	4b3f      	ldr	r3, [pc, #252]	; (8006b60 <pvPortMalloc+0x17c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a68:	e004      	b.n	8006a74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d903      	bls.n	8006a86 <pvPortMalloc+0xa2>
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f1      	bne.n	8006a6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a86:	4b33      	ldr	r3, [pc, #204]	; (8006b54 <pvPortMalloc+0x170>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d04a      	beq.n	8006b26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2208      	movs	r2, #8
 8006a96:	4413      	add	r3, r2
 8006a98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	2308      	movs	r3, #8
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d91e      	bls.n	8006af0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d009      	beq.n	8006ad8 <pvPortMalloc+0xf4>
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	e7fe      	b.n	8006ad6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aea:	69b8      	ldr	r0, [r7, #24]
 8006aec:	f000 f8f6 	bl	8006cdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006af0:	4b1a      	ldr	r3, [pc, #104]	; (8006b5c <pvPortMalloc+0x178>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <pvPortMalloc+0x178>)
 8006afc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <pvPortMalloc+0x178>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <pvPortMalloc+0x180>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d203      	bcs.n	8006b12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <pvPortMalloc+0x178>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <pvPortMalloc+0x180>)
 8006b10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <pvPortMalloc+0x174>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	2200      	movs	r2, #0
 8006b24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b26:	f7ff fa77 	bl	8006018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d009      	beq.n	8006b48 <pvPortMalloc+0x164>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e7fe      	b.n	8006b46 <pvPortMalloc+0x162>
	return pvReturn;
 8006b48:	69fb      	ldr	r3, [r7, #28]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	2000104c 	.word	0x2000104c
 8006b58:	20001058 	.word	0x20001058
 8006b5c:	20001050 	.word	0x20001050
 8006b60:	20001044 	.word	0x20001044
 8006b64:	20001054 	.word	0x20001054

08006b68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d046      	beq.n	8006c08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	425b      	negs	r3, r3
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <vPortFree+0xa8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <vPortFree+0x42>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e7fe      	b.n	8006ba8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <vPortFree+0x5e>
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	e7fe      	b.n	8006bc4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <vPortFree+0xa8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d019      	beq.n	8006c08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d115      	bne.n	8006c08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortFree+0xa8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	43db      	mvns	r3, r3
 8006be6:	401a      	ands	r2, r3
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bec:	f7ff fa06 	bl	8005ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <vPortFree+0xac>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <vPortFree+0xac>)
 8006bfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfe:	6938      	ldr	r0, [r7, #16]
 8006c00:	f000 f86c 	bl	8006cdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006c04:	f7ff fa08 	bl	8006018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c08:	bf00      	nop
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20001058 	.word	0x20001058
 8006c14:	20001050 	.word	0x20001050

08006c18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c24:	4b27      	ldr	r3, [pc, #156]	; (8006cc4 <prvHeapInit+0xac>)
 8006c26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0307 	bic.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <prvHeapInit+0xac>)
 8006c48:	4413      	add	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c50:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <prvHeapInit+0xb0>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c56:	4b1c      	ldr	r3, [pc, #112]	; (8006cc8 <prvHeapInit+0xb0>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c64:	2208      	movs	r2, #8
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0307 	bic.w	r3, r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <prvHeapInit+0xb4>)
 8006c78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <prvHeapInit+0xb4>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c82:	4b12      	ldr	r3, [pc, #72]	; (8006ccc <prvHeapInit+0xb4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c98:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <prvHeapInit+0xb4>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <prvHeapInit+0xb8>)
 8006ca6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <prvHeapInit+0xbc>)
 8006cae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <prvHeapInit+0xc0>)
 8006cb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	2000048c 	.word	0x2000048c
 8006cc8:	20001044 	.word	0x20001044
 8006ccc:	2000104c 	.word	0x2000104c
 8006cd0:	20001054 	.word	0x20001054
 8006cd4:	20001050 	.word	0x20001050
 8006cd8:	20001058 	.word	0x20001058

08006cdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ce4:	4b28      	ldr	r3, [pc, #160]	; (8006d88 <prvInsertBlockIntoFreeList+0xac>)
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e002      	b.n	8006cf0 <prvInsertBlockIntoFreeList+0x14>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d8f7      	bhi.n	8006cea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	4413      	add	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d108      	bne.n	8006d1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d118      	bne.n	8006d64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b15      	ldr	r3, [pc, #84]	; (8006d8c <prvInsertBlockIntoFreeList+0xb0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d00d      	beq.n	8006d5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	441a      	add	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e008      	b.n	8006d6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <prvInsertBlockIntoFreeList+0xb0>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e003      	b.n	8006d6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d002      	beq.n	8006d7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d7a:	bf00      	nop
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20001044 	.word	0x20001044
 8006d8c:	2000104c 	.word	0x2000104c

08006d90 <__errno>:
 8006d90:	4b01      	ldr	r3, [pc, #4]	; (8006d98 <__errno+0x8>)
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	2000006c 	.word	0x2000006c

08006d9c <__libc_init_array>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	4e0d      	ldr	r6, [pc, #52]	; (8006dd4 <__libc_init_array+0x38>)
 8006da0:	4c0d      	ldr	r4, [pc, #52]	; (8006dd8 <__libc_init_array+0x3c>)
 8006da2:	1ba4      	subs	r4, r4, r6
 8006da4:	10a4      	asrs	r4, r4, #2
 8006da6:	2500      	movs	r5, #0
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d109      	bne.n	8006dc0 <__libc_init_array+0x24>
 8006dac:	4e0b      	ldr	r6, [pc, #44]	; (8006ddc <__libc_init_array+0x40>)
 8006dae:	4c0c      	ldr	r4, [pc, #48]	; (8006de0 <__libc_init_array+0x44>)
 8006db0:	f000 fc28 	bl	8007604 <_init>
 8006db4:	1ba4      	subs	r4, r4, r6
 8006db6:	10a4      	asrs	r4, r4, #2
 8006db8:	2500      	movs	r5, #0
 8006dba:	42a5      	cmp	r5, r4
 8006dbc:	d105      	bne.n	8006dca <__libc_init_array+0x2e>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dc4:	4798      	blx	r3
 8006dc6:	3501      	adds	r5, #1
 8006dc8:	e7ee      	b.n	8006da8 <__libc_init_array+0xc>
 8006dca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dce:	4798      	blx	r3
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	e7f2      	b.n	8006dba <__libc_init_array+0x1e>
 8006dd4:	080077cc 	.word	0x080077cc
 8006dd8:	080077cc 	.word	0x080077cc
 8006ddc:	080077cc 	.word	0x080077cc
 8006de0:	080077d0 	.word	0x080077d0

08006de4 <memcpy>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	1e43      	subs	r3, r0, #1
 8006de8:	440a      	add	r2, r1
 8006dea:	4291      	cmp	r1, r2
 8006dec:	d100      	bne.n	8006df0 <memcpy+0xc>
 8006dee:	bd10      	pop	{r4, pc}
 8006df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006df8:	e7f7      	b.n	8006dea <memcpy+0x6>

08006dfa <memset>:
 8006dfa:	4402      	add	r2, r0
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d100      	bne.n	8006e04 <memset+0xa>
 8006e02:	4770      	bx	lr
 8006e04:	f803 1b01 	strb.w	r1, [r3], #1
 8006e08:	e7f9      	b.n	8006dfe <memset+0x4>
	...

08006e0c <siprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b500      	push	{lr}
 8006e10:	b09c      	sub	sp, #112	; 0x70
 8006e12:	ab1d      	add	r3, sp, #116	; 0x74
 8006e14:	9002      	str	r0, [sp, #8]
 8006e16:	9006      	str	r0, [sp, #24]
 8006e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <siprintf+0x38>)
 8006e1e:	9107      	str	r1, [sp, #28]
 8006e20:	9104      	str	r1, [sp, #16]
 8006e22:	4909      	ldr	r1, [pc, #36]	; (8006e48 <siprintf+0x3c>)
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	a902      	add	r1, sp, #8
 8006e30:	f000 f866 	bl	8006f00 <_svfiprintf_r>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	b01c      	add	sp, #112	; 0x70
 8006e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e40:	b003      	add	sp, #12
 8006e42:	4770      	bx	lr
 8006e44:	2000006c 	.word	0x2000006c
 8006e48:	ffff0208 	.word	0xffff0208

08006e4c <__ssputs_r>:
 8006e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e50:	688e      	ldr	r6, [r1, #8]
 8006e52:	429e      	cmp	r6, r3
 8006e54:	4682      	mov	sl, r0
 8006e56:	460c      	mov	r4, r1
 8006e58:	4690      	mov	r8, r2
 8006e5a:	4699      	mov	r9, r3
 8006e5c:	d837      	bhi.n	8006ece <__ssputs_r+0x82>
 8006e5e:	898a      	ldrh	r2, [r1, #12]
 8006e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e64:	d031      	beq.n	8006eca <__ssputs_r+0x7e>
 8006e66:	6825      	ldr	r5, [r4, #0]
 8006e68:	6909      	ldr	r1, [r1, #16]
 8006e6a:	1a6f      	subs	r7, r5, r1
 8006e6c:	6965      	ldr	r5, [r4, #20]
 8006e6e:	2302      	movs	r3, #2
 8006e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e74:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e78:	f109 0301 	add.w	r3, r9, #1
 8006e7c:	443b      	add	r3, r7
 8006e7e:	429d      	cmp	r5, r3
 8006e80:	bf38      	it	cc
 8006e82:	461d      	movcc	r5, r3
 8006e84:	0553      	lsls	r3, r2, #21
 8006e86:	d530      	bpl.n	8006eea <__ssputs_r+0x9e>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f000 fb21 	bl	80074d0 <_malloc_r>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	b950      	cbnz	r0, 8006ea8 <__ssputs_r+0x5c>
 8006e92:	230c      	movs	r3, #12
 8006e94:	f8ca 3000 	str.w	r3, [sl]
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	6921      	ldr	r1, [r4, #16]
 8006eac:	f7ff ff9a 	bl	8006de4 <memcpy>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	6126      	str	r6, [r4, #16]
 8006ebe:	6165      	str	r5, [r4, #20]
 8006ec0:	443e      	add	r6, r7
 8006ec2:	1bed      	subs	r5, r5, r7
 8006ec4:	6026      	str	r6, [r4, #0]
 8006ec6:	60a5      	str	r5, [r4, #8]
 8006ec8:	464e      	mov	r6, r9
 8006eca:	454e      	cmp	r6, r9
 8006ecc:	d900      	bls.n	8006ed0 <__ssputs_r+0x84>
 8006ece:	464e      	mov	r6, r9
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	f000 fa93 	bl	8007400 <memmove>
 8006eda:	68a3      	ldr	r3, [r4, #8]
 8006edc:	1b9b      	subs	r3, r3, r6
 8006ede:	60a3      	str	r3, [r4, #8]
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	441e      	add	r6, r3
 8006ee4:	6026      	str	r6, [r4, #0]
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e7dc      	b.n	8006ea4 <__ssputs_r+0x58>
 8006eea:	462a      	mov	r2, r5
 8006eec:	f000 fb4a 	bl	8007584 <_realloc_r>
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	d1e2      	bne.n	8006ebc <__ssputs_r+0x70>
 8006ef6:	6921      	ldr	r1, [r4, #16]
 8006ef8:	4650      	mov	r0, sl
 8006efa:	f000 fa9b 	bl	8007434 <_free_r>
 8006efe:	e7c8      	b.n	8006e92 <__ssputs_r+0x46>

08006f00 <_svfiprintf_r>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	461d      	mov	r5, r3
 8006f06:	898b      	ldrh	r3, [r1, #12]
 8006f08:	061f      	lsls	r7, r3, #24
 8006f0a:	b09d      	sub	sp, #116	; 0x74
 8006f0c:	4680      	mov	r8, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d50f      	bpl.n	8006f34 <_svfiprintf_r+0x34>
 8006f14:	690b      	ldr	r3, [r1, #16]
 8006f16:	b96b      	cbnz	r3, 8006f34 <_svfiprintf_r+0x34>
 8006f18:	2140      	movs	r1, #64	; 0x40
 8006f1a:	f000 fad9 	bl	80074d0 <_malloc_r>
 8006f1e:	6020      	str	r0, [r4, #0]
 8006f20:	6120      	str	r0, [r4, #16]
 8006f22:	b928      	cbnz	r0, 8006f30 <_svfiprintf_r+0x30>
 8006f24:	230c      	movs	r3, #12
 8006f26:	f8c8 3000 	str.w	r3, [r8]
 8006f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f2e:	e0c8      	b.n	80070c2 <_svfiprintf_r+0x1c2>
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	6163      	str	r3, [r4, #20]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9309      	str	r3, [sp, #36]	; 0x24
 8006f38:	2320      	movs	r3, #32
 8006f3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f3e:	2330      	movs	r3, #48	; 0x30
 8006f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f44:	9503      	str	r5, [sp, #12]
 8006f46:	f04f 0b01 	mov.w	fp, #1
 8006f4a:	4637      	mov	r7, r6
 8006f4c:	463d      	mov	r5, r7
 8006f4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f52:	b10b      	cbz	r3, 8006f58 <_svfiprintf_r+0x58>
 8006f54:	2b25      	cmp	r3, #37	; 0x25
 8006f56:	d13e      	bne.n	8006fd6 <_svfiprintf_r+0xd6>
 8006f58:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f5c:	d00b      	beq.n	8006f76 <_svfiprintf_r+0x76>
 8006f5e:	4653      	mov	r3, sl
 8006f60:	4632      	mov	r2, r6
 8006f62:	4621      	mov	r1, r4
 8006f64:	4640      	mov	r0, r8
 8006f66:	f7ff ff71 	bl	8006e4c <__ssputs_r>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f000 80a4 	beq.w	80070b8 <_svfiprintf_r+0x1b8>
 8006f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f72:	4453      	add	r3, sl
 8006f74:	9309      	str	r3, [sp, #36]	; 0x24
 8006f76:	783b      	ldrb	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 809d 	beq.w	80070b8 <_svfiprintf_r+0x1b8>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	9307      	str	r3, [sp, #28]
 8006f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f90:	931a      	str	r3, [sp, #104]	; 0x68
 8006f92:	462f      	mov	r7, r5
 8006f94:	2205      	movs	r2, #5
 8006f96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f9a:	4850      	ldr	r0, [pc, #320]	; (80070dc <_svfiprintf_r+0x1dc>)
 8006f9c:	f7f9 f930 	bl	8000200 <memchr>
 8006fa0:	9b04      	ldr	r3, [sp, #16]
 8006fa2:	b9d0      	cbnz	r0, 8006fda <_svfiprintf_r+0xda>
 8006fa4:	06d9      	lsls	r1, r3, #27
 8006fa6:	bf44      	itt	mi
 8006fa8:	2220      	movmi	r2, #32
 8006faa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fae:	071a      	lsls	r2, r3, #28
 8006fb0:	bf44      	itt	mi
 8006fb2:	222b      	movmi	r2, #43	; 0x2b
 8006fb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006fb8:	782a      	ldrb	r2, [r5, #0]
 8006fba:	2a2a      	cmp	r2, #42	; 0x2a
 8006fbc:	d015      	beq.n	8006fea <_svfiprintf_r+0xea>
 8006fbe:	9a07      	ldr	r2, [sp, #28]
 8006fc0:	462f      	mov	r7, r5
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	250a      	movs	r5, #10
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fcc:	3b30      	subs	r3, #48	; 0x30
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d94d      	bls.n	800706e <_svfiprintf_r+0x16e>
 8006fd2:	b1b8      	cbz	r0, 8007004 <_svfiprintf_r+0x104>
 8006fd4:	e00f      	b.n	8006ff6 <_svfiprintf_r+0xf6>
 8006fd6:	462f      	mov	r7, r5
 8006fd8:	e7b8      	b.n	8006f4c <_svfiprintf_r+0x4c>
 8006fda:	4a40      	ldr	r2, [pc, #256]	; (80070dc <_svfiprintf_r+0x1dc>)
 8006fdc:	1a80      	subs	r0, r0, r2
 8006fde:	fa0b f000 	lsl.w	r0, fp, r0
 8006fe2:	4318      	orrs	r0, r3
 8006fe4:	9004      	str	r0, [sp, #16]
 8006fe6:	463d      	mov	r5, r7
 8006fe8:	e7d3      	b.n	8006f92 <_svfiprintf_r+0x92>
 8006fea:	9a03      	ldr	r2, [sp, #12]
 8006fec:	1d11      	adds	r1, r2, #4
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	9103      	str	r1, [sp, #12]
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	db01      	blt.n	8006ffa <_svfiprintf_r+0xfa>
 8006ff6:	9207      	str	r2, [sp, #28]
 8006ff8:	e004      	b.n	8007004 <_svfiprintf_r+0x104>
 8006ffa:	4252      	negs	r2, r2
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	9207      	str	r2, [sp, #28]
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	783b      	ldrb	r3, [r7, #0]
 8007006:	2b2e      	cmp	r3, #46	; 0x2e
 8007008:	d10c      	bne.n	8007024 <_svfiprintf_r+0x124>
 800700a:	787b      	ldrb	r3, [r7, #1]
 800700c:	2b2a      	cmp	r3, #42	; 0x2a
 800700e:	d133      	bne.n	8007078 <_svfiprintf_r+0x178>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	1d1a      	adds	r2, r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9203      	str	r2, [sp, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfb8      	it	lt
 800701c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007020:	3702      	adds	r7, #2
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	4d2e      	ldr	r5, [pc, #184]	; (80070e0 <_svfiprintf_r+0x1e0>)
 8007026:	7839      	ldrb	r1, [r7, #0]
 8007028:	2203      	movs	r2, #3
 800702a:	4628      	mov	r0, r5
 800702c:	f7f9 f8e8 	bl	8000200 <memchr>
 8007030:	b138      	cbz	r0, 8007042 <_svfiprintf_r+0x142>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	1b40      	subs	r0, r0, r5
 8007036:	fa03 f000 	lsl.w	r0, r3, r0
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	4303      	orrs	r3, r0
 800703e:	3701      	adds	r7, #1
 8007040:	9304      	str	r3, [sp, #16]
 8007042:	7839      	ldrb	r1, [r7, #0]
 8007044:	4827      	ldr	r0, [pc, #156]	; (80070e4 <_svfiprintf_r+0x1e4>)
 8007046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800704a:	2206      	movs	r2, #6
 800704c:	1c7e      	adds	r6, r7, #1
 800704e:	f7f9 f8d7 	bl	8000200 <memchr>
 8007052:	2800      	cmp	r0, #0
 8007054:	d038      	beq.n	80070c8 <_svfiprintf_r+0x1c8>
 8007056:	4b24      	ldr	r3, [pc, #144]	; (80070e8 <_svfiprintf_r+0x1e8>)
 8007058:	bb13      	cbnz	r3, 80070a0 <_svfiprintf_r+0x1a0>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	3307      	adds	r3, #7
 800705e:	f023 0307 	bic.w	r3, r3, #7
 8007062:	3308      	adds	r3, #8
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007068:	444b      	add	r3, r9
 800706a:	9309      	str	r3, [sp, #36]	; 0x24
 800706c:	e76d      	b.n	8006f4a <_svfiprintf_r+0x4a>
 800706e:	fb05 3202 	mla	r2, r5, r2, r3
 8007072:	2001      	movs	r0, #1
 8007074:	460f      	mov	r7, r1
 8007076:	e7a6      	b.n	8006fc6 <_svfiprintf_r+0xc6>
 8007078:	2300      	movs	r3, #0
 800707a:	3701      	adds	r7, #1
 800707c:	9305      	str	r3, [sp, #20]
 800707e:	4619      	mov	r1, r3
 8007080:	250a      	movs	r5, #10
 8007082:	4638      	mov	r0, r7
 8007084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007088:	3a30      	subs	r2, #48	; 0x30
 800708a:	2a09      	cmp	r2, #9
 800708c:	d903      	bls.n	8007096 <_svfiprintf_r+0x196>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0c8      	beq.n	8007024 <_svfiprintf_r+0x124>
 8007092:	9105      	str	r1, [sp, #20]
 8007094:	e7c6      	b.n	8007024 <_svfiprintf_r+0x124>
 8007096:	fb05 2101 	mla	r1, r5, r1, r2
 800709a:	2301      	movs	r3, #1
 800709c:	4607      	mov	r7, r0
 800709e:	e7f0      	b.n	8007082 <_svfiprintf_r+0x182>
 80070a0:	ab03      	add	r3, sp, #12
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4622      	mov	r2, r4
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <_svfiprintf_r+0x1ec>)
 80070a8:	a904      	add	r1, sp, #16
 80070aa:	4640      	mov	r0, r8
 80070ac:	f3af 8000 	nop.w
 80070b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80070b4:	4681      	mov	r9, r0
 80070b6:	d1d6      	bne.n	8007066 <_svfiprintf_r+0x166>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	065b      	lsls	r3, r3, #25
 80070bc:	f53f af35 	bmi.w	8006f2a <_svfiprintf_r+0x2a>
 80070c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c2:	b01d      	add	sp, #116	; 0x74
 80070c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4622      	mov	r2, r4
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <_svfiprintf_r+0x1ec>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4640      	mov	r0, r8
 80070d4:	f000 f882 	bl	80071dc <_printf_i>
 80070d8:	e7ea      	b.n	80070b0 <_svfiprintf_r+0x1b0>
 80070da:	bf00      	nop
 80070dc:	08007790 	.word	0x08007790
 80070e0:	08007796 	.word	0x08007796
 80070e4:	0800779a 	.word	0x0800779a
 80070e8:	00000000 	.word	0x00000000
 80070ec:	08006e4d 	.word	0x08006e4d

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4691      	mov	r9, r2
 80070f6:	461f      	mov	r7, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007100:	4293      	cmp	r3, r2
 8007102:	bfb8      	it	lt
 8007104:	4613      	movlt	r3, r2
 8007106:	f8c9 3000 	str.w	r3, [r9]
 800710a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800710e:	4606      	mov	r6, r0
 8007110:	460c      	mov	r4, r1
 8007112:	b112      	cbz	r2, 800711a <_printf_common+0x2a>
 8007114:	3301      	adds	r3, #1
 8007116:	f8c9 3000 	str.w	r3, [r9]
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	0699      	lsls	r1, r3, #26
 800711e:	bf42      	ittt	mi
 8007120:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007124:	3302      	addmi	r3, #2
 8007126:	f8c9 3000 	strmi.w	r3, [r9]
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	f015 0506 	ands.w	r5, r5, #6
 8007130:	d107      	bne.n	8007142 <_printf_common+0x52>
 8007132:	f104 0a19 	add.w	sl, r4, #25
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	f8d9 2000 	ldr.w	r2, [r9]
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	42ab      	cmp	r3, r5
 8007140:	dc28      	bgt.n	8007194 <_printf_common+0xa4>
 8007142:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	3300      	adds	r3, #0
 800714a:	bf18      	it	ne
 800714c:	2301      	movne	r3, #1
 800714e:	0692      	lsls	r2, r2, #26
 8007150:	d42d      	bmi.n	80071ae <_printf_common+0xbe>
 8007152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007156:	4639      	mov	r1, r7
 8007158:	4630      	mov	r0, r6
 800715a:	47c0      	blx	r8
 800715c:	3001      	adds	r0, #1
 800715e:	d020      	beq.n	80071a2 <_printf_common+0xb2>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	68e5      	ldr	r5, [r4, #12]
 8007164:	f8d9 2000 	ldr.w	r2, [r9]
 8007168:	f003 0306 	and.w	r3, r3, #6
 800716c:	2b04      	cmp	r3, #4
 800716e:	bf08      	it	eq
 8007170:	1aad      	subeq	r5, r5, r2
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	6922      	ldr	r2, [r4, #16]
 8007176:	bf0c      	ite	eq
 8007178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800717c:	2500      	movne	r5, #0
 800717e:	4293      	cmp	r3, r2
 8007180:	bfc4      	itt	gt
 8007182:	1a9b      	subgt	r3, r3, r2
 8007184:	18ed      	addgt	r5, r5, r3
 8007186:	f04f 0900 	mov.w	r9, #0
 800718a:	341a      	adds	r4, #26
 800718c:	454d      	cmp	r5, r9
 800718e:	d11a      	bne.n	80071c6 <_printf_common+0xd6>
 8007190:	2000      	movs	r0, #0
 8007192:	e008      	b.n	80071a6 <_printf_common+0xb6>
 8007194:	2301      	movs	r3, #1
 8007196:	4652      	mov	r2, sl
 8007198:	4639      	mov	r1, r7
 800719a:	4630      	mov	r0, r6
 800719c:	47c0      	blx	r8
 800719e:	3001      	adds	r0, #1
 80071a0:	d103      	bne.n	80071aa <_printf_common+0xba>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	3501      	adds	r5, #1
 80071ac:	e7c3      	b.n	8007136 <_printf_common+0x46>
 80071ae:	18e1      	adds	r1, r4, r3
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	2030      	movs	r0, #48	; 0x30
 80071b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b8:	4422      	add	r2, r4
 80071ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071c2:	3302      	adds	r3, #2
 80071c4:	e7c5      	b.n	8007152 <_printf_common+0x62>
 80071c6:	2301      	movs	r3, #1
 80071c8:	4622      	mov	r2, r4
 80071ca:	4639      	mov	r1, r7
 80071cc:	4630      	mov	r0, r6
 80071ce:	47c0      	blx	r8
 80071d0:	3001      	adds	r0, #1
 80071d2:	d0e6      	beq.n	80071a2 <_printf_common+0xb2>
 80071d4:	f109 0901 	add.w	r9, r9, #1
 80071d8:	e7d8      	b.n	800718c <_printf_common+0x9c>
	...

080071dc <_printf_i>:
 80071dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071e4:	460c      	mov	r4, r1
 80071e6:	7e09      	ldrb	r1, [r1, #24]
 80071e8:	b085      	sub	sp, #20
 80071ea:	296e      	cmp	r1, #110	; 0x6e
 80071ec:	4617      	mov	r7, r2
 80071ee:	4606      	mov	r6, r0
 80071f0:	4698      	mov	r8, r3
 80071f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f4:	f000 80b3 	beq.w	800735e <_printf_i+0x182>
 80071f8:	d822      	bhi.n	8007240 <_printf_i+0x64>
 80071fa:	2963      	cmp	r1, #99	; 0x63
 80071fc:	d036      	beq.n	800726c <_printf_i+0x90>
 80071fe:	d80a      	bhi.n	8007216 <_printf_i+0x3a>
 8007200:	2900      	cmp	r1, #0
 8007202:	f000 80b9 	beq.w	8007378 <_printf_i+0x19c>
 8007206:	2958      	cmp	r1, #88	; 0x58
 8007208:	f000 8083 	beq.w	8007312 <_printf_i+0x136>
 800720c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007210:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007214:	e032      	b.n	800727c <_printf_i+0xa0>
 8007216:	2964      	cmp	r1, #100	; 0x64
 8007218:	d001      	beq.n	800721e <_printf_i+0x42>
 800721a:	2969      	cmp	r1, #105	; 0x69
 800721c:	d1f6      	bne.n	800720c <_printf_i+0x30>
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	6813      	ldr	r3, [r2, #0]
 8007222:	0605      	lsls	r5, r0, #24
 8007224:	f103 0104 	add.w	r1, r3, #4
 8007228:	d52a      	bpl.n	8007280 <_printf_i+0xa4>
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	da03      	bge.n	800723a <_printf_i+0x5e>
 8007232:	222d      	movs	r2, #45	; 0x2d
 8007234:	425b      	negs	r3, r3
 8007236:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800723a:	486f      	ldr	r0, [pc, #444]	; (80073f8 <_printf_i+0x21c>)
 800723c:	220a      	movs	r2, #10
 800723e:	e039      	b.n	80072b4 <_printf_i+0xd8>
 8007240:	2973      	cmp	r1, #115	; 0x73
 8007242:	f000 809d 	beq.w	8007380 <_printf_i+0x1a4>
 8007246:	d808      	bhi.n	800725a <_printf_i+0x7e>
 8007248:	296f      	cmp	r1, #111	; 0x6f
 800724a:	d020      	beq.n	800728e <_printf_i+0xb2>
 800724c:	2970      	cmp	r1, #112	; 0x70
 800724e:	d1dd      	bne.n	800720c <_printf_i+0x30>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	e003      	b.n	8007262 <_printf_i+0x86>
 800725a:	2975      	cmp	r1, #117	; 0x75
 800725c:	d017      	beq.n	800728e <_printf_i+0xb2>
 800725e:	2978      	cmp	r1, #120	; 0x78
 8007260:	d1d4      	bne.n	800720c <_printf_i+0x30>
 8007262:	2378      	movs	r3, #120	; 0x78
 8007264:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007268:	4864      	ldr	r0, [pc, #400]	; (80073fc <_printf_i+0x220>)
 800726a:	e055      	b.n	8007318 <_printf_i+0x13c>
 800726c:	6813      	ldr	r3, [r2, #0]
 800726e:	1d19      	adds	r1, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6011      	str	r1, [r2, #0]
 8007274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800727c:	2301      	movs	r3, #1
 800727e:	e08c      	b.n	800739a <_printf_i+0x1be>
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6011      	str	r1, [r2, #0]
 8007284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007288:	bf18      	it	ne
 800728a:	b21b      	sxthne	r3, r3
 800728c:	e7cf      	b.n	800722e <_printf_i+0x52>
 800728e:	6813      	ldr	r3, [r2, #0]
 8007290:	6825      	ldr	r5, [r4, #0]
 8007292:	1d18      	adds	r0, r3, #4
 8007294:	6010      	str	r0, [r2, #0]
 8007296:	0628      	lsls	r0, r5, #24
 8007298:	d501      	bpl.n	800729e <_printf_i+0xc2>
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	e002      	b.n	80072a4 <_printf_i+0xc8>
 800729e:	0668      	lsls	r0, r5, #25
 80072a0:	d5fb      	bpl.n	800729a <_printf_i+0xbe>
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	4854      	ldr	r0, [pc, #336]	; (80073f8 <_printf_i+0x21c>)
 80072a6:	296f      	cmp	r1, #111	; 0x6f
 80072a8:	bf14      	ite	ne
 80072aa:	220a      	movne	r2, #10
 80072ac:	2208      	moveq	r2, #8
 80072ae:	2100      	movs	r1, #0
 80072b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072b4:	6865      	ldr	r5, [r4, #4]
 80072b6:	60a5      	str	r5, [r4, #8]
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	f2c0 8095 	blt.w	80073e8 <_printf_i+0x20c>
 80072be:	6821      	ldr	r1, [r4, #0]
 80072c0:	f021 0104 	bic.w	r1, r1, #4
 80072c4:	6021      	str	r1, [r4, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d13d      	bne.n	8007346 <_printf_i+0x16a>
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f040 808e 	bne.w	80073ec <_printf_i+0x210>
 80072d0:	4665      	mov	r5, ip
 80072d2:	2a08      	cmp	r2, #8
 80072d4:	d10b      	bne.n	80072ee <_printf_i+0x112>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	07db      	lsls	r3, r3, #31
 80072da:	d508      	bpl.n	80072ee <_printf_i+0x112>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	6862      	ldr	r2, [r4, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfde      	ittt	le
 80072e4:	2330      	movle	r3, #48	; 0x30
 80072e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072ee:	ebac 0305 	sub.w	r3, ip, r5
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	f8cd 8000 	str.w	r8, [sp]
 80072f8:	463b      	mov	r3, r7
 80072fa:	aa03      	add	r2, sp, #12
 80072fc:	4621      	mov	r1, r4
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff fef6 	bl	80070f0 <_printf_common>
 8007304:	3001      	adds	r0, #1
 8007306:	d14d      	bne.n	80073a4 <_printf_i+0x1c8>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800730c:	b005      	add	sp, #20
 800730e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007312:	4839      	ldr	r0, [pc, #228]	; (80073f8 <_printf_i+0x21c>)
 8007314:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	6821      	ldr	r1, [r4, #0]
 800731c:	1d1d      	adds	r5, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6015      	str	r5, [r2, #0]
 8007322:	060a      	lsls	r2, r1, #24
 8007324:	d50b      	bpl.n	800733e <_printf_i+0x162>
 8007326:	07ca      	lsls	r2, r1, #31
 8007328:	bf44      	itt	mi
 800732a:	f041 0120 	orrmi.w	r1, r1, #32
 800732e:	6021      	strmi	r1, [r4, #0]
 8007330:	b91b      	cbnz	r3, 800733a <_printf_i+0x15e>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	f022 0220 	bic.w	r2, r2, #32
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	2210      	movs	r2, #16
 800733c:	e7b7      	b.n	80072ae <_printf_i+0xd2>
 800733e:	064d      	lsls	r5, r1, #25
 8007340:	bf48      	it	mi
 8007342:	b29b      	uxthmi	r3, r3
 8007344:	e7ef      	b.n	8007326 <_printf_i+0x14a>
 8007346:	4665      	mov	r5, ip
 8007348:	fbb3 f1f2 	udiv	r1, r3, r2
 800734c:	fb02 3311 	mls	r3, r2, r1, r3
 8007350:	5cc3      	ldrb	r3, [r0, r3]
 8007352:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007356:	460b      	mov	r3, r1
 8007358:	2900      	cmp	r1, #0
 800735a:	d1f5      	bne.n	8007348 <_printf_i+0x16c>
 800735c:	e7b9      	b.n	80072d2 <_printf_i+0xf6>
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	6825      	ldr	r5, [r4, #0]
 8007362:	6961      	ldr	r1, [r4, #20]
 8007364:	1d18      	adds	r0, r3, #4
 8007366:	6010      	str	r0, [r2, #0]
 8007368:	0628      	lsls	r0, r5, #24
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	d501      	bpl.n	8007372 <_printf_i+0x196>
 800736e:	6019      	str	r1, [r3, #0]
 8007370:	e002      	b.n	8007378 <_printf_i+0x19c>
 8007372:	066a      	lsls	r2, r5, #25
 8007374:	d5fb      	bpl.n	800736e <_printf_i+0x192>
 8007376:	8019      	strh	r1, [r3, #0]
 8007378:	2300      	movs	r3, #0
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	4665      	mov	r5, ip
 800737e:	e7b9      	b.n	80072f4 <_printf_i+0x118>
 8007380:	6813      	ldr	r3, [r2, #0]
 8007382:	1d19      	adds	r1, r3, #4
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	681d      	ldr	r5, [r3, #0]
 8007388:	6862      	ldr	r2, [r4, #4]
 800738a:	2100      	movs	r1, #0
 800738c:	4628      	mov	r0, r5
 800738e:	f7f8 ff37 	bl	8000200 <memchr>
 8007392:	b108      	cbz	r0, 8007398 <_printf_i+0x1bc>
 8007394:	1b40      	subs	r0, r0, r5
 8007396:	6060      	str	r0, [r4, #4]
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	6123      	str	r3, [r4, #16]
 800739c:	2300      	movs	r3, #0
 800739e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073a2:	e7a7      	b.n	80072f4 <_printf_i+0x118>
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	462a      	mov	r2, r5
 80073a8:	4639      	mov	r1, r7
 80073aa:	4630      	mov	r0, r6
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d0aa      	beq.n	8007308 <_printf_i+0x12c>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	079b      	lsls	r3, r3, #30
 80073b6:	d413      	bmi.n	80073e0 <_printf_i+0x204>
 80073b8:	68e0      	ldr	r0, [r4, #12]
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	4298      	cmp	r0, r3
 80073be:	bfb8      	it	lt
 80073c0:	4618      	movlt	r0, r3
 80073c2:	e7a3      	b.n	800730c <_printf_i+0x130>
 80073c4:	2301      	movs	r3, #1
 80073c6:	464a      	mov	r2, r9
 80073c8:	4639      	mov	r1, r7
 80073ca:	4630      	mov	r0, r6
 80073cc:	47c0      	blx	r8
 80073ce:	3001      	adds	r0, #1
 80073d0:	d09a      	beq.n	8007308 <_printf_i+0x12c>
 80073d2:	3501      	adds	r5, #1
 80073d4:	68e3      	ldr	r3, [r4, #12]
 80073d6:	9a03      	ldr	r2, [sp, #12]
 80073d8:	1a9b      	subs	r3, r3, r2
 80073da:	42ab      	cmp	r3, r5
 80073dc:	dcf2      	bgt.n	80073c4 <_printf_i+0x1e8>
 80073de:	e7eb      	b.n	80073b8 <_printf_i+0x1dc>
 80073e0:	2500      	movs	r5, #0
 80073e2:	f104 0919 	add.w	r9, r4, #25
 80073e6:	e7f5      	b.n	80073d4 <_printf_i+0x1f8>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1ac      	bne.n	8007346 <_printf_i+0x16a>
 80073ec:	7803      	ldrb	r3, [r0, #0]
 80073ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f6:	e76c      	b.n	80072d2 <_printf_i+0xf6>
 80073f8:	080077a1 	.word	0x080077a1
 80073fc:	080077b2 	.word	0x080077b2

08007400 <memmove>:
 8007400:	4288      	cmp	r0, r1
 8007402:	b510      	push	{r4, lr}
 8007404:	eb01 0302 	add.w	r3, r1, r2
 8007408:	d807      	bhi.n	800741a <memmove+0x1a>
 800740a:	1e42      	subs	r2, r0, #1
 800740c:	4299      	cmp	r1, r3
 800740e:	d00a      	beq.n	8007426 <memmove+0x26>
 8007410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007414:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007418:	e7f8      	b.n	800740c <memmove+0xc>
 800741a:	4283      	cmp	r3, r0
 800741c:	d9f5      	bls.n	800740a <memmove+0xa>
 800741e:	1881      	adds	r1, r0, r2
 8007420:	1ad2      	subs	r2, r2, r3
 8007422:	42d3      	cmn	r3, r2
 8007424:	d100      	bne.n	8007428 <memmove+0x28>
 8007426:	bd10      	pop	{r4, pc}
 8007428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800742c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007430:	e7f7      	b.n	8007422 <memmove+0x22>
	...

08007434 <_free_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4605      	mov	r5, r0
 8007438:	2900      	cmp	r1, #0
 800743a:	d045      	beq.n	80074c8 <_free_r+0x94>
 800743c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007440:	1f0c      	subs	r4, r1, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfb8      	it	lt
 8007446:	18e4      	addlt	r4, r4, r3
 8007448:	f000 f8d2 	bl	80075f0 <__malloc_lock>
 800744c:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <_free_r+0x98>)
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	4610      	mov	r0, r2
 8007452:	b933      	cbnz	r3, 8007462 <_free_r+0x2e>
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6014      	str	r4, [r2, #0]
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800745e:	f000 b8c8 	b.w	80075f2 <__malloc_unlock>
 8007462:	42a3      	cmp	r3, r4
 8007464:	d90c      	bls.n	8007480 <_free_r+0x4c>
 8007466:	6821      	ldr	r1, [r4, #0]
 8007468:	1862      	adds	r2, r4, r1
 800746a:	4293      	cmp	r3, r2
 800746c:	bf04      	itt	eq
 800746e:	681a      	ldreq	r2, [r3, #0]
 8007470:	685b      	ldreq	r3, [r3, #4]
 8007472:	6063      	str	r3, [r4, #4]
 8007474:	bf04      	itt	eq
 8007476:	1852      	addeq	r2, r2, r1
 8007478:	6022      	streq	r2, [r4, #0]
 800747a:	6004      	str	r4, [r0, #0]
 800747c:	e7ec      	b.n	8007458 <_free_r+0x24>
 800747e:	4613      	mov	r3, r2
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	b10a      	cbz	r2, 8007488 <_free_r+0x54>
 8007484:	42a2      	cmp	r2, r4
 8007486:	d9fa      	bls.n	800747e <_free_r+0x4a>
 8007488:	6819      	ldr	r1, [r3, #0]
 800748a:	1858      	adds	r0, r3, r1
 800748c:	42a0      	cmp	r0, r4
 800748e:	d10b      	bne.n	80074a8 <_free_r+0x74>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	4401      	add	r1, r0
 8007494:	1858      	adds	r0, r3, r1
 8007496:	4282      	cmp	r2, r0
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	d1dd      	bne.n	8007458 <_free_r+0x24>
 800749c:	6810      	ldr	r0, [r2, #0]
 800749e:	6852      	ldr	r2, [r2, #4]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	4401      	add	r1, r0
 80074a4:	6019      	str	r1, [r3, #0]
 80074a6:	e7d7      	b.n	8007458 <_free_r+0x24>
 80074a8:	d902      	bls.n	80074b0 <_free_r+0x7c>
 80074aa:	230c      	movs	r3, #12
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	e7d3      	b.n	8007458 <_free_r+0x24>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	1821      	adds	r1, r4, r0
 80074b4:	428a      	cmp	r2, r1
 80074b6:	bf04      	itt	eq
 80074b8:	6811      	ldreq	r1, [r2, #0]
 80074ba:	6852      	ldreq	r2, [r2, #4]
 80074bc:	6062      	str	r2, [r4, #4]
 80074be:	bf04      	itt	eq
 80074c0:	1809      	addeq	r1, r1, r0
 80074c2:	6021      	streq	r1, [r4, #0]
 80074c4:	605c      	str	r4, [r3, #4]
 80074c6:	e7c7      	b.n	8007458 <_free_r+0x24>
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
 80074ca:	bf00      	nop
 80074cc:	2000105c 	.word	0x2000105c

080074d0 <_malloc_r>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	1ccd      	adds	r5, r1, #3
 80074d4:	f025 0503 	bic.w	r5, r5, #3
 80074d8:	3508      	adds	r5, #8
 80074da:	2d0c      	cmp	r5, #12
 80074dc:	bf38      	it	cc
 80074de:	250c      	movcc	r5, #12
 80074e0:	2d00      	cmp	r5, #0
 80074e2:	4606      	mov	r6, r0
 80074e4:	db01      	blt.n	80074ea <_malloc_r+0x1a>
 80074e6:	42a9      	cmp	r1, r5
 80074e8:	d903      	bls.n	80074f2 <_malloc_r+0x22>
 80074ea:	230c      	movs	r3, #12
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	2000      	movs	r0, #0
 80074f0:	bd70      	pop	{r4, r5, r6, pc}
 80074f2:	f000 f87d 	bl	80075f0 <__malloc_lock>
 80074f6:	4a21      	ldr	r2, [pc, #132]	; (800757c <_malloc_r+0xac>)
 80074f8:	6814      	ldr	r4, [r2, #0]
 80074fa:	4621      	mov	r1, r4
 80074fc:	b991      	cbnz	r1, 8007524 <_malloc_r+0x54>
 80074fe:	4c20      	ldr	r4, [pc, #128]	; (8007580 <_malloc_r+0xb0>)
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	b91b      	cbnz	r3, 800750c <_malloc_r+0x3c>
 8007504:	4630      	mov	r0, r6
 8007506:	f000 f863 	bl	80075d0 <_sbrk_r>
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f85e 	bl	80075d0 <_sbrk_r>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d124      	bne.n	8007562 <_malloc_r+0x92>
 8007518:	230c      	movs	r3, #12
 800751a:	6033      	str	r3, [r6, #0]
 800751c:	4630      	mov	r0, r6
 800751e:	f000 f868 	bl	80075f2 <__malloc_unlock>
 8007522:	e7e4      	b.n	80074ee <_malloc_r+0x1e>
 8007524:	680b      	ldr	r3, [r1, #0]
 8007526:	1b5b      	subs	r3, r3, r5
 8007528:	d418      	bmi.n	800755c <_malloc_r+0x8c>
 800752a:	2b0b      	cmp	r3, #11
 800752c:	d90f      	bls.n	800754e <_malloc_r+0x7e>
 800752e:	600b      	str	r3, [r1, #0]
 8007530:	50cd      	str	r5, [r1, r3]
 8007532:	18cc      	adds	r4, r1, r3
 8007534:	4630      	mov	r0, r6
 8007536:	f000 f85c 	bl	80075f2 <__malloc_unlock>
 800753a:	f104 000b 	add.w	r0, r4, #11
 800753e:	1d23      	adds	r3, r4, #4
 8007540:	f020 0007 	bic.w	r0, r0, #7
 8007544:	1ac3      	subs	r3, r0, r3
 8007546:	d0d3      	beq.n	80074f0 <_malloc_r+0x20>
 8007548:	425a      	negs	r2, r3
 800754a:	50e2      	str	r2, [r4, r3]
 800754c:	e7d0      	b.n	80074f0 <_malloc_r+0x20>
 800754e:	428c      	cmp	r4, r1
 8007550:	684b      	ldr	r3, [r1, #4]
 8007552:	bf16      	itet	ne
 8007554:	6063      	strne	r3, [r4, #4]
 8007556:	6013      	streq	r3, [r2, #0]
 8007558:	460c      	movne	r4, r1
 800755a:	e7eb      	b.n	8007534 <_malloc_r+0x64>
 800755c:	460c      	mov	r4, r1
 800755e:	6849      	ldr	r1, [r1, #4]
 8007560:	e7cc      	b.n	80074fc <_malloc_r+0x2c>
 8007562:	1cc4      	adds	r4, r0, #3
 8007564:	f024 0403 	bic.w	r4, r4, #3
 8007568:	42a0      	cmp	r0, r4
 800756a:	d005      	beq.n	8007578 <_malloc_r+0xa8>
 800756c:	1a21      	subs	r1, r4, r0
 800756e:	4630      	mov	r0, r6
 8007570:	f000 f82e 	bl	80075d0 <_sbrk_r>
 8007574:	3001      	adds	r0, #1
 8007576:	d0cf      	beq.n	8007518 <_malloc_r+0x48>
 8007578:	6025      	str	r5, [r4, #0]
 800757a:	e7db      	b.n	8007534 <_malloc_r+0x64>
 800757c:	2000105c 	.word	0x2000105c
 8007580:	20001060 	.word	0x20001060

08007584 <_realloc_r>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	4607      	mov	r7, r0
 8007588:	4614      	mov	r4, r2
 800758a:	460e      	mov	r6, r1
 800758c:	b921      	cbnz	r1, 8007598 <_realloc_r+0x14>
 800758e:	4611      	mov	r1, r2
 8007590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007594:	f7ff bf9c 	b.w	80074d0 <_malloc_r>
 8007598:	b922      	cbnz	r2, 80075a4 <_realloc_r+0x20>
 800759a:	f7ff ff4b 	bl	8007434 <_free_r>
 800759e:	4625      	mov	r5, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a4:	f000 f826 	bl	80075f4 <_malloc_usable_size_r>
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d20f      	bcs.n	80075cc <_realloc_r+0x48>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7ff ff8e 	bl	80074d0 <_malloc_r>
 80075b4:	4605      	mov	r5, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d0f2      	beq.n	80075a0 <_realloc_r+0x1c>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4622      	mov	r2, r4
 80075be:	f7ff fc11 	bl	8006de4 <memcpy>
 80075c2:	4631      	mov	r1, r6
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff ff35 	bl	8007434 <_free_r>
 80075ca:	e7e9      	b.n	80075a0 <_realloc_r+0x1c>
 80075cc:	4635      	mov	r5, r6
 80075ce:	e7e7      	b.n	80075a0 <_realloc_r+0x1c>

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4c06      	ldr	r4, [pc, #24]	; (80075ec <_sbrk_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4605      	mov	r5, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	6023      	str	r3, [r4, #0]
 80075dc:	f7fa f9aa 	bl	8001934 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20001484 	.word	0x20001484

080075f0 <__malloc_lock>:
 80075f0:	4770      	bx	lr

080075f2 <__malloc_unlock>:
 80075f2:	4770      	bx	lr

080075f4 <_malloc_usable_size_r>:
 80075f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f8:	1f18      	subs	r0, r3, #4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	bfbc      	itt	lt
 80075fe:	580b      	ldrlt	r3, [r1, r0]
 8007600:	18c0      	addlt	r0, r0, r3
 8007602:	4770      	bx	lr

08007604 <_init>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

08007610 <_fini>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr
