
ECSE444_Lab4_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005218  08005218  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000028  08005248  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08005248  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f8e  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002820  00000000  00000000  00036fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  00039808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf64  00000000  00000000  0003be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010943  00000000  00000000  00067dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fa85  00000000  00000000  00078707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018818c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005330  00000000  00000000  00188208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000028 	.word	0x20000028
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800517c 	.word	0x0800517c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000002c 	.word	0x2000002c
 80001f8:	0800517c 	.word	0x0800517c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2120      	movs	r1, #32
 800050c:	4618      	mov	r0, r3
 800050e:	f000 fc49 	bl	8000da4 <SENSOR_IO_Read>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	f023 0304 	bic.w	r3, r3, #4
 800051c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f023 0303 	bic.w	r3, r3, #3
 800052c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	7bfa      	ldrb	r2, [r7, #15]
 8000544:	2120      	movs	r1, #32
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fc12 	bl	8000d70 <SENSOR_IO_Write>
}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000562:	f000 fbfb 	bl	8000d5c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	210f      	movs	r1, #15
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc19 	bl	8000da4 <SENSOR_IO_Read>
 8000572:	4603      	mov	r3, r0
 8000574:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	2302      	movs	r3, #2
 8000594:	21b0      	movs	r1, #176	; 0xb0
 8000596:	f000 fc23 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800059a:	7b3b      	ldrb	r3, [r7, #12]
 800059c:	085b      	lsrs	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80005a2:	7b7b      	ldrb	r3, [r7, #13]
 80005a4:	085b      	lsrs	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2d8      	uxtb	r0, r3
 80005ae:	f107 020c 	add.w	r2, r7, #12
 80005b2:	2302      	movs	r3, #2
 80005b4:	21b6      	movs	r1, #182	; 0xb6
 80005b6:	f000 fc13 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80005ba:	7b7b      	ldrb	r3, [r7, #13]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	b21a      	sxth	r2, r3
 80005c0:	7b3b      	ldrb	r3, [r7, #12]
 80005c2:	b21b      	sxth	r3, r3
 80005c4:	4313      	orrs	r3, r2
 80005c6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	b2d8      	uxtb	r0, r3
 80005cc:	f107 020c 	add.w	r2, r7, #12
 80005d0:	2302      	movs	r3, #2
 80005d2:	21ba      	movs	r1, #186	; 0xba
 80005d4:	f000 fc04 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80005d8:	7b7b      	ldrb	r3, [r7, #13]
 80005da:	021b      	lsls	r3, r3, #8
 80005dc:	b21a      	sxth	r2, r3
 80005de:	7b3b      	ldrb	r3, [r7, #12]
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	b2d8      	uxtb	r0, r3
 80005ea:	f107 020c 	add.w	r2, r7, #12
 80005ee:	2302      	movs	r3, #2
 80005f0:	21a8      	movs	r1, #168	; 0xa8
 80005f2:	f000 fbf5 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80005f6:	7b7b      	ldrb	r3, [r7, #13]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	7b3b      	ldrb	r3, [r7, #12]
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8000604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000608:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000616:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800061a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	ee67 6a27 	vmul.f32	s13, s14, s15
 800062c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000630:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000642:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000646:	ee07 3a90 	vmov	s15, r3
 800064a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000652:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8000656:	edd7 7a04 	vldr	s15, [r7, #16]
 800065a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800065e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000662:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8000666:	edd7 7a04 	vldr	s15, [r7, #16]
 800066a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80006b0 <HTS221_H_ReadHumidity+0x130>
 800066e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000676:	dd01      	ble.n	800067c <HTS221_H_ReadHumidity+0xfc>
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HTS221_H_ReadHumidity+0x134>)
 800067a:	e00a      	b.n	8000692 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800067c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	d502      	bpl.n	8000690 <HTS221_H_ReadHumidity+0x110>
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e000      	b.n	8000692 <HTS221_H_ReadHumidity+0x112>
 8000690:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000692:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000694:	edd7 7a04 	vldr	s15, [r7, #16]
 8000698:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800069c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006a0:	eef0 7a66 	vmov.f32	s15, s13
}
 80006a4:	eeb0 0a67 	vmov.f32	s0, s15
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	447a0000 	.word	0x447a0000
 80006b4:	447a0000 	.word	0x447a0000

080006b8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2120      	movs	r1, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fb6a 	bl	8000da4 <SENSOR_IO_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	f023 0304 	bic.w	r3, r3, #4
 80006da:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f023 0303 	bic.w	r3, r3, #3
 80006ea:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006fa:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	2120      	movs	r1, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fb33 	bl	8000d70 <SENSOR_IO_Write>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b088      	sub	sp, #32
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800071c:	88fb      	ldrh	r3, [r7, #6]
 800071e:	b2d8      	uxtb	r0, r3
 8000720:	f107 0208 	add.w	r2, r7, #8
 8000724:	2302      	movs	r3, #2
 8000726:	21b2      	movs	r1, #178	; 0xb2
 8000728:	f000 fb5a 	bl	8000de0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2135      	movs	r1, #53	; 0x35
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fb36 	bl	8000da4 <SENSOR_IO_Read>
 8000738:	4603      	mov	r3, r0
 800073a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800073c:	7ffb      	ldrb	r3, [r7, #31]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	b21b      	sxth	r3, r3
 8000742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000746:	b21a      	sxth	r2, r3
 8000748:	7a3b      	ldrb	r3, [r7, #8]
 800074a:	b21b      	sxth	r3, r3
 800074c:	4313      	orrs	r3, r2
 800074e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	019b      	lsls	r3, r3, #6
 8000754:	b21b      	sxth	r3, r3
 8000756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800075a:	b21a      	sxth	r2, r3
 800075c:	7a7b      	ldrb	r3, [r7, #9]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8000764:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000768:	10db      	asrs	r3, r3, #3
 800076a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800076c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000770:	10db      	asrs	r3, r3, #3
 8000772:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	f107 0208 	add.w	r2, r7, #8
 800077c:	2304      	movs	r3, #4
 800077e:	21bc      	movs	r1, #188	; 0xbc
 8000780:	f000 fb2e 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000784:	7a7b      	ldrb	r3, [r7, #9]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21a      	sxth	r2, r3
 800078a:	7a3b      	ldrb	r3, [r7, #8]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b21a      	sxth	r2, r3
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	b21b      	sxth	r3, r3
 800079c:	4313      	orrs	r3, r2
 800079e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	b2d8      	uxtb	r0, r3
 80007a4:	f107 0208 	add.w	r2, r7, #8
 80007a8:	2302      	movs	r3, #2
 80007aa:	21aa      	movs	r1, #170	; 0xaa
 80007ac:	f000 fb18 	bl	8000de0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80007b0:	7a7b      	ldrb	r3, [r7, #9]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	7a3b      	ldrb	r3, [r7, #8]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80007be:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80007c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80007d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80007e6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80007ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80007fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ee07 3a90 	vmov	s15, r3
}
 8000816:	eeb0 0a67 	vmov.f32	s0, s15
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b598      	push	{r3, r4, r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fcf9 	bl	800121a <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_HSENSOR_Init();
 8000828:	f000 faf8 	bl	8000e1c <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 800082c:	f000 fb16 	bl	8000e5c <BSP_TSENSOR_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f822 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 f926 	bl	8000a84 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000838:	f000 f898 	bl	800096c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800083c:	f000 f8d6 	bl	80009ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <main+0x4c>)
 8000842:	f003 fe2d 	bl	80044a0 <HAL_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(hSensor_buffer, "Hello World");
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <main+0x50>)
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <main+0x54>)
 800084a:	4614      	mov	r4, r2
 800084c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800084e:	6020      	str	r0, [r4, #0]
 8000850:	6061      	str	r1, [r4, #4]
 8000852:	60a2      	str	r2, [r4, #8]
	  HAL_UART_Transmit(&huart1, (uint8_t*)hSensor_buffer, 100, 10000);
 8000854:	f242 7310 	movw	r3, #10000	; 0x2710
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	4905      	ldr	r1, [pc, #20]	; (8000870 <main+0x50>)
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <main+0x4c>)
 800085e:	f003 fe6f 	bl	8004540 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f000 fd12 	bl	800128c <HAL_Delay>
	  sprintf(hSensor_buffer, "Hello World");
 8000868:	e7ed      	b.n	8000846 <main+0x26>
 800086a:	bf00      	nop
 800086c:	20000164 	.word	0x20000164
 8000870:	20000098 	.word	0x20000098
 8000874:	08005194 	.word	0x08005194

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0bc      	sub	sp, #240	; 0xf0
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fc70 	bl	800516c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2294      	movs	r2, #148	; 0x94
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fc62 	bl	800516c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ac:	f001 fe72 	bl	8002594 <HAL_PWREx_ControlVoltageScaling>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0x42>
  {
    Error_Handler();
 80008b6:	f000 f95d 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ba:	2310      	movs	r3, #16
 80008bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008cc:	2360      	movs	r3, #96	; 0x60
 80008ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008e4:	2328      	movs	r3, #40	; 0x28
 80008e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000900:	4618      	mov	r0, r3
 8000902:	f001 feeb 	bl	80026dc <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800090c:	f000 f932 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000916:	2303      	movs	r3, #3
 8000918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f002 faf7 	bl	8002f28 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000940:	f000 f918 	bl	8000b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8000944:	2381      	movs	r3, #129	; 0x81
 8000946:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000948:	2300      	movs	r3, #0
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fdca 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800095e:	f000 f909 	bl	8000b74 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	37f0      	adds	r7, #240	; 0xf0
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_I2C2_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_I2C2_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_I2C2_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_I2C2_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C2_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009a8:	f001 f833 	bl	8001a12 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 f8df 	bl	8000b74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009ba:	f001 fd33 	bl	8002424 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f8d6 	bl	8000b74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2C2_Init+0x74>)
 80009cc:	f001 fd75 	bl	80024ba <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f8cd 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000004c 	.word	0x2000004c
 80009e4:	40005800 	.word	0x40005800
 80009e8:	10909cec 	.word	0x10909cec

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART1_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a36:	f003 fd33 	bl	80044a0 <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f898 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a48:	f004 fa87 	bl	8004f5a <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f88f 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a5a:	f004 fabc 	bl	8004fd6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f886 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART1_UART_Init+0x90>)
 8000a6a:	f004 fa3d 	bl	8004ee8 <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f87e 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000164 	.word	0x20000164
 8000a80:	40013800 	.word	0x40013800

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_GPIO_Init+0xbc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_GPIO_Init+0xc0>)
 8000aea:	f000 ff57 	bl	800199c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_GPIO_Init+0xc4>)
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	4812      	ldr	r0, [pc, #72]	; (8000b4c <MX_GPIO_Init+0xc8>)
 8000b04:	f000 fcc6 	bl	8001494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_GPIO_Init+0xc0>)
 8000b22:	f000 fcb7 	bl	8001494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2028      	movs	r0, #40	; 0x28
 8000b2c:	f000 fc88 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b30:	2028      	movs	r0, #40	; 0x28
 8000b32:	f000 fca1 	bl	8001478 <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	10110000 	.word	0x10110000
 8000b4c:	48000800 	.word	0x48000800

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fb73 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40001000 	.word	0x40001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <Error_Handler+0x6>

08000b7c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000b9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481b      	ldr	r0, [pc, #108]	; (8000c28 <I2Cx_MspInit+0xac>)
 8000bba:	f000 fc6b 	bl	8001494 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4818      	ldr	r0, [pc, #96]	; (8000c28 <I2Cx_MspInit+0xac>)
 8000bc6:	f000 fc65 	bl	8001494 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <I2Cx_MspInit+0xa8>)
 8000bf4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000bf8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	2021      	movs	r0, #33	; 0x21
 8000c00:	f000 fc1e 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000c04:	2021      	movs	r0, #33	; 0x21
 8000c06:	f000 fc37 	bl	8001478 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	2022      	movs	r0, #34	; 0x22
 8000c10:	f000 fc16 	bl	8001440 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000c14:	2022      	movs	r0, #34	; 0x22
 8000c16:	f000 fc2f 	bl	8001478 <HAL_NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000400 	.word	0x48000400

08000c2c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <I2Cx_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <I2Cx_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff89 	bl	8000b7c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fed1 	bl	8001a12 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000c70:	2100      	movs	r1, #0
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f001 fbd6 	bl	8002424 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005800 	.word	0x40005800
 8000c84:	00702681 	.word	0x00702681

08000c88 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af04      	add	r7, sp, #16
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4603      	mov	r3, r0
 8000c98:	72fb      	strb	r3, [r7, #11]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	813b      	strh	r3, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	88f8      	ldrh	r0, [r7, #6]
 8000cac:	893a      	ldrh	r2, [r7, #8]
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f001 f87a 	bl	8001db8 <HAL_I2C_Mem_Read>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000cce:	7afb      	ldrb	r3, [r7, #11]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f000 f832 	bl	8000d3c <I2Cx_Error>
  }
  return status;
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b08a      	sub	sp, #40	; 0x28
 8000ce6:	af04      	add	r7, sp, #16
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	4608      	mov	r0, r1
 8000cec:	4611      	mov	r1, r2
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	72fb      	strb	r3, [r7, #11]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	813b      	strh	r3, [r7, #8]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000d00:	7afb      	ldrb	r3, [r7, #11]
 8000d02:	b299      	uxth	r1, r3
 8000d04:	88f8      	ldrh	r0, [r7, #6]
 8000d06:	893a      	ldrh	r2, [r7, #8]
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	4603      	mov	r3, r0
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f000 ff39 	bl	8001b90 <HAL_I2C_Mem_Write>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f805 	bl	8000d3c <I2Cx_Error>
  }
  return status;
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 fef1 	bl	8001b30 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff6c 	bl	8000c2c <I2Cx_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <SENSOR_IO_Init+0x10>)
 8000d62:	f7ff ff63 	bl	8000c2c <I2Cx_Init>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000280 	.word	0x20000280

08000d70 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	79f9      	ldrb	r1, [r7, #7]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	1d7b      	adds	r3, r7, #5
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <SENSOR_IO_Write+0x30>)
 8000d94:	f7ff ffa5 	bl	8000ce2 <I2Cx_WriteMultiple>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000280 	.word	0x20000280

08000da4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	79f9      	ldrb	r1, [r7, #7]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	f107 030f 	add.w	r3, r7, #15
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4804      	ldr	r0, [pc, #16]	; (8000ddc <SENSOR_IO_Read+0x38>)
 8000dcc:	f7ff ff5c 	bl	8000c88 <I2Cx_ReadMultiple>

  return read_value;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000280 	.word	0x20000280

08000de0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
 8000de6:	603a      	str	r2, [r7, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	460b      	mov	r3, r1
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	4613      	mov	r3, r2
 8000df4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	79f9      	ldrb	r1, [r7, #7]
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <SENSOR_IO_ReadMultiple+0x38>)
 8000e08:	f7ff ff3e 	bl	8000c88 <I2Cx_ReadMultiple>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	b29b      	uxth	r3, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000280 	.word	0x20000280

08000e1c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <BSP_HSENSOR_Init+0x38>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	20be      	movs	r0, #190	; 0xbe
 8000e28:	4798      	blx	r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2bbc      	cmp	r3, #188	; 0xbc
 8000e2e:	d002      	beq.n	8000e36 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	e009      	b.n	8000e4a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <BSP_HSENSOR_Init+0x3c>)
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <BSP_HSENSOR_Init+0x38>)
 8000e3a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <BSP_HSENSOR_Init+0x3c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	20be      	movs	r0, #190	; 0xbe
 8000e44:	4798      	blx	r3
    ret = HSENSOR_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000044 	.word	0x20000044

08000e5c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <BSP_TSENSOR_Init+0x30>)
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <BSP_TSENSOR_Init+0x34>)
 8000e6a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8000e6c:	f7ff ff76 	bl	8000d5c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <BSP_TSENSOR_Init+0x30>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2100      	movs	r1, #0
 8000e78:	20be      	movs	r0, #190	; 0xbe
 8000e7a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000048 	.word	0x20000048
 8000e90:	2000000c 	.word	0x2000000c

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a17      	ldr	r2, [pc, #92]	; (8000f58 <HAL_I2C_MspInit+0x7c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d128      	bne.n	8000f50 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <HAL_I2C_MspInit+0x84>)
 8000f34:	f000 faae 	bl	8001494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f42:	6593      	str	r3, [r2, #88]	; 0x58
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_I2C_MspInit+0x80>)
 8000f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40005800 	.word	0x40005800
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	48000400 	.word	0x48000400

08000f64 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <HAL_I2C_MspDeInit+0x3c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10f      	bne.n	8000f96 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_I2C_MspDeInit+0x40>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_I2C_MspDeInit+0x40>)
 8000f7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <HAL_I2C_MspDeInit+0x44>)
 8000f88:	f000 fc16 	bl	80017b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8000f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <HAL_I2C_MspDeInit+0x44>)
 8000f92:	f000 fc11 	bl	80017b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40005800 	.word	0x40005800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d129      	bne.n	8001022 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001010:	2307      	movs	r3, #7
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f000 fa39 	bl	8001494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013800 	.word	0x40013800
 8001030:	40021000 	.word	0x40021000

08001034 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	2036      	movs	r0, #54	; 0x36
 800104a:	f000 f9f9 	bl	8001440 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800104e:	2036      	movs	r0, #54	; 0x36
 8001050:	f000 fa12 	bl	8001478 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <HAL_InitTick+0x9c>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_InitTick+0x9c>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	6593      	str	r3, [r2, #88]	; 0x58
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_InitTick+0x9c>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f944 	bl	8003304 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107c:	f002 f916 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8001080:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <HAL_InitTick+0xa0>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	3b01      	subs	r3, #1
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_InitTick+0xa4>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <HAL_InitTick+0xa8>)
 8001094:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_InitTick+0xa4>)
 8001098:	f240 32e7 	movw	r2, #999	; 0x3e7
 800109c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_InitTick+0xa4>)
 80010a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <HAL_InitTick+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_InitTick+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <HAL_InitTick+0xa4>)
 80010b2:	f002 ff23 	bl	8003efc <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d104      	bne.n	80010c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <HAL_InitTick+0xa4>)
 80010be:	f002 ff7f 	bl	8003fc0 <HAL_TIM_Base_Start_IT>
 80010c2:	4603      	mov	r3, r0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	431bde83 	.word	0x431bde83
 80010d8:	200002cc 	.word	0x200002cc
 80010dc:	40001000 	.word	0x40001000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800113a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800113e:	f000 fc45 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM6_DAC_IRQHandler+0x10>)
 800114e:	f002 ffa7 	bl	80040a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200002cc 	.word	0x200002cc

0800115c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <SystemInit+0x64>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <SystemInit+0x64>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <SystemInit+0x68>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <SystemInit+0x68>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <SystemInit+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <SystemInit+0x68>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <SystemInit+0x68>)
 8001188:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800118c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <SystemInit+0x68>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <SystemInit+0x68>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <SystemInit+0x68>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <SystemInit+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SystemInit+0x64>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	609a      	str	r2, [r3, #8]
#endif
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	40021000 	.word	0x40021000

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011cc:	f7ff ffc6 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011d2:	e003      	b.n	80011dc <LoopCopyDataInit>

080011d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011da:	3104      	adds	r1, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <LoopForever+0xe>)
	adds	r2, r0, r1
 80011e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011e4:	d3f6      	bcc.n	80011d4 <CopyDataInit>
	ldr	r2, =_sbss
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011e8:	e002      	b.n	80011f0 <LoopFillZerobss>

080011ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011ec:	f842 3b04 	str.w	r3, [r2], #4

080011f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LoopForever+0x16>)
	cmp	r2, r3
 80011f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011f4:	d3f9      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 ff95 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff fb11 	bl	8000820 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001200:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001204:	08005220 	.word	0x08005220
	ldr	r0, =_sdata
 8001208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800120c:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8001210:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 8001214:	2000031c 	.word	0x2000031c

08001218 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_IRQHandler>

0800121a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f900 	bl	800142a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ff02 	bl	8001034 <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e001      	b.n	8001240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123c:	f7ff fe2a 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001240:	79fb      	ldrb	r3, [r7, #7]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000024 	.word	0x20000024
 8001270:	20000318 	.word	0x20000318

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000318 	.word	0x20000318

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_Delay+0x40>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000024 	.word	0x20000024

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff4c 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001452:	f7ff ff61 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001456:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffb1 	bl	80013c4 <NVIC_EncodePriority>
 8001462:	4602      	mov	r2, r0
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff80 	bl	8001370 <__NVIC_SetPriority>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff54 	bl	8001334 <__NVIC_EnableIRQ>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a2:	e166      	b.n	8001772 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2101      	movs	r1, #1
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8158 	beq.w	800176c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d00b      	beq.n	80014dc <HAL_GPIO_Init+0x48>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0xea>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b12      	cmp	r3, #18
 800157c:	d123      	bne.n	80015c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	6939      	ldr	r1, [r7, #16]
 80015c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0203 	and.w	r2, r3, #3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80b2 	beq.w	800176c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_GPIO_Init+0x2fc>)
 800160a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160c:	4a60      	ldr	r2, [pc, #384]	; (8001790 <HAL_GPIO_Init+0x2fc>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6613      	str	r3, [r2, #96]	; 0x60
 8001614:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <HAL_GPIO_Init+0x2fc>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001620:	4a5c      	ldr	r2, [pc, #368]	; (8001794 <HAL_GPIO_Init+0x300>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800164a:	d02b      	beq.n	80016a4 <HAL_GPIO_Init+0x210>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_GPIO_Init+0x304>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d025      	beq.n	80016a0 <HAL_GPIO_Init+0x20c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x308>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d01f      	beq.n	800169c <HAL_GPIO_Init+0x208>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x30c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d019      	beq.n	8001698 <HAL_GPIO_Init+0x204>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_GPIO_Init+0x310>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x200>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <HAL_GPIO_Init+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1fc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <HAL_GPIO_Init+0x318>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1f8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <HAL_GPIO_Init+0x31c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1f4>
 8001684:	2307      	movs	r3, #7
 8001686:	e00e      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 8001688:	2308      	movs	r3, #8
 800168a:	e00c      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 800168c:	2306      	movs	r3, #6
 800168e:	e00a      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 8001690:	2305      	movs	r3, #5
 8001692:	e008      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 8001694:	2304      	movs	r3, #4
 8001696:	e006      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 8001698:	2303      	movs	r3, #3
 800169a:	e004      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 800169c:	2302      	movs	r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <HAL_GPIO_Init+0x212>
 80016a4:	2300      	movs	r3, #0
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	f002 0203 	and.w	r2, r2, #3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4093      	lsls	r3, r2
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b6:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x300>)
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_GPIO_Init+0x320>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e8:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_GPIO_Init+0x320>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_GPIO_Init+0x320>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001712:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <HAL_GPIO_Init+0x320>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_GPIO_Init+0x320>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_GPIO_Init+0x320>)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_GPIO_Init+0x320>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_GPIO_Init+0x320>)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f ae91 	bne.w	80014a4 <HAL_GPIO_Init+0x10>
  }
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	48001000 	.word	0x48001000
 80017a8:	48001400 	.word	0x48001400
 80017ac:	48001800 	.word	0x48001800
 80017b0:	48001c00 	.word	0x48001c00
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017c6:	e0c9      	b.n	800195c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80bc 	beq.w	8001956 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80017de:	4a66      	ldr	r2, [pc, #408]	; (8001978 <HAL_GPIO_DeInit+0x1c0>)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001806:	d02b      	beq.n	8001860 <HAL_GPIO_DeInit+0xa8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a5c      	ldr	r2, [pc, #368]	; (800197c <HAL_GPIO_DeInit+0x1c4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d025      	beq.n	800185c <HAL_GPIO_DeInit+0xa4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a5b      	ldr	r2, [pc, #364]	; (8001980 <HAL_GPIO_DeInit+0x1c8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d01f      	beq.n	8001858 <HAL_GPIO_DeInit+0xa0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_GPIO_DeInit+0x1cc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_GPIO_DeInit+0x9c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_GPIO_DeInit+0x1d0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_DeInit+0x98>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a58      	ldr	r2, [pc, #352]	; (800198c <HAL_GPIO_DeInit+0x1d4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_DeInit+0x94>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a57      	ldr	r2, [pc, #348]	; (8001990 <HAL_GPIO_DeInit+0x1d8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_DeInit+0x90>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_GPIO_DeInit+0x1dc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_DeInit+0x8c>
 8001840:	2307      	movs	r3, #7
 8001842:	e00e      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001844:	2308      	movs	r3, #8
 8001846:	e00c      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001848:	2306      	movs	r3, #6
 800184a:	e00a      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 800184c:	2305      	movs	r3, #5
 800184e:	e008      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001850:	2304      	movs	r3, #4
 8001852:	e006      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_DeInit+0xaa>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	429a      	cmp	r2, r3
 8001870:	d132      	bne.n	80018d8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	4947      	ldr	r1, [pc, #284]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 800187c:	4013      	ands	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001880:	4b45      	ldr	r3, [pc, #276]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	4943      	ldr	r1, [pc, #268]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 800188a:	4013      	ands	r3, r2
 800188c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	4940      	ldr	r1, [pc, #256]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 8001898:	4013      	ands	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	493c      	ldr	r1, [pc, #240]	; (8001998 <HAL_GPIO_DeInit+0x1e0>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80018ba:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <HAL_GPIO_DeInit+0x1c0>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	482b      	ldr	r0, [pc, #172]	; (8001978 <HAL_GPIO_DeInit+0x1c0>)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	400a      	ands	r2, r1
 80018d2:	3302      	adds	r3, #2
 80018d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2103      	movs	r1, #3
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	08d2      	lsrs	r2, r2, #3
 800190c:	4019      	ands	r1, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2103      	movs	r1, #3
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2103      	movs	r1, #3
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	f47f af2f 	bne.w	80017c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	48001800 	.word	0x48001800
 8001994:	48001c00 	.word	0x48001c00
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
 80019a8:	4613      	mov	r3, r2
 80019aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ac:	787b      	ldrb	r3, [r7, #1]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b8:	e002      	b.n	80019c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f806 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e081      	b.n	8001b28 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fa4f 	bl	8000edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2224      	movs	r2, #36	; 0x24
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	e006      	b.n	8001a9a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d104      	bne.n	8001aac <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aaa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001abe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ace:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	ea42 0103 	orr.w	r1, r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	021a      	lsls	r2, r3, #8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69d9      	ldr	r1, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e021      	b.n	8001b86 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2224      	movs	r2, #36	; 0x24
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fa02 	bl	8000f64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	817b      	strh	r3, [r7, #10]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	813b      	strh	r3, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	f040 80f9 	bne.w	8001daa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x34>
 8001bbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0ed      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Mem_Write+0x4e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e0e6      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001be6:	f7ff fb45 	bl	8001274 <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2319      	movs	r3, #25
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 fac3 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0d1      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2221      	movs	r2, #33	; 0x21
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c30:	88f8      	ldrh	r0, [r7, #6]
 8001c32:	893a      	ldrh	r2, [r7, #8]
 8001c34:	8979      	ldrh	r1, [r7, #10]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f9d3 	bl	8001fec <I2C_RequestMemoryWrite>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0a9      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2bff      	cmp	r3, #255	; 0xff
 8001c60:	d90e      	bls.n	8001c80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	22ff      	movs	r2, #255	; 0xff
 8001c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fba5 	bl	80023c8 <I2C_TransferConfig>
 8001c7e:	e00f      	b.n	8001ca0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fb94 	bl	80023c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 faad 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07b      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d034      	beq.n	8001d58 <HAL_I2C_Mem_Write+0x1c8>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d130      	bne.n	8001d58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fa3f 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04d      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d90e      	bls.n	8001d38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	8979      	ldrh	r1, [r7, #10]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fb49 	bl	80023c8 <I2C_TransferConfig>
 8001d36:	e00f      	b.n	8001d58 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	8979      	ldrh	r1, [r7, #10]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fb38 	bl	80023c8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d19e      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fa8c 	bl	8002284 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01a      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_I2C_Mem_Write+0x224>)
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	fe00e800 	.word	0xfe00e800

08001db8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	817b      	strh	r3, [r7, #10]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	813b      	strh	r3, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	f040 80fd 	bne.w	8001fda <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_I2C_Mem_Read+0x34>
 8001de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0f1      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_I2C_Mem_Read+0x4e>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e0ea      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e0e:	f7ff fa31 	bl	8001274 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2319      	movs	r3, #25
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f9af 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d5      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2222      	movs	r2, #34	; 0x22
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a3a      	ldr	r2, [r7, #32]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e58:	88f8      	ldrh	r0, [r7, #6]
 8001e5a:	893a      	ldrh	r2, [r7, #8]
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	4603      	mov	r3, r0
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f913 	bl	8002094 <I2C_RequestMemoryRead>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0ad      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d90e      	bls.n	8001ea8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	22ff      	movs	r2, #255	; 0xff
 8001e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	8979      	ldrh	r1, [r7, #10]
 8001e98:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <HAL_I2C_Mem_Read+0x22c>)
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fa91 	bl	80023c8 <I2C_TransferConfig>
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	8979      	ldrh	r1, [r7, #10]
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_I2C_Mem_Read+0x22c>)
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa80 	bl	80023c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f956 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07c      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d034      	beq.n	8001f88 <HAL_I2C_Mem_Read+0x1d0>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d130      	bne.n	8001f88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f927 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04d      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d90e      	bls.n	8001f68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8979      	ldrh	r1, [r7, #10]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fa31 	bl	80023c8 <I2C_TransferConfig>
 8001f66:	e00f      	b.n	8001f88 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fa20 	bl	80023c8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d19a      	bne.n	8001ec8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f974 	bl	8002284 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e01a      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_I2C_Mem_Read+0x230>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	80002400 	.word	0x80002400
 8001fe8:	fe00e800 	.word	0xfe00e800

08001fec <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <I2C_RequestMemoryWrite+0xa4>)
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f9d7 	bl	80023c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f8f0 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e02c      	b.n	8002088 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d105      	bne.n	8002040 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002034:	893b      	ldrh	r3, [r7, #8]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
 800203e:	e015      	b.n	800206c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002040:	893b      	ldrh	r3, [r7, #8]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8d6 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e012      	b.n	8002088 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002062:	893b      	ldrh	r3, [r7, #8]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2200      	movs	r2, #0
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f884 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	80002000 	.word	0x80002000

08002094 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	4608      	mov	r0, r1
 800209e:	4611      	mov	r1, r2
 80020a0:	461a      	mov	r2, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	817b      	strh	r3, [r7, #10]
 80020a6:	460b      	mov	r3, r1
 80020a8:	813b      	strh	r3, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <I2C_RequestMemoryRead+0xa4>)
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f984 	bl	80023c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f89d 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e02c      	b.n	800212e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020da:	893b      	ldrh	r3, [r7, #8]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
 80020e4:	e015      	b.n	8002112 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020e6:	893b      	ldrh	r3, [r7, #8]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f883 	bl	8002204 <I2C_WaitOnTXISFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e012      	b.n	800212e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002108:	893b      	ldrh	r3, [r7, #8]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2200      	movs	r2, #0
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f831 	bl	8002184 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	80002000 	.word	0x80002000

0800213c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b02      	cmp	r3, #2
 8002150:	d103      	bne.n	800215a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d007      	beq.n	8002178 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	619a      	str	r2, [r3, #24]
  }
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002194:	e022      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219c:	d01e      	beq.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219e:	f7ff f869 	bl	8001274 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e00f      	b.n	80021fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d0cd      	beq.n	8002196 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002210:	e02c      	b.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f870 	bl	80022fc <I2C_IsAcknowledgeFailed>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e02a      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222c:	d01e      	beq.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	f7ff f821 	bl	8001274 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d113      	bne.n	800226c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d1cb      	bne.n	8002212 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002290:	e028      	b.n	80022e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f830 	bl	80022fc <I2C_IsAcknowledgeFailed>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e026      	b.n	80022f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7fe ffe5 	bl	8001274 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d302      	bcc.n	80022bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d113      	bne.n	80022e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e007      	b.n	80022f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d1cf      	bne.n	8002292 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b10      	cmp	r3, #16
 8002314:	d151      	bne.n	80023ba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002316:	e022      	b.n	800235e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231e:	d01e      	beq.n	800235e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe ffa8 	bl	8001274 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d302      	bcc.n	8002336 <I2C_IsAcknowledgeFailed+0x3a>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e02e      	b.n	80023bc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b20      	cmp	r3, #32
 800236a:	d1d5      	bne.n	8002318 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2210      	movs	r2, #16
 8002372:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2220      	movs	r2, #32
 800237a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff fedd 	bl	800213c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <I2C_IsAcknowledgeFailed+0xc8>)
 800238e:	400b      	ands	r3, r1
 8002390:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f043 0204 	orr.w	r2, r3, #4
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	fe00e800 	.word	0xfe00e800

080023c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	817b      	strh	r3, [r7, #10]
 80023d6:	4613      	mov	r3, r2
 80023d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	0d5b      	lsrs	r3, r3, #21
 80023e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <I2C_TransferConfig+0x58>)
 80023ea:	430b      	orrs	r3, r1
 80023ec:	43db      	mvns	r3, r3
 80023ee:	ea02 0103 	and.w	r1, r2, r3
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023f8:	7a7b      	ldrb	r3, [r7, #9]
 80023fa:	041b      	lsls	r3, r3, #16
 80023fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	03ff63ff 	.word	0x03ff63ff

08002424 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	d138      	bne.n	80024ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002444:	2302      	movs	r3, #2
 8002446:	e032      	b.n	80024ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002476:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d139      	bne.n	8002544 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024da:	2302      	movs	r3, #2
 80024dc:	e033      	b.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2224      	movs	r2, #36	; 0x24
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800250c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_PWREx_GetVoltageRange+0x3c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002564:	d102      	bne.n	800256c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800256a:	e00b      	b.n	8002584 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_PWREx_GetVoltageRange+0x3c>)
 800256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d102      	bne.n	8002582 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800257c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002580:	e000      	b.n	8002584 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002582:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40007000 	.word	0x40007000

08002594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d141      	bne.n	8002626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d131      	bne.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b6:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c0:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025c8:	4a41      	ldr	r2, [pc, #260]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2232      	movs	r2, #50	; 0x32
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a3f      	ldr	r2, [pc, #252]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	0c9b      	lsrs	r3, r3, #18
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025e6:	e002      	b.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d102      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f2      	bne.n	80025e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d158      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e057      	b.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261a:	4a2d      	ldr	r2, [pc, #180]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002624:	e04d      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262c:	d141      	bne.n	80026b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263a:	d131      	bne.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002642:	4a23      	ldr	r2, [pc, #140]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800265a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2232      	movs	r2, #50	; 0x32
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002672:	e002      	b.n	800267a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b01      	subs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d102      	bne.n	800268e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f2      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d112      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e011      	b.n	80026c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026b0:	e007      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40007000 	.word	0x40007000
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	431bde83 	.word	0x431bde83

080026dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f000 bc16 	b.w	8002f1c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f0:	4ba0      	ldr	r3, [pc, #640]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026fa:	4b9e      	ldr	r3, [pc, #632]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80e4 	beq.w	80028da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x4c>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	f040 808b 	bne.w	8002836 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 8087 	bne.w	8002836 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x64>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e3ed      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_RCC_OscConfig+0x7e>
 8002750:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	e005      	b.n	8002766 <HAL_RCC_OscConfig+0x8a>
 800275a:	4b86      	ldr	r3, [pc, #536]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002766:	4293      	cmp	r3, r2
 8002768:	d223      	bcs.n	80027b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fdfa 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e3ce      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4977      	ldr	r1, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	4972      	ldr	r1, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]
 80027b0:	e025      	b.n	80027fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027b2:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b6d      	ldr	r3, [pc, #436]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	496a      	ldr	r1, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4965      	ldr	r1, [pc, #404]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fdba 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e38e      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027fe:	f000 fcbf 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a5a      	ldr	r2, [pc, #360]	; (8002978 <HAL_RCC_OscConfig+0x29c>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	fa21 f303 	lsr.w	r3, r1, r3
 800281a:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_OscConfig+0x2a0>)
 800281c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800281e:	4b58      	ldr	r3, [pc, #352]	; (8002980 <HAL_RCC_OscConfig+0x2a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc06 	bl	8001034 <HAL_InitTick>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d052      	beq.n	80028d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	e372      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d032      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800283e:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a4c      	ldr	r2, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284a:	f7fe fd13 	bl	8001274 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002852:	f7fe fd0f 	bl	8001274 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e35b      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002870:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3f      	ldr	r2, [pc, #252]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	493a      	ldr	r1, [pc, #232]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
 80028a2:	e01a      	b.n	80028da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a32      	ldr	r2, [pc, #200]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b0:	f7fe fce0 	bl	8001274 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b8:	f7fe fcdc 	bl	8001274 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e328      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1dc>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d073      	beq.n	80029ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x21c>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10b      	bne.n	8002910 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d063      	beq.n	80029cc <HAL_RCC_OscConfig+0x2f0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d15f      	bne.n	80029cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e305      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d106      	bne.n	8002928 <HAL_RCC_OscConfig+0x24c>
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a15      	ldr	r2, [pc, #84]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <HAL_RCC_OscConfig+0x288>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x270>
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x288>
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <HAL_RCC_OscConfig+0x298>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fc82 	bl	8001274 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	e010      	b.n	8002996 <HAL_RCC_OscConfig+0x2ba>
 8002974:	40021000 	.word	0x40021000
 8002978:	080051b0 	.word	0x080051b0
 800297c:	2000001c 	.word	0x2000001c
 8002980:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fc76 	bl	8001274 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e2c2      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002996:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x2a8>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe fc66 	bl	8001274 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7fe fc62 	bl	8001274 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e2ae      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	4ba5      	ldr	r3, [pc, #660]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x2d0>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d060      	beq.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d005      	beq.n	80029ec <HAL_RCC_OscConfig+0x310>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d119      	bne.n	8002a1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d116      	bne.n	8002a1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ec:	4b99      	ldr	r3, [pc, #612]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_OscConfig+0x328>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e28b      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	4990      	ldr	r1, [pc, #576]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a18:	e040      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d023      	beq.n	8002a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a22:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a8b      	ldr	r2, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fc21 	bl	8001274 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe fc1d 	bl	8001274 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e269      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a48:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	497c      	ldr	r1, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	e018      	b.n	8002a9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fbfd 	bl	8001274 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fbf9 	bl	8001274 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e245      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f0      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d03c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01c      	beq.n	8002aea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ab0:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	4a67      	ldr	r2, [pc, #412]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fbd8 	bl	8001274 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fbd4 	bl	8001274 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e220      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ef      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x3ec>
 8002ae8:	e01b      	b.n	8002b22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aea:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af0:	4a58      	ldr	r2, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afa:	f7fe fbbb 	bl	8001274 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b02:	f7fe fbb7 	bl	8001274 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e203      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ef      	bne.n	8002b02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80a6 	beq.w	8002c7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b34:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	4a43      	ldr	r2, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_RCC_OscConfig+0x57c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d118      	bne.n	8002b9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b68:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x57c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <HAL_RCC_OscConfig+0x57c>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fb7e 	bl	8001274 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fb7a 	bl	8001274 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1c6      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8e:	4b32      	ldr	r3, [pc, #200]	; (8002c58 <HAL_RCC_OscConfig+0x57c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d108      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4d8>
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb2:	e024      	b.n	8002bfe <HAL_RCC_OscConfig+0x522>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d110      	bne.n	8002bde <HAL_RCC_OscConfig+0x502>
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bdc:	e00f      	b.n	8002bfe <HAL_RCC_OscConfig+0x522>
 8002bde:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f023 0304 	bic.w	r3, r3, #4
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c06:	f7fe fb35 	bl	8001274 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fb31 	bl	8001274 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e17b      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x578>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ed      	beq.n	8002c0e <HAL_RCC_OscConfig+0x532>
 8002c32:	e01a      	b.n	8002c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fb1e 	bl	8001274 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c3a:	e00f      	b.n	8002c5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fb1a 	bl	8001274 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d906      	bls.n	8002c5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e164      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c5c:	4ba8      	ldr	r3, [pc, #672]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e8      	bne.n	8002c3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4ba3      	ldr	r3, [pc, #652]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	4aa2      	ldr	r2, [pc, #648]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d03c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01c      	beq.n	8002cca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c90:	4b9b      	ldr	r3, [pc, #620]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c96:	4a9a      	ldr	r2, [pc, #616]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fae8 	bl	8001274 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca8:	f7fe fae4 	bl	8001274 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e130      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cba:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ef      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x5cc>
 8002cc8:	e01b      	b.n	8002d02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cca:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd0:	4a8b      	ldr	r2, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe facb 	bl	8001274 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ce2:	f7fe fac7 	bl	8001274 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e113      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ef      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8107 	beq.w	8002f1a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f040 80cb 	bne.w	8002eac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d16:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d12c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	3b01      	subs	r3, #1
 8002d36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d123      	bne.n	8002d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d11b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d113      	bne.n	8002d84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d06d      	beq.n	8002e60 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d068      	beq.n	8002e5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d96:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0ba      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a55      	ldr	r2, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002db2:	f7fe fa5f 	bl	8001274 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dba:	f7fe fa5b 	bl	8001274 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0a7      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_RCC_OscConfig+0x828>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002df2:	0212      	lsls	r2, r2, #8
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0552      	lsls	r2, r2, #21
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0652      	lsls	r2, r2, #25
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e12:	06d2      	lsls	r2, r2, #27
 8002e14:	430a      	orrs	r2, r1
 8002e16:	493a      	ldr	r1, [pc, #232]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a37      	ldr	r2, [pc, #220]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e34:	f7fe fa1e 	bl	8001274 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fa1a 	bl	8001274 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e066      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5a:	e05e      	b.n	8002f1a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e05d      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d156      	bne.n	8002f1a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a20      	ldr	r2, [pc, #128]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e84:	f7fe f9f6 	bl	8001274 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7fe f9f2 	bl	8001274 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e03e      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x7b0>
 8002eaa:	e036      	b.n	8002f1a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d031      	beq.n	8002f16 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a12      	ldr	r2, [pc, #72]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ed0:	f023 0303 	bic.w	r3, r3, #3
 8002ed4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x824>)
 8002edc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f9c5 	bl	8001274 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe f9c1 	bl	8001274 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d905      	bls.n	8002f08 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e00d      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCC_OscConfig+0x848>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ec      	bne.n	8002eee <HAL_RCC_OscConfig+0x812>
 8002f14:	e001      	b.n	8002f1a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e10f      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b86      	ldr	r3, [pc, #536]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	4984      	ldr	r1, [pc, #528]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0f7      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8089 	beq.w	8003090 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b03      	cmp	r3, #3
 8002f84:	d133      	bne.n	8002fee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f86:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0e4      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f96:	f000 fa41 	bl	800341c <RCC_GetSysClockFreqFromPLLSource>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	4b74      	ldr	r3, [pc, #464]	; (8003170 <HAL_RCC_ClockConfig+0x248>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d955      	bls.n	800304e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fa2:	4b72      	ldr	r3, [pc, #456]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fae:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb6:	4a6d      	ldr	r2, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e044      	b.n	800304e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03e      	beq.n	800304e <HAL_RCC_ClockConfig+0x126>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d13a      	bne.n	800304e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fe0:	4a62      	ldr	r2, [pc, #392]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e02f      	b.n	800304e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0ac      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300e:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0a0      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e098      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800302e:	f000 f8a7 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_RCC_ClockConfig+0x248>)
 8003036:	429a      	cmp	r2, r3
 8003038:	d909      	bls.n	800304e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003042:	4a4a      	ldr	r2, [pc, #296]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003048:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4944      	ldr	r1, [pc, #272]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003060:	f7fe f908 	bl	8001274 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	e00a      	b.n	800307e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003068:	f7fe f904 	bl	8001274 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e070      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 020c 	and.w	r2, r3, #12
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	429a      	cmp	r2, r3
 800308e:	d1eb      	bne.n	8003068 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4930      	ldr	r1, [pc, #192]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b80      	cmp	r3, #128	; 0x80
 80030b4:	d105      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4a2c      	ldr	r2, [pc, #176]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d210      	bcs.n	80030f2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d0:	4b25      	ldr	r3, [pc, #148]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 020f 	bic.w	r2, r3, #15
 80030d8:	4923      	ldr	r1, [pc, #140]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d001      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e036      	b.n	8003160 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	4918      	ldr	r1, [pc, #96]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4910      	ldr	r1, [pc, #64]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003130:	f000 f826 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8003134:	4601      	mov	r1, r0
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RCC_ClockConfig+0x24c>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa21 f303 	lsr.w	r3, r1, r3
 800314c:	4a0a      	ldr	r2, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x250>)
 800314e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <HAL_RCC_ClockConfig+0x254>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd ff6d 	bl	8001034 <HAL_InitTick>
 800315a:	4603      	mov	r3, r0
 800315c:	73fb      	strb	r3, [r7, #15]

  return status;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40022000 	.word	0x40022000
 800316c:	40021000 	.word	0x40021000
 8003170:	04c4b400 	.word	0x04c4b400
 8003174:	080051b0 	.word	0x080051b0
 8003178:	2000001c 	.word	0x2000001c
 800317c:	20000020 	.word	0x20000020

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003198:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x34>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d121      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d11e      	bne.n	80031f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031d0:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031dc:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031f8:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e004      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d101      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_RCC_GetSysClockFreq+0x110>)
 8003206:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d133      	bne.n	8003276 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d002      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0xa4>
 800321e:	2b03      	cmp	r3, #3
 8003220:	d003      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xaa>
 8003222:	e005      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003226:	617b      	str	r3, [r7, #20]
      break;
 8003228:	e005      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_GetSysClockFreq+0x110>)
 800322c:	617b      	str	r3, [r7, #20]
      break;
 800322e:	e002      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	617b      	str	r3, [r7, #20]
      break;
 8003234:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	3301      	adds	r3, #1
 8003242:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	fb02 f203 	mul.w	r2, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_GetSysClockFreq+0x104>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0e5b      	lsrs	r3, r3, #25
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003276:	69bb      	ldr	r3, [r7, #24]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3724      	adds	r7, #36	; 0x24
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000
 8003288:	080051c8 	.word	0x080051c8
 800328c:	00f42400 	.word	0x00f42400
 8003290:	007a1200 	.word	0x007a1200

08003294 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800329a:	681b      	ldr	r3, [r3, #0]
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	2000001c 	.word	0x2000001c

080032ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032b0:	f7ff fff0 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	080051c0 	.word	0x080051c0

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032dc:	f7ff ffda 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	080051c0 	.word	0x080051c0

08003304 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	220f      	movs	r2, #15
 8003312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RCC_GetClockConfig+0x60>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40022000 	.word	0x40022000

08003368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003380:	f7ff f8e8 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 8003384:	6178      	str	r0, [r7, #20]
 8003386:	e014      	b.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f8d8 	bl	8002554 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b8:	d10b      	bne.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d913      	bls.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2ba0      	cmp	r3, #160	; 0xa0
 80033c4:	d902      	bls.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c6:	2302      	movs	r3, #2
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e00d      	b.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033cc:	2301      	movs	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e00a      	b.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b7f      	cmp	r3, #127	; 0x7f
 80033d6:	d902      	bls.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033d8:	2302      	movs	r3, #2
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e004      	b.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d101      	bne.n	80033e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e4:	2301      	movs	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 020f 	bic.w	r2, r3, #15
 80033f0:	4909      	ldr	r1, [pc, #36]	; (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40021000 	.word	0x40021000
 8003418:	40022000 	.word	0x40022000

0800341c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003426:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d118      	bne.n	8003464 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e005      	b.n	800345a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800344e:	4b23      	ldr	r3, [pc, #140]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003462:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d002      	beq.n	800347a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003478:	e005      	b.n	8003486 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800347c:	613b      	str	r3, [r7, #16]
    break;
 800347e:	e005      	b.n	800348c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003482:	613b      	str	r3, [r7, #16]
    break;
 8003484:	e002      	b.n	800348c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	613b      	str	r3, [r7, #16]
    break;
 800348a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3301      	adds	r3, #1
 8003498:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	fb02 f203 	mul.w	r2, r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0e5b      	lsrs	r3, r3, #25
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	3301      	adds	r3, #1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034cc:	683b      	ldr	r3, [r7, #0]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	080051c8 	.word	0x080051c8
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f4:	2300      	movs	r3, #0
 80034f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f8:	2300      	movs	r3, #0
 80034fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	2b00      	cmp	r3, #0
 8003506:	d03d      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d00b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d804      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003518:	2b20      	cmp	r3, #32
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800351c:	e01d      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800351e:	2b60      	cmp	r3, #96	; 0x60
 8003520:	d01e      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d01c      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003526:	e018      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003528:	4b86      	ldr	r3, [pc, #536]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a85      	ldr	r2, [pc, #532]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003534:	e015      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fafd 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003546:	e00c      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3320      	adds	r3, #32
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fbe4 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	74fb      	strb	r3, [r7, #19]
      break;
 800355e:	e000      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003568:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800356a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800356e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003576:	4973      	ldr	r1, [pc, #460]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800357e:	e001      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d042      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003598:	d00f      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xce>
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d805      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d011      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a8:	d017      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xee>
 80035aa:	e01f      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	d01f      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b6:	d01c      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b8:	e018      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ba:	4b62      	ldr	r3, [pc, #392]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4a61      	ldr	r2, [pc, #388]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c6:	e015      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3304      	adds	r3, #4
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fab4 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d8:	e00c      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3320      	adds	r3, #32
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fb9b 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ea:	e003      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	74fb      	strb	r3, [r7, #19]
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80035f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fa:	4b52      	ldr	r3, [pc, #328]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	494e      	ldr	r1, [pc, #312]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003610:	e001      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 809f 	beq.w	8003762 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003624:	2300      	movs	r3, #0
 8003626:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003628:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b41      	ldr	r3, [pc, #260]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	4a40      	ldr	r2, [pc, #256]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
 800364a:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3a      	ldr	r2, [pc, #232]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003666:	f7fd fe05 	bl	8001274 <HAL_GetTick>
 800366a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366c:	e009      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fd fe01 	bl	8001274 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d902      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	74fb      	strb	r3, [r7, #19]
        break;
 8003680:	e005      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ef      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800368e:	7cfb      	ldrb	r3, [r7, #19]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d15b      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01f      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d019      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036ce:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	4a1b      	ldr	r2, [pc, #108]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036de:	4a19      	ldr	r2, [pc, #100]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d016      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd fdc0 	bl	8001274 <HAL_GetTick>
 80036f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	e00b      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fdbc 	bl	8001274 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d902      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	74fb      	strb	r3, [r7, #19]
            break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ec      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10c      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	74bb      	strb	r3, [r7, #18]
 8003742:	e005      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003744:	40021000 	.word	0x40021000
 8003748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003750:	7c7b      	ldrb	r3, [r7, #17]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	4a9f      	ldr	r2, [pc, #636]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003760:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800376e:	4b9a      	ldr	r3, [pc, #616]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f023 0203 	bic.w	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	4996      	ldr	r1, [pc, #600]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003790:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 020c 	bic.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	498e      	ldr	r1, [pc, #568]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	4985      	ldr	r1, [pc, #532]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	497d      	ldr	r1, [pc, #500]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037f6:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003804:	4974      	ldr	r1, [pc, #464]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003818:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003826:	496c      	ldr	r1, [pc, #432]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003848:	4963      	ldr	r1, [pc, #396]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386a:	495b      	ldr	r1, [pc, #364]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	4952      	ldr	r1, [pc, #328]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	494a      	ldr	r1, [pc, #296]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c2:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	4941      	ldr	r1, [pc, #260]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038e4:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f2:	4939      	ldr	r1, [pc, #228]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d028      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	4930      	ldr	r1, [pc, #192]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003924:	d106      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003926:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003930:	60d3      	str	r3, [r2, #12]
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f8f9 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d04d      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396c:	d108      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800396e:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800397e:	e012      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800398c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800399e:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039ae:	d106      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
 80039bc:	e020      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c6:	d109      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a02      	ldr	r2, [pc, #8]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e014      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f8a5 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d028      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1a:	4947      	ldr	r1, [pc, #284]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2c:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a41      	ldr	r2, [pc, #260]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a36:	60d3      	str	r3, [r2, #12]
 8003a38:	e011      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f876 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6a:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7a:	492f      	ldr	r1, [pc, #188]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f851 	bl	8003b3c <RCCEx_PLLSAI1_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab4:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aba:	f023 0204 	bic.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac4:	491c      	ldr	r1, [pc, #112]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ade:	f023 0218 	bic.w	r2, r3, #24
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	4913      	ldr	r1, [pc, #76]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d017      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	490a      	ldr	r1, [pc, #40]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b56:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0203 	and.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d103      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
       ||
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d13f      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e03c      	b.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d00c      	beq.n	8003b96 <RCCEx_PLLSAI1_Config+0x5a>
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d013      	beq.n	8003ba8 <RCCEx_PLLSAI1_Config+0x6c>
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d120      	bne.n	8003bc6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b84:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11d      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e01a      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b96:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba6:	e013      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ba8:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bb4:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bc4:	e006      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bca:	e004      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e002      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e000      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bd4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 0203 	bic.w	r2, r3, #3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4948      	ldr	r1, [pc, #288]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8086 	bne.w	8003d02 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bf6:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a44      	ldr	r2, [pc, #272]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fd fb37 	bl	8001274 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c08:	e009      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c0a:	f7fd fb33 	bl	8001274 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d902      	bls.n	8003c1e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1c:	e005      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ef      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d168      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d113      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6892      	ldr	r2, [r2, #8]
 8003c42:	0211      	lsls	r1, r2, #8
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	06d2      	lsls	r2, r2, #27
 8003c4a:	4311      	orrs	r1, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6852      	ldr	r2, [r2, #4]
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0112      	lsls	r2, r2, #4
 8003c54:	430a      	orrs	r2, r1
 8003c56:	492d      	ldr	r1, [pc, #180]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	610b      	str	r3, [r1, #16]
 8003c5c:	e02d      	b.n	8003cba <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d115      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	0211      	lsls	r1, r2, #8
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6912      	ldr	r2, [r2, #16]
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0552      	lsls	r2, r2, #21
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	3a01      	subs	r2, #1
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	430a      	orrs	r2, r1
 8003c88:	4920      	ldr	r1, [pc, #128]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
 8003c8e:	e014      	b.n	8003cba <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c90:	4b1e      	ldr	r3, [pc, #120]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6892      	ldr	r2, [r2, #8]
 8003c9c:	0211      	lsls	r1, r2, #8
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6952      	ldr	r2, [r2, #20]
 8003ca2:	0852      	lsrs	r2, r2, #1
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0652      	lsls	r2, r2, #25
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6852      	ldr	r2, [r2, #4]
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0112      	lsls	r2, r2, #4
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	4915      	ldr	r1, [pc, #84]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fad5 	bl	8001274 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ccc:	e009      	b.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cce:	f7fd fad1 	bl	8001274 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d902      	bls.n	8003ce2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	73fb      	strb	r3, [r7, #15]
          break;
 8003ce0:	e005      	b.n	8003cee <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ef      	beq.n	8003cce <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4903      	ldr	r1, [pc, #12]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	07ff800f 	.word	0x07ff800f
 8003d14:	ff9f800f 	.word	0xff9f800f
 8003d18:	f9ff800f 	.word	0xf9ff800f

08003d1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2a:	4b70      	ldr	r3, [pc, #448]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d36:	4b6d      	ldr	r3, [pc, #436]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d103      	bne.n	8003d4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13f      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	e03c      	b.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d00c      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x5a>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d013      	beq.n	8003d88 <RCCEx_PLLSAI2_Config+0x6c>
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d120      	bne.n	8003da6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11d      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e01a      	b.n	8003dac <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d76:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d116      	bne.n	8003db0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d86:	e013      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d88:	4b58      	ldr	r3, [pc, #352]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10f      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d94:	4b55      	ldr	r3, [pc, #340]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003da4:	e006      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      break;
 8003daa:	e004      	b.n	8003db6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003dac:	bf00      	nop
 8003dae:	e002      	b.n	8003db6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003db4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d108      	bne.n	8003dce <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4948      	ldr	r1, [pc, #288]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f040 8086 	bne.w	8003ee2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dd6:	4b45      	ldr	r3, [pc, #276]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a44      	ldr	r2, [pc, #272]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de2:	f7fd fa47 	bl	8001274 <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de8:	e009      	b.n	8003dfe <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dea:	f7fd fa43 	bl	8001274 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dfe:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ef      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d168      	bne.n	8003ee2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d113      	bne.n	8003e3e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e16:	4b35      	ldr	r3, [pc, #212]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6892      	ldr	r2, [r2, #8]
 8003e22:	0211      	lsls	r1, r2, #8
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68d2      	ldr	r2, [r2, #12]
 8003e28:	06d2      	lsls	r2, r2, #27
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	3a01      	subs	r2, #1
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	430a      	orrs	r2, r1
 8003e36:	492d      	ldr	r1, [pc, #180]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	614b      	str	r3, [r1, #20]
 8003e3c:	e02d      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d115      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	4b2a      	ldr	r3, [pc, #168]	; (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6892      	ldr	r2, [r2, #8]
 8003e50:	0211      	lsls	r1, r2, #8
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6912      	ldr	r2, [r2, #16]
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0552      	lsls	r2, r2, #21
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6852      	ldr	r2, [r2, #4]
 8003e62:	3a01      	subs	r2, #1
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	430a      	orrs	r2, r1
 8003e68:	4920      	ldr	r1, [pc, #128]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	614b      	str	r3, [r1, #20]
 8003e6e:	e014      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e70:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6892      	ldr	r2, [r2, #8]
 8003e7c:	0211      	lsls	r1, r2, #8
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6952      	ldr	r2, [r2, #20]
 8003e82:	0852      	lsrs	r2, r2, #1
 8003e84:	3a01      	subs	r2, #1
 8003e86:	0652      	lsls	r2, r2, #25
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6852      	ldr	r2, [r2, #4]
 8003e8e:	3a01      	subs	r2, #1
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	430a      	orrs	r2, r1
 8003e94:	4915      	ldr	r1, [pc, #84]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd f9e5 	bl	8001274 <HAL_GetTick>
 8003eaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eac:	e009      	b.n	8003ec2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eae:	f7fd f9e1 	bl	8001274 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d902      	bls.n	8003ec2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec0:	e005      	b.n	8003ece <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ef      	beq.n	8003eae <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	07ff800f 	.word	0x07ff800f
 8003ef4:	ff9f800f 	.word	0xff9f800f
 8003ef8:	f9ff800f 	.word	0xf9ff800f

08003efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e049      	b.n	8003fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f841 	bl	8003faa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 f9f8 	bl	8004330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d001      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e04f      	b.n	8004078 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d018      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_TIM_Base_Start_IT+0xc8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_TIM_Base_Start_IT+0xcc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_TIM_Base_Start_IT+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_TIM_Base_Start_IT+0xd4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIM_Base_Start_IT+0x76>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_TIM_Base_Start_IT+0xd8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d115      	bne.n	8004062 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <HAL_TIM_Base_Start_IT+0xdc>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b06      	cmp	r3, #6
 8004046:	d015      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d011      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	e008      	b.n	8004074 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e000      	b.n	8004076 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004074:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40013400 	.word	0x40013400
 8004098:	40014000 	.word	0x40014000
 800409c:	00010007 	.word	0x00010007

080040a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d122      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d11b      	bne.n	80040fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0202 	mvn.w	r2, #2
 80040cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f905 	bl	80042f2 <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f8f7 	bl	80042de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f908 	bl	8004306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0204 	mvn.w	r2, #4
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8db 	bl	80042f2 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8cd 	bl	80042de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8de 	bl	8004306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b08      	cmp	r3, #8
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0208 	mvn.w	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2204      	movs	r2, #4
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8b1 	bl	80042f2 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8a3 	bl	80042de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8b4 	bl	8004306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0210 	mvn.w	r2, #16
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2208      	movs	r2, #8
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f887 	bl	80042f2 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f879 	bl	80042de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f88a 	bl	8004306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0201 	mvn.w	r2, #1
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc fc96 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f914 	bl	8004478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425e:	d10e      	bne.n	800427e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d107      	bne.n	800427e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f907 	bl	800448c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d10e      	bne.n	80042aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d107      	bne.n	80042aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f838 	bl	800431a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0220 	mvn.w	r2, #32
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8c7 	bl	8004464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a40      	ldr	r2, [pc, #256]	; (8004444 <TIM_Base_SetConfig+0x114>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434e:	d00f      	beq.n	8004370 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3d      	ldr	r2, [pc, #244]	; (8004448 <TIM_Base_SetConfig+0x118>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3c      	ldr	r2, [pc, #240]	; (800444c <TIM_Base_SetConfig+0x11c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3b      	ldr	r2, [pc, #236]	; (8004450 <TIM_Base_SetConfig+0x120>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3a      	ldr	r2, [pc, #232]	; (8004454 <TIM_Base_SetConfig+0x124>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d108      	bne.n	8004382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <TIM_Base_SetConfig+0x114>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01f      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d01b      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2c      	ldr	r2, [pc, #176]	; (8004448 <TIM_Base_SetConfig+0x118>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d017      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2b      	ldr	r2, [pc, #172]	; (800444c <TIM_Base_SetConfig+0x11c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2a      	ldr	r2, [pc, #168]	; (8004450 <TIM_Base_SetConfig+0x120>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00f      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a29      	ldr	r2, [pc, #164]	; (8004454 <TIM_Base_SetConfig+0x124>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00b      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a28      	ldr	r2, [pc, #160]	; (8004458 <TIM_Base_SetConfig+0x128>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a27      	ldr	r2, [pc, #156]	; (800445c <TIM_Base_SetConfig+0x12c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d003      	beq.n	80043ca <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <TIM_Base_SetConfig+0x130>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d108      	bne.n	80043dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <TIM_Base_SetConfig+0x114>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <TIM_Base_SetConfig+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a11      	ldr	r2, [pc, #68]	; (8004458 <TIM_Base_SetConfig+0x128>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_Base_SetConfig+0xf8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a10      	ldr	r2, [pc, #64]	; (800445c <TIM_Base_SetConfig+0x12c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_Base_SetConfig+0xf8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <TIM_Base_SetConfig+0x130>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d103      	bne.n	8004430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	615a      	str	r2, [r3, #20]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e042      	b.n	8004538 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fc fd71 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f8c4 	bl	8004670 <UART_SetConfig>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e022      	b.n	8004538 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fb8a 	bl	8004c14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fc11 	bl	8004d58 <UART_CheckIdleState>
 8004536:	4603      	mov	r3, r0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	; 0x28
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	2b20      	cmp	r3, #32
 8004558:	f040 8084 	bne.w	8004664 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Transmit+0x28>
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e07c      	b.n	8004666 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_UART_Transmit+0x3a>
 8004576:	2302      	movs	r3, #2
 8004578:	e075      	b.n	8004666 <HAL_UART_Transmit+0x126>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2221      	movs	r2, #33	; 0x21
 800458e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004592:	f7fc fe6f 	bl	8001274 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	88fa      	ldrh	r2, [r7, #6]
 800459c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d108      	bne.n	80045c4 <HAL_UART_Transmit+0x84>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	e003      	b.n	80045cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80045d4:	e02d      	b.n	8004632 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	2180      	movs	r1, #128	; 0x80
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fc01 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e03a      	b.n	8004666 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004602:	b292      	uxth	r2, r2
 8004604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	3302      	adds	r3, #2
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	e008      	b.n	8004620 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b292      	uxth	r2, r2
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3301      	adds	r3, #1
 800461e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1cb      	bne.n	80045d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2140      	movs	r1, #64	; 0x40
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fbcd 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e006      	b.n	8004666 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004670:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004674:	b088      	sub	sp, #32
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4313      	orrs	r3, r2
 8004694:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	4313      	orrs	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4bb1      	ldr	r3, [pc, #708]	; (800496c <UART_SetConfig+0x2fc>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4aa6      	ldr	r2, [pc, #664]	; (8004970 <UART_SetConfig+0x300>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f023 010f 	bic.w	r1, r3, #15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a97      	ldr	r2, [pc, #604]	; (8004974 <UART_SetConfig+0x304>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d121      	bne.n	8004760 <UART_SetConfig+0xf0>
 800471c:	4b96      	ldr	r3, [pc, #600]	; (8004978 <UART_SetConfig+0x308>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b03      	cmp	r3, #3
 8004728:	d816      	bhi.n	8004758 <UART_SetConfig+0xe8>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0xc0>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004741 	.word	0x08004741
 8004734:	0800474d 	.word	0x0800474d
 8004738:	08004747 	.word	0x08004747
 800473c:	08004753 	.word	0x08004753
 8004740:	2301      	movs	r3, #1
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	e0e8      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004746:	2302      	movs	r3, #2
 8004748:	76fb      	strb	r3, [r7, #27]
 800474a:	e0e5      	b.n	8004918 <UART_SetConfig+0x2a8>
 800474c:	2304      	movs	r3, #4
 800474e:	76fb      	strb	r3, [r7, #27]
 8004750:	e0e2      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004752:	2308      	movs	r3, #8
 8004754:	76fb      	strb	r3, [r7, #27]
 8004756:	e0df      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004758:	2310      	movs	r3, #16
 800475a:	76fb      	strb	r3, [r7, #27]
 800475c:	bf00      	nop
 800475e:	e0db      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a85      	ldr	r2, [pc, #532]	; (800497c <UART_SetConfig+0x30c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d134      	bne.n	80047d4 <UART_SetConfig+0x164>
 800476a:	4b83      	ldr	r3, [pc, #524]	; (8004978 <UART_SetConfig+0x308>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d829      	bhi.n	80047cc <UART_SetConfig+0x15c>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x110>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047cd 	.word	0x080047cd
 8004788:	080047cd 	.word	0x080047cd
 800478c:	080047cd 	.word	0x080047cd
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047cd 	.word	0x080047cd
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047cd 	.word	0x080047cd
 80047a0:	080047bb 	.word	0x080047bb
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047c7 	.word	0x080047c7
 80047b4:	2300      	movs	r3, #0
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	e0ae      	b.n	8004918 <UART_SetConfig+0x2a8>
 80047ba:	2302      	movs	r3, #2
 80047bc:	76fb      	strb	r3, [r7, #27]
 80047be:	e0ab      	b.n	8004918 <UART_SetConfig+0x2a8>
 80047c0:	2304      	movs	r3, #4
 80047c2:	76fb      	strb	r3, [r7, #27]
 80047c4:	e0a8      	b.n	8004918 <UART_SetConfig+0x2a8>
 80047c6:	2308      	movs	r3, #8
 80047c8:	76fb      	strb	r3, [r7, #27]
 80047ca:	e0a5      	b.n	8004918 <UART_SetConfig+0x2a8>
 80047cc:	2310      	movs	r3, #16
 80047ce:	76fb      	strb	r3, [r7, #27]
 80047d0:	bf00      	nop
 80047d2:	e0a1      	b.n	8004918 <UART_SetConfig+0x2a8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a69      	ldr	r2, [pc, #420]	; (8004980 <UART_SetConfig+0x310>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d120      	bne.n	8004820 <UART_SetConfig+0x1b0>
 80047de:	4b66      	ldr	r3, [pc, #408]	; (8004978 <UART_SetConfig+0x308>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047e8:	2b10      	cmp	r3, #16
 80047ea:	d00f      	beq.n	800480c <UART_SetConfig+0x19c>
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d802      	bhi.n	80047f6 <UART_SetConfig+0x186>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <UART_SetConfig+0x190>
 80047f4:	e010      	b.n	8004818 <UART_SetConfig+0x1a8>
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d005      	beq.n	8004806 <UART_SetConfig+0x196>
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d009      	beq.n	8004812 <UART_SetConfig+0x1a2>
 80047fe:	e00b      	b.n	8004818 <UART_SetConfig+0x1a8>
 8004800:	2300      	movs	r3, #0
 8004802:	76fb      	strb	r3, [r7, #27]
 8004804:	e088      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004806:	2302      	movs	r3, #2
 8004808:	76fb      	strb	r3, [r7, #27]
 800480a:	e085      	b.n	8004918 <UART_SetConfig+0x2a8>
 800480c:	2304      	movs	r3, #4
 800480e:	76fb      	strb	r3, [r7, #27]
 8004810:	e082      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004812:	2308      	movs	r3, #8
 8004814:	76fb      	strb	r3, [r7, #27]
 8004816:	e07f      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004818:	2310      	movs	r3, #16
 800481a:	76fb      	strb	r3, [r7, #27]
 800481c:	bf00      	nop
 800481e:	e07b      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <UART_SetConfig+0x314>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d120      	bne.n	800486c <UART_SetConfig+0x1fc>
 800482a:	4b53      	ldr	r3, [pc, #332]	; (8004978 <UART_SetConfig+0x308>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004830:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d00f      	beq.n	8004858 <UART_SetConfig+0x1e8>
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d802      	bhi.n	8004842 <UART_SetConfig+0x1d2>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <UART_SetConfig+0x1dc>
 8004840:	e010      	b.n	8004864 <UART_SetConfig+0x1f4>
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	d005      	beq.n	8004852 <UART_SetConfig+0x1e2>
 8004846:	2bc0      	cmp	r3, #192	; 0xc0
 8004848:	d009      	beq.n	800485e <UART_SetConfig+0x1ee>
 800484a:	e00b      	b.n	8004864 <UART_SetConfig+0x1f4>
 800484c:	2300      	movs	r3, #0
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e062      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004852:	2302      	movs	r3, #2
 8004854:	76fb      	strb	r3, [r7, #27]
 8004856:	e05f      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004858:	2304      	movs	r3, #4
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e05c      	b.n	8004918 <UART_SetConfig+0x2a8>
 800485e:	2308      	movs	r3, #8
 8004860:	76fb      	strb	r3, [r7, #27]
 8004862:	e059      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004864:	2310      	movs	r3, #16
 8004866:	76fb      	strb	r3, [r7, #27]
 8004868:	bf00      	nop
 800486a:	e055      	b.n	8004918 <UART_SetConfig+0x2a8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a45      	ldr	r2, [pc, #276]	; (8004988 <UART_SetConfig+0x318>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d124      	bne.n	80048c0 <UART_SetConfig+0x250>
 8004876:	4b40      	ldr	r3, [pc, #256]	; (8004978 <UART_SetConfig+0x308>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004884:	d012      	beq.n	80048ac <UART_SetConfig+0x23c>
 8004886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488a:	d802      	bhi.n	8004892 <UART_SetConfig+0x222>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <UART_SetConfig+0x230>
 8004890:	e012      	b.n	80048b8 <UART_SetConfig+0x248>
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x236>
 8004898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489c:	d009      	beq.n	80048b2 <UART_SetConfig+0x242>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x248>
 80048a0:	2300      	movs	r3, #0
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e038      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048a6:	2302      	movs	r3, #2
 80048a8:	76fb      	strb	r3, [r7, #27]
 80048aa:	e035      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048ac:	2304      	movs	r3, #4
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	e032      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048b2:	2308      	movs	r3, #8
 80048b4:	76fb      	strb	r3, [r7, #27]
 80048b6:	e02f      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048b8:	2310      	movs	r3, #16
 80048ba:	76fb      	strb	r3, [r7, #27]
 80048bc:	bf00      	nop
 80048be:	e02b      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <UART_SetConfig+0x300>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d124      	bne.n	8004914 <UART_SetConfig+0x2a4>
 80048ca:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <UART_SetConfig+0x308>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d8:	d012      	beq.n	8004900 <UART_SetConfig+0x290>
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	d802      	bhi.n	80048e6 <UART_SetConfig+0x276>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <UART_SetConfig+0x284>
 80048e4:	e012      	b.n	800490c <UART_SetConfig+0x29c>
 80048e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ea:	d006      	beq.n	80048fa <UART_SetConfig+0x28a>
 80048ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f0:	d009      	beq.n	8004906 <UART_SetConfig+0x296>
 80048f2:	e00b      	b.n	800490c <UART_SetConfig+0x29c>
 80048f4:	2300      	movs	r3, #0
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e00e      	b.n	8004918 <UART_SetConfig+0x2a8>
 80048fa:	2302      	movs	r3, #2
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e00b      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004900:	2304      	movs	r3, #4
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e008      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004906:	2308      	movs	r3, #8
 8004908:	76fb      	strb	r3, [r7, #27]
 800490a:	e005      	b.n	8004918 <UART_SetConfig+0x2a8>
 800490c:	2310      	movs	r3, #16
 800490e:	76fb      	strb	r3, [r7, #27]
 8004910:	bf00      	nop
 8004912:	e001      	b.n	8004918 <UART_SetConfig+0x2a8>
 8004914:	2310      	movs	r3, #16
 8004916:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <UART_SetConfig+0x300>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f040 80a1 	bne.w	8004a66 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004924:	7efb      	ldrb	r3, [r7, #27]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d836      	bhi.n	8004998 <UART_SetConfig+0x328>
 800492a:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0x2c0>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004955 	.word	0x08004955
 8004934:	08004999 	.word	0x08004999
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004999 	.word	0x08004999
 8004940:	08004963 	.word	0x08004963
 8004944:	08004999 	.word	0x08004999
 8004948:	08004999 	.word	0x08004999
 800494c:	08004999 	.word	0x08004999
 8004950:	08004991 	.word	0x08004991
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe fcaa 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004958:	6178      	str	r0, [r7, #20]
        break;
 800495a:	e022      	b.n	80049a2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <UART_SetConfig+0x31c>)
 800495e:	617b      	str	r3, [r7, #20]
        break;
 8004960:	e01f      	b.n	80049a2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7fe fc0d 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8004966:	6178      	str	r0, [r7, #20]
        break;
 8004968:	e01b      	b.n	80049a2 <UART_SetConfig+0x332>
 800496a:	bf00      	nop
 800496c:	cfff69f3 	.word	0xcfff69f3
 8004970:	40008000 	.word	0x40008000
 8004974:	40013800 	.word	0x40013800
 8004978:	40021000 	.word	0x40021000
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	40004c00 	.word	0x40004c00
 8004988:	40005000 	.word	0x40005000
 800498c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004994:	617b      	str	r3, [r7, #20]
        break;
 8004996:	e004      	b.n	80049a2 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	76bb      	strb	r3, [r7, #26]
        break;
 80049a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 811d 	beq.w	8004be4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	4a97      	ldr	r2, [pc, #604]	; (8004c0c <UART_SetConfig+0x59c>)
 80049b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b4:	461a      	mov	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d305      	bcc.n	80049da <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d902      	bls.n	80049e0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	76bb      	strb	r3, [r7, #26]
 80049de:	e101      	b.n	8004be4 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f04f 0100 	mov.w	r1, #0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	4a87      	ldr	r2, [pc, #540]	; (8004c0c <UART_SetConfig+0x59c>)
 80049ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f04f 0400 	mov.w	r4, #0
 80049f8:	461a      	mov	r2, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	f7fb fbfe 	bl	80001fc <__aeabi_uldivmod>
 8004a00:	4603      	mov	r3, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	4619      	mov	r1, r3
 8004a06:	4622      	mov	r2, r4
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	f04f 0400 	mov.w	r4, #0
 8004a10:	0214      	lsls	r4, r2, #8
 8004a12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a16:	020b      	lsls	r3, r1, #8
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6852      	ldr	r2, [r2, #4]
 8004a1c:	0852      	lsrs	r2, r2, #1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	eb13 0b01 	adds.w	fp, r3, r1
 8004a28:	eb44 0c02 	adc.w	ip, r4, r2
 8004a2c:	4658      	mov	r0, fp
 8004a2e:	4661      	mov	r1, ip
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	f7fb fbde 	bl	80001fc <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d308      	bcc.n	8004a60 <UART_SetConfig+0x3f0>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a54:	d204      	bcs.n	8004a60 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e0c1      	b.n	8004be4 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	76bb      	strb	r3, [r7, #26]
 8004a64:	e0be      	b.n	8004be4 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6e:	d164      	bne.n	8004b3a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8004a70:	7efb      	ldrb	r3, [r7, #27]
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d827      	bhi.n	8004ac6 <UART_SetConfig+0x456>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0x40c>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004ac7 	.word	0x08004ac7
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f7fe fc04 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004aa4:	6178      	str	r0, [r7, #20]
        break;
 8004aa6:	e013      	b.n	8004ad0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe fc16 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004aac:	6178      	str	r0, [r7, #20]
        break;
 8004aae:	e00f      	b.n	8004ad0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <UART_SetConfig+0x5a0>)
 8004ab2:	617b      	str	r3, [r7, #20]
        break;
 8004ab4:	e00c      	b.n	8004ad0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe fb63 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8004aba:	6178      	str	r0, [r7, #20]
        break;
 8004abc:	e008      	b.n	8004ad0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	617b      	str	r3, [r7, #20]
        break;
 8004ac4:	e004      	b.n	8004ad0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	76bb      	strb	r3, [r7, #26]
        break;
 8004ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8086 	beq.w	8004be4 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <UART_SetConfig+0x59c>)
 8004ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aea:	005a      	lsls	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d916      	bls.n	8004b34 <UART_SetConfig+0x4c4>
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0c:	d212      	bcs.n	8004b34 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f023 030f 	bic.w	r3, r3, #15
 8004b16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	89fa      	ldrh	r2, [r7, #14]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	e057      	b.n	8004be4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	76bb      	strb	r3, [r7, #26]
 8004b38:	e054      	b.n	8004be4 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b3a:	7efb      	ldrb	r3, [r7, #27]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d828      	bhi.n	8004b92 <UART_SetConfig+0x522>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x4d8>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b83 	.word	0x08004b83
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004b93 	.word	0x08004b93
 8004b68:	08004b8b 	.word	0x08004b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fe fb9e 	bl	80032ac <HAL_RCC_GetPCLK1Freq>
 8004b70:	6178      	str	r0, [r7, #20]
        break;
 8004b72:	e013      	b.n	8004b9c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fbb0 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004b78:	6178      	str	r0, [r7, #20]
        break;
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <UART_SetConfig+0x5a0>)
 8004b7e:	617b      	str	r3, [r7, #20]
        break;
 8004b80:	e00c      	b.n	8004b9c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fe fafd 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 8004b86:	6178      	str	r0, [r7, #20]
        break;
 8004b88:	e008      	b.n	8004b9c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	617b      	str	r3, [r7, #20]
        break;
 8004b90:	e004      	b.n	8004b9c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	76bb      	strb	r3, [r7, #26]
        break;
 8004b9a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d020      	beq.n	8004be4 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <UART_SetConfig+0x59c>)
 8004ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bac:	461a      	mov	r2, r3
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b0f      	cmp	r3, #15
 8004bcc:	d908      	bls.n	8004be0 <UART_SetConfig+0x570>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd4:	d204      	bcs.n	8004be0 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e001      	b.n	8004be4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004c00:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c0c:	080051f8 	.word	0x080051f8
 8004c10:	00f42400 	.word	0x00f42400

08004c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d12:	d10a      	bne.n	8004d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d68:	f7fc fa84 	bl	8001274 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d10e      	bne.n	8004d9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f82c 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e022      	b.n	8004de0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d10e      	bne.n	8004dc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f816 	bl	8004de8 <UART_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e00c      	b.n	8004de0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	603b      	str	r3, [r7, #0]
 8004df4:	4613      	mov	r3, r2
 8004df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df8:	e062      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e00:	d05e      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fc fa37 	bl	8001274 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11d      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e26:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e045      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d02e      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e70:	d126      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e8a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e00f      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d08d      	beq.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_UARTEx_DisableFifoMode+0x16>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e027      	b.n	8004f4e <HAL_UARTEx_DisableFifoMode+0x66>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e02d      	b.n	8004fce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2224      	movs	r2, #36	; 0x24
 8004f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f850 	bl	8005054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e02d      	b.n	800504a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2224      	movs	r2, #36	; 0x24
 8004ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f812 	bl	8005054 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800505c:	4a2f      	ldr	r2, [pc, #188]	; (800511c <UARTEx_SetNbDataToProcess+0xc8>)
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005066:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <UARTEx_SetNbDataToProcess+0xcc>)
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005074:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005090:	e03d      	b.n	800510e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005092:	2308      	movs	r3, #8
 8005094:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005096:	2308      	movs	r3, #8
 8005098:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	0e5b      	lsrs	r3, r3, #25
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0f5b      	lsrs	r3, r3, #29
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80050ba:	7fbb      	ldrb	r3, [r7, #30]
 80050bc:	7f3a      	ldrb	r2, [r7, #28]
 80050be:	f107 0120 	add.w	r1, r7, #32
 80050c2:	440a      	add	r2, r1
 80050c4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	7f3a      	ldrb	r2, [r7, #28]
 80050ce:	f107 0120 	add.w	r1, r7, #32
 80050d2:	440a      	add	r2, r1
 80050d4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80050d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	7f7a      	ldrb	r2, [r7, #29]
 80050e8:	f107 0120 	add.w	r1, r7, #32
 80050ec:	440a      	add	r2, r1
 80050ee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	7f7a      	ldrb	r2, [r7, #29]
 80050f8:	f107 0120 	add.w	r1, r7, #32
 80050fc:	440a      	add	r2, r1
 80050fe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005102:	fb93 f3f2 	sdiv	r3, r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800510e:	bf00      	nop
 8005110:	3724      	adds	r7, #36	; 0x24
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	080051a0 	.word	0x080051a0
 8005120:	080051a8 	.word	0x080051a8

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4e0d      	ldr	r6, [pc, #52]	; (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	; (8005160 <__libc_init_array+0x3c>)
 800512a:	1ba4      	subs	r4, r4, r6
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2500      	movs	r5, #0
 8005130:	42a5      	cmp	r5, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4e0b      	ldr	r6, [pc, #44]	; (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	; (8005168 <__libc_init_array+0x44>)
 8005138:	f000 f820 	bl	800517c <_init>
 800513c:	1ba4      	subs	r4, r4, r6
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2500      	movs	r5, #0
 8005142:	42a5      	cmp	r5, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800514c:	4798      	blx	r3
 800514e:	3501      	adds	r5, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005156:	4798      	blx	r3
 8005158:	3501      	adds	r5, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	08005218 	.word	0x08005218
 8005160:	08005218 	.word	0x08005218
 8005164:	08005218 	.word	0x08005218
 8005168:	0800521c 	.word	0x0800521c

0800516c <memset>:
 800516c:	4402      	add	r2, r0
 800516e:	4603      	mov	r3, r0
 8005170:	4293      	cmp	r3, r2
 8005172:	d100      	bne.n	8005176 <memset+0xa>
 8005174:	4770      	bx	lr
 8005176:	f803 1b01 	strb.w	r1, [r3], #1
 800517a:	e7f9      	b.n	8005170 <memset+0x4>

0800517c <_init>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr

08005188 <_fini>:
 8005188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518a:	bf00      	nop
 800518c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518e:	bc08      	pop	{r3}
 8005190:	469e      	mov	lr, r3
 8005192:	4770      	bx	lr
