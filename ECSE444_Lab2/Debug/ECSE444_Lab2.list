
ECSE444_Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800436c  0800436c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800436c  0800436c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004370  08004370  00014370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08004380  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08004380  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b57  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001592  00000000  00000000  00029b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002b128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029dc9  00000000  00000000  0002c240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000073c9  00000000  00000000  00056009  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001075b2  00000000  00000000  0005d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164984  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d0  00000000  00000000  00164a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004314 	.word	0x08004314

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08004314 	.word	0x08004314

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a84:	b088      	sub	sp, #32
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 fb2d 	bl	80010e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f916 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 fa08 	bl	8000ea4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int state = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
        {
        	//uint16_t voltage;
        	/* USER CODE END WHILE */
        	//uint16_t voltage;
        	/* USER CODE END WHILE */
    	HAL_ADC_Start(&hadc1);
 8000a98:	487f      	ldr	r0, [pc, #508]	; (8000c98 <main+0x218>)
 8000a9a:	f000 fef9 	bl	8001890 <HAL_ADC_Start>

        	if(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET ){
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	487e      	ldr	r0, [pc, #504]	; (8000c9c <main+0x21c>)
 8000aa4:	f001 ff70 	bl	8002988 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 80e7 	bne.w	8000c7e <main+0x1fe>
        		// check - is the button released
        		while(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET){}
 8000ab0:	bf00      	nop
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	4879      	ldr	r0, [pc, #484]	; (8000c9c <main+0x21c>)
 8000ab8:	f001 ff66 	bl	8002988 <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f7      	beq.n	8000ab2 <main+0x32>
        		//init state to 0
        		if(state ==0){
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 808d 	bne.w	8000be4 <main+0x164>
        			MX_ADC1_Init(1);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 f97e 	bl	8000dcc <MX_ADC1_Init>
        			tempRead = HAL_ADC_GetValue(&hadc1);
 8000ad0:	4871      	ldr	r0, [pc, #452]	; (8000c98 <main+0x218>)
 8000ad2:	f000 ff73 	bl	80019bc <HAL_ADC_GetValue>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	81fb      	strh	r3, [r7, #14]
        			tempRead *= FAC;
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fce1 	bl	80004a4 <__aeabi_i2d>
 8000ae2:	a369      	add	r3, pc, #420	; (adr r3, 8000c88 <main+0x208>)
 8000ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae8:	f7ff fd46 	bl	8000578 <__aeabi_dmul>
 8000aec:	4603      	mov	r3, r0
 8000aee:	460c      	mov	r4, r1
 8000af0:	4618      	mov	r0, r3
 8000af2:	4621      	mov	r1, r4
 8000af4:	f7ff ff52 	bl	800099c <__aeabi_d2uiz>
 8000af8:	4603      	mov	r3, r0
 8000afa:	81fb      	strh	r3, [r7, #14]
        			tempC = __HAL_ADC_CALC_TEMPERATURE(3300, tempRead, ADC_RESOLUTION_12B);
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b65      	ldr	r3, [pc, #404]	; (8000ca0 <main+0x220>)
 8000b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b0e:	099b      	lsrs	r3, r3, #6
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <main+0x224>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2264      	movs	r2, #100	; 0x64
 8000b1a:	fb02 f203 	mul.w	r2, r2, r3
 8000b1e:	4b62      	ldr	r3, [pc, #392]	; (8000ca8 <main+0x228>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	4619      	mov	r1, r3
 8000b24:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <main+0x224>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	1acb      	subs	r3, r1, r3
 8000b2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2e:	331e      	adds	r3, #30
 8000b30:	ee07 3a90 	vmov	s15, r3
 8000b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b38:	edc7 7a02 	vstr	s15, [r7, #8]
        			// * Had to use HAL_ADC_CALC_TEMPERATURE because this did not work
//        			  if(HAL_ADC_PollForConversion(&hadc1, 10000) == HAL_OK){
//        			        tempRead = HAL_ADC_GetValue(&hadc1);
//
        			       	//num = 130 - 30;
        			       	denom = TS_CAL2 - TS_CAL1;
 8000b3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ca8 <main+0x228>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <main+0x224>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b50:	edc7 7a01 	vstr	s15, [r7, #4]
        			        //delta = tempRead*FAC - TS_CAL1;
        			        //computation = 100.0/(denom);
							temperature_calc = (100.0/(denom) * (tempRead*FAC - TS_CAL1)) + 30.0;
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fcb7 	bl	80004c8 <__aeabi_f2d>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4623      	mov	r3, r4
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4951      	ldr	r1, [pc, #324]	; (8000cac <main+0x22c>)
 8000b68:	f7ff fe30 	bl	80007cc <__aeabi_ddiv>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	460c      	mov	r4, r1
 8000b70:	4625      	mov	r5, r4
 8000b72:	461c      	mov	r4, r3
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fc94 	bl	80004a4 <__aeabi_i2d>
 8000b7c:	a342      	add	r3, pc, #264	; (adr r3, 8000c88 <main+0x208>)
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	f7ff fcf9 	bl	8000578 <__aeabi_dmul>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <main+0x224>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc86 	bl	80004a4 <__aeabi_i2d>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	f7ff fb32 	bl	8000208 <__aeabi_dsub>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	f7ff fce4 	bl	8000578 <__aeabi_dmul>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <main+0x230>)
 8000bbe:	f7ff fb25 	bl	800020c <__adddf3>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	4621      	mov	r1, r4
 8000bca:	f7ff fee7 	bl	800099c <__aeabi_d2uiz>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	807b      	strh	r3, [r7, #2]
//
//
//
//        			   }

        			state = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
        			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bdc:	4835      	ldr	r0, [pc, #212]	; (8000cb4 <main+0x234>)
 8000bde:	f001 feeb 	bl	80029b8 <HAL_GPIO_WritePin>
 8000be2:	e04c      	b.n	8000c7e <main+0x1fe>
        			//HAL_ADC_Stop(&hadc1);
        			//ADC_Disable(&hadc1);


        		}
        		else if(state == 1) {
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d149      	bne.n	8000c7e <main+0x1fe>

        			MX_ADC1_Init(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f8ee 	bl	8000dcc <MX_ADC1_Init>

        			readVoltage = HAL_ADC_GetValue(&hadc1);
 8000bf0:	4829      	ldr	r0, [pc, #164]	; (8000c98 <main+0x218>)
 8000bf2:	f000 fee3 	bl	80019bc <HAL_ADC_GetValue>
 8000bf6:	ee07 0a90 	vmov	s15, r0
 8000bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bfe:	edc7 7a06 	vstr	s15, [r7, #24]
        			vrefint = readVoltage * 3.30/4096.0;
 8000c02:	69b8      	ldr	r0, [r7, #24]
 8000c04:	f7ff fc60 	bl	80004c8 <__aeabi_f2d>
 8000c08:	a321      	add	r3, pc, #132	; (adr r3, 8000c90 <main+0x210>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f7ff fcb3 	bl	8000578 <__aeabi_dmul>
 8000c12:	4603      	mov	r3, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	4618      	mov	r0, r3
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f04f 0200 	mov.w	r2, #0
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <main+0x238>)
 8000c20:	f7ff fdd4 	bl	80007cc <__aeabi_ddiv>
 8000c24:	4603      	mov	r3, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	f7ff fed6 	bl	80009dc <__aeabi_d2f>
 8000c30:	4603      	mov	r3, r0
 8000c32:	617b      	str	r3, [r7, #20]
        			vref = vrefint*4096.0/readVoltage;
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f7ff fc47 	bl	80004c8 <__aeabi_f2d>
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <main+0x238>)
 8000c40:	f7ff fc9a 	bl	8000578 <__aeabi_dmul>
 8000c44:	4603      	mov	r3, r0
 8000c46:	460c      	mov	r4, r1
 8000c48:	4625      	mov	r5, r4
 8000c4a:	461c      	mov	r4, r3
 8000c4c:	69b8      	ldr	r0, [r7, #24]
 8000c4e:	f7ff fc3b 	bl	80004c8 <__aeabi_f2d>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	4620      	mov	r0, r4
 8000c58:	4629      	mov	r1, r5
 8000c5a:	f7ff fdb7 	bl	80007cc <__aeabi_ddiv>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460c      	mov	r4, r1
 8000c62:	4618      	mov	r0, r3
 8000c64:	4621      	mov	r1, r4
 8000c66:	f7ff feb9 	bl	80009dc <__aeabi_d2f>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	613b      	str	r3, [r7, #16]
        			state = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
        			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <main+0x234>)
 8000c7a:	f001 fe9d 	bl	80029b8 <HAL_GPIO_WritePin>


        		}

        	}
        	HAL_ADC_Stop(&hadc1);
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <main+0x218>)
 8000c80:	f000 fe69 	bl	8001956 <HAL_ADC_Stop>
    	HAL_ADC_Start(&hadc1);
 8000c84:	e708      	b.n	8000a98 <main+0x18>
 8000c86:	bf00      	nop
 8000c88:	9999999a 	.word	0x9999999a
 8000c8c:	3ff19999 	.word	0x3ff19999
 8000c90:	66666666 	.word	0x66666666
 8000c94:	400a6666 	.word	0x400a6666
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	057619f1 	.word	0x057619f1
 8000ca4:	1fff75a8 	.word	0x1fff75a8
 8000ca8:	1fff75ca 	.word	0x1fff75ca
 8000cac:	40590000 	.word	0x40590000
 8000cb0:	403e0000 	.word	0x403e0000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	40b00000 	.word	0x40b00000

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0bc      	sub	sp, #240	; 0xf0
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cc6:	2244      	movs	r2, #68	; 0x44
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fb1a 	bl	8004304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2294      	movs	r2, #148	; 0x94
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fb0c 	bl	8004304 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000cec:	2000      	movs	r0, #0
 8000cee:	f001 fe9b 	bl	8002a28 <HAL_PWREx_ControlVoltageScaling>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000cf8:	f000 f924 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d0e:	2360      	movs	r3, #96	; 0x60
 8000d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d26:	233c      	movs	r3, #60	; 0x3c
 8000d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 ff14 	bl	8002b70 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d4e:	f000 f8f9 	bl	8000f44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d74:	2105      	movs	r1, #5
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fb20 	bl	80033bc <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d82:	f000 f8df 	bl	8000f44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d9c:	2318      	movs	r3, #24
 8000d9e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fd79 	bl	80038ac <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000dc0:	f000 f8c0 	bl	8000f44 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	37f0      	adds	r7, #240	; 0xf0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(int check)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000de8:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <MX_ADC1_Init+0xcc>)
 8000dea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e46:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e48:	f000 fbd8 	bl	80015fc <HAL_ADC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e52:	f000 f877 	bl	8000f44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  if (check ==1){
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <MX_ADC1_Init+0x96>
	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ADC1_Init+0xd0>)
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	e001      	b.n	8000e66 <MX_ADC1_Init+0x9a>
	  //sConfig.Rank = ADC_REGULAR_RANK_1;

  }else {
	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_ADC1_Init+0xd4>)
 8000e64:	60bb      	str	r3, [r7, #8]
	  //sConfig.Rank = ADC_REGULAR_RANK_2;

  }
//  sConfig.Channel = ADC_CHANNEL_VREFINT;
//  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e66:	2307      	movs	r3, #7
 8000e68:	613b      	str	r3, [r7, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6a:	237f      	movs	r3, #127	; 0x7f
 8000e6c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  sConfig.Offset = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_ADC1_Init+0xc8>)
 8000e7e:	f000 fdab 	bl	80019d8 <HAL_ADC_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000e88:	f000 f85c 	bl	8000f44 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END ADC1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000028 	.word	0x20000028
 8000e98:	50040000 	.word	0x50040000
 8000e9c:	80000001 	.word	0x80000001
 8000ea0:	c7520000 	.word	0xc7520000

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_GPIO_Init+0x94>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <MX_GPIO_Init+0x98>)
 8000ef2:	f001 fd61 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_GPIO_Init+0x9c>)
 8000f0c:	f001 fbaa 	bl	8002664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0x98>)
 8000f2a:	f001 fb9b 	bl	8002664 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <Error_Handler+0x6>

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_MspInit+0x44>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_MspInit+0x44>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x44>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x44>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_ADC_MspInit+0x38>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10b      	bne.n	8000fbe <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_ADC_MspInit+0x3c>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	50040000 	.word	0x50040000
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8b6 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <SystemInit+0x64>)
 800102e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <SystemInit+0x64>)
 8001034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <SystemInit+0x68>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <SystemInit+0x68>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <SystemInit+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <SystemInit+0x68>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <SystemInit+0x68>)
 8001054:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001058:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800105c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <SystemInit+0x68>)
 8001060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001064:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <SystemInit+0x68>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <SystemInit+0x68>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SystemInit+0x68>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <SystemInit+0x64>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00
 8001090:	40021000 	.word	0x40021000

08001094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001098:	f7ff ffc6 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800109c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
	ldr	r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LoopForever+0x16>)
	cmp	r2, r3
 80010be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f003 f8fb 	bl	80042bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010c6:	f7ff fcdb 	bl	8000a80 <main>

080010ca <LoopForever>:

LoopForever:
    b LoopForever
 80010ca:	e7fe      	b.n	80010ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010cc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80010d0:	08004374 	.word	0x08004374
	ldr	r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010e0:	20000094 	.word	0x20000094

080010e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC1_IRQHandler>

080010e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f001 fa83 	bl	80025fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f80e 	bl	8001118 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff ff20 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_InitTick+0x6c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_InitTick+0x70>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_InitTick+0x6c>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fa81 	bl	800264a <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10f      	bne.n	800116e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d809      	bhi.n	8001168 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800115c:	f001 fa59 	bl	8002612 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_InitTick+0x74>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e007      	b.n	8001178 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e004      	b.n	8001178 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e001      	b.n	8001178 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000090 	.word	0x20000090

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000090 	.word	0x20000090

080011d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3360      	adds	r3, #96	; 0x60
 800124a:	461a      	mov	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <LL_ADC_SetOffset+0x44>)
 800125a:	4013      	ands	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	4313      	orrs	r3, r2
 8001268:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	03fff000 	.word	0x03fff000

08001280 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3360      	adds	r3, #96	; 0x60
 800128e:	461a      	mov	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3360      	adds	r3, #96	; 0x60
 80012bc:	461a      	mov	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	615a      	str	r2, [r3, #20]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	461a      	mov	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	4413      	add	r3, r2
 8001326:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	211f      	movs	r1, #31
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	0e9b      	lsrs	r3, r3, #26
 8001340:	f003 011f 	and.w	r1, r3, #31
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3314      	adds	r3, #20
 8001370:	461a      	mov	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	0e5b      	lsrs	r3, r3, #25
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	0d1b      	lsrs	r3, r3, #20
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2107      	movs	r1, #7
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	401a      	ands	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	0d1b      	lsrs	r3, r3, #20
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013aa:	bf00      	nop
 80013ac:	371c      	adds	r7, #28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0318 	and.w	r3, r3, #24
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80013dc:	40d9      	lsrs	r1, r3
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	400b      	ands	r3, r1
 80013e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e6:	431a      	orrs	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	0007ffff 	.word	0x0007ffff

08001400 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6093      	str	r3, [r2, #8]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001438:	d101      	bne.n	800143e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800145c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001460:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001488:	d101      	bne.n	800148e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d8:	f043 0202 	orr.w	r2, r3, #2
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <LL_ADC_IsEnabled+0x18>
 8001500:	2301      	movs	r3, #1
 8001502:	e000      	b.n	8001506 <LL_ADC_IsEnabled+0x1a>
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b02      	cmp	r3, #2
 8001524:	d101      	bne.n	800152a <LL_ADC_IsDisableOngoing+0x18>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_IsDisableOngoing+0x1a>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800154c:	f043 0204 	orr.w	r2, r3, #4
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001574:	f043 0210 	orr.w	r2, r3, #16
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c2:	f043 0220 	orr.w	r2, r3, #32
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d101      	bne.n	80015ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e12d      	b.n	8001872 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fcb5 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fef1 	bl	8001424 <LL_ADC_IsDeepPowerDownEnabled>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fed7 	bl	8001400 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff0c 	bl	8001474 <LL_ADC_IsInternalRegulatorEnabled>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d113      	bne.n	800168a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fef0 	bl	800144c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <HAL_ADC_Init+0x280>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	4a83      	ldr	r2, [pc, #524]	; (8001880 <HAL_ADC_Init+0x284>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	099b      	lsrs	r3, r3, #6
 800167a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800167c:	e002      	b.n	8001684 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3b01      	subs	r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f9      	bne.n	800167e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fef0 	bl	8001474 <LL_ADC_IsInternalRegulatorEnabled>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10d      	bne.n	80016b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	f043 0210 	orr.w	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff64 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 80016c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80c8 	bne.w	8001860 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80c4 	bne.w	8001860 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e0:	f043 0202 	orr.w	r2, r3, #2
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fefd 	bl	80014ec <LL_ADC_IsEnabled>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f8:	4862      	ldr	r0, [pc, #392]	; (8001884 <HAL_ADC_Init+0x288>)
 80016fa:	f7ff fef7 	bl	80014ec <LL_ADC_IsEnabled>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	4619      	mov	r1, r3
 800170a:	485f      	ldr	r0, [pc, #380]	; (8001888 <HAL_ADC_Init+0x28c>)
 800170c:	f7ff fd60 	bl	80011d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e5b      	ldrb	r3, [r3, #25]
 8001714:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800171a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001720:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001726:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d106      	bne.n	800174c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	3b01      	subs	r3, #1
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	2b00      	cmp	r3, #0
 8001752:	d009      	beq.n	8001768 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_ADC_Init+0x290>)
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	430b      	orrs	r3, r1
 800177a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff01 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001786:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff22 	bl	80015d6 <LL_ADC_INJ_IsConversionOngoing>
 8001792:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d140      	bne.n	800181c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d13d      	bne.n	800181c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e1b      	ldrb	r3, [r3, #24]
 80017a8:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017aa:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c2:	f023 0306 	bic.w	r3, r3, #6
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d118      	bne.n	800180c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017e4:	f023 0304 	bic.w	r3, r3, #4
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017fc:	430a      	orrs	r2, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	e007      	b.n	800181c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0201 	bic.w	r2, r2, #1
 800181a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10c      	bne.n	800183e <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f023 010f 	bic.w	r1, r3, #15
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	1e5a      	subs	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	e007      	b.n	800184e <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 020f 	bic.w	r2, r2, #15
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	659a      	str	r2, [r3, #88]	; 0x58
 800185e:	e007      	b.n	8001870 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f043 0210 	orr.w	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001870:	7ffb      	ldrb	r3, [r7, #31]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000
 8001880:	053e2d63 	.word	0x053e2d63
 8001884:	50040000 	.word	0x50040000
 8001888:	50040300 	.word	0x50040300
 800188c:	fff0c007 	.word	0xfff0c007

08001890 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe73 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d14f      	bne.n	8001948 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Start+0x26>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e04b      	b.n	800194e <HAL_ADC_Start+0xbe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fd38 	bl	8002334 <ADC_Enable>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d137      	bne.n	800193e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ee:	d106      	bne.n	80018fe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	f023 0206 	bic.w	r2, r3, #6
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80018fc:	e002      	b.n	8001904 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	221c      	movs	r2, #28
 800190a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fdfe 	bl	8001538 <LL_ADC_REG_StartConversion>
 800193c:	e006      	b.n	800194c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001946:	e001      	b.n	800194c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADC_Stop+0x16>
 8001968:	2302      	movs	r3, #2
 800196a:	e023      	b.n	80019b4 <HAL_ADC_Stop+0x5e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001974:	2103      	movs	r1, #3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fc28 	bl	80021cc <ADC_ConversionStop>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d111      	bne.n	80019aa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fd2e 	bl	80023e8 <ADC_Disable>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0b6      	sub	sp, #216	; 0xd8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x22>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e3d4      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x7cc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fdbe 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 83b9 	bne.w	8002186 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	d824      	bhi.n	8001a66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	3b02      	subs	r3, #2
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d81b      	bhi.n	8001a5e <HAL_ADC_ConfigChannel+0x86>
 8001a26:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_ADC_ConfigChannel+0x54>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a45 	.word	0x08001a45
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a55 	.word	0x08001a55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	605a      	str	r2, [r3, #4]
          break;
 8001a42:	e011      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2212      	movs	r2, #18
 8001a48:	605a      	str	r2, [r3, #4]
          break;
 8001a4a:	e00d      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2218      	movs	r2, #24
 8001a50:	605a      	str	r2, [r3, #4]
          break;
 8001a52:	e009      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	605a      	str	r2, [r3, #4]
          break;
 8001a5c:	e004      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2206      	movs	r2, #6
 8001a62:	605a      	str	r2, [r3, #4]
          break;
 8001a64:	e000      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	f7ff fc47 	bl	8001308 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fd82 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001a84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fda2 	bl	80015d6 <LL_ADC_INJ_IsConversionOngoing>
 8001a92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 81c1 	bne.w	8001e22 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 81bc 	bne.w	8001e22 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff fc4e 	bl	8001360 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc08 	bl	80012e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ad2:	e00e      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6819      	ldr	r1, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f7ff fc3d 	bl	8001360 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fbf8 	bl	80012e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00a      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b24:	f7ff fb88 	bl	8001238 <LL_ADC_SetOffset>
 8001b28:	e17b      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fba5 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x17e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb9a 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	0e9b      	lsrs	r3, r3, #26
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	e01e      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x1bc>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fb8f 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001b84:	2320      	movs	r3, #32
 8001b86:	e004      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1d4>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	e018      	b.n	8001bde <HAL_ADC_ConfigChannel+0x206>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e004      	b.n	8001bde <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d106      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fb5e 	bl	80012ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb42 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10a      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x244>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fb37 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	f003 021f 	and.w	r2, r3, #31
 8001c1a:	e01e      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x282>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb2c 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c32:	fa93 f3a3 	rbit	r3, r3
 8001c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e004      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x29a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	e018      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x2cc>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e004      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fafb 	bl	80012ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2102      	movs	r1, #2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fadf 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x30a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fad4 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	e01e      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x348>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fac9 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e004      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x360>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0e9b      	lsrs	r3, r3, #26
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	e016      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x38e>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d44:	fa93 f3a3 	rbit	r3, r3
 8001d48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e004      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2102      	movs	r1, #2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa9a 	bl	80012ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa7e 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x3cc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2103      	movs	r1, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fa73 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	0e9b      	lsrs	r3, r3, #26
 8001d9e:	f003 021f 	and.w	r2, r3, #31
 8001da2:	e017      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x3fc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2103      	movs	r1, #3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fa68 	bl	8001280 <LL_ADC_GetOffsetChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dbe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x414>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	e011      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x438>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d106      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fa45 	bl	80012ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb60 	bl	80014ec <LL_ADC_IsEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8140 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	461a      	mov	r2, r3
 8001e42:	f7ff fab9 	bl	80013b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a8f      	ldr	r2, [pc, #572]	; (8002088 <HAL_ADC_ConfigChannel+0x6b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f040 8131 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x4a2>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	bf94      	ite	ls
 8001e72:	2301      	movls	r3, #1
 8001e74:	2300      	movhi	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	e019      	b.n	8001eae <HAL_ADC_ConfigChannel+0x4d6>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001e92:	2320      	movs	r3, #32
 8001e94:	e003      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	2b09      	cmp	r3, #9
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d079      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x4f6>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ecc:	e015      	b.n	8001efa <HAL_ADC_ConfigChannel+0x522>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ede:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e003      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	069b      	lsls	r3, r3, #26
 8001ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x542>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e9b      	lsrs	r3, r3, #26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	e017      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x572>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e003      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10a      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x598>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	3301      	adds	r3, #1
 8001f62:	f003 021f 	and.w	r2, r3, #31
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	051b      	lsls	r3, r3, #20
 8001f6e:	e018      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x5ca>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001f88:	2320      	movs	r3, #32
 8001f8a:	e003      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 021f 	and.w	r2, r3, #31
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	e081      	b.n	80020aa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x5ea>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0e9b      	lsrs	r3, r3, #26
 8001fb8:	3301      	adds	r3, #1
 8001fba:	069b      	lsls	r3, r3, #26
 8001fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc0:	e015      	b.n	8001fee <HAL_ADC_ConfigChannel+0x616>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e003      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	069b      	lsls	r3, r3, #26
 8001fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_ADC_ConfigChannel+0x636>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	3301      	adds	r3, #1
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2101      	movs	r1, #1
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	e017      	b.n	800203e <HAL_ADC_ConfigChannel+0x666>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	61fb      	str	r3, [r7, #28]
  return result;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	ea42 0103 	orr.w	r1, r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_ADC_ConfigChannel+0x692>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	3301      	adds	r3, #1
 8002056:	f003 021f 	and.w	r2, r3, #31
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	3b1e      	subs	r3, #30
 8002062:	051b      	lsls	r3, r3, #20
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002068:	e01e      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x6d0>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	613b      	str	r3, [r7, #16]
  return result;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d104      	bne.n	800208c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e006      	b.n	8002094 <HAL_ADC_ConfigChannel+0x6bc>
 8002086:	bf00      	nop
 8002088:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	051b      	lsls	r3, r3, #20
 80020a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a8:	430b      	orrs	r3, r1
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	6892      	ldr	r2, [r2, #8]
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7ff f956 	bl	8001360 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HAL_ADC_ConfigChannel+0x7d4>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06b      	beq.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c0:	483b      	ldr	r0, [pc, #236]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020c2:	f7ff f8ab 	bl	800121c <LL_ADC_GetCommonPathInternalCh>
 80020c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <HAL_ADC_ConfigChannel+0x7dc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d126      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d120      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <HAL_ADC_ConfigChannel+0x7e0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d156      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020f2:	4619      	mov	r1, r3
 80020f4:	482e      	ldr	r0, [pc, #184]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020f6:	f7ff f87e 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_ADC_ConfigChannel+0x7e4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	099b      	lsrs	r3, r3, #6
 8002100:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	099a      	lsrs	r2, r3, #6
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002112:	e002      	b.n	800211a <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b01      	subs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002120:	e03a      	b.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d113      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x77c>
 800212c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_ADC_ConfigChannel+0x7e0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12a      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	4619      	mov	r1, r3
 800214c:	4818      	ldr	r0, [pc, #96]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d8>)
 800214e:	f7ff f852 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002152:	e021      	b.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11c      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800215e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d111      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217c:	4619      	mov	r1, r3
 800217e:	480c      	ldr	r0, [pc, #48]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002180:	f7ff f839 	bl	80011f6 <LL_ADC_SetCommonPathInternalCh>
 8002184:	e008      	b.n	8002198 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f043 0220 	orr.w	r2, r3, #32
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80021a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	37d8      	adds	r7, #216	; 0xd8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	80080000 	.word	0x80080000
 80021b0:	50040300 	.word	0x50040300
 80021b4:	c7520000 	.word	0xc7520000
 80021b8:	50040000 	.word	0x50040000
 80021bc:	20000000 	.word	0x20000000
 80021c0:	053e2d63 	.word	0x053e2d63
 80021c4:	cb840000 	.word	0xcb840000
 80021c8:	80000001 	.word	0x80000001

080021cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f9d0 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9f1 	bl	80015d6 <LL_ADC_INJ_IsConversionOngoing>
 80021f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8090 	beq.w	8002324 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02a      	beq.n	8002268 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e5b      	ldrb	r3, [r3, #25]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d126      	bne.n	8002268 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7e1b      	ldrb	r3, [r3, #24]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d122      	bne.n	8002268 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002226:	e014      	b.n	8002252 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4a41      	ldr	r2, [pc, #260]	; (8002330 <ADC_ConversionStop+0x164>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d90d      	bls.n	800224c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e06c      	b.n	8002326 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3301      	adds	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d1e3      	bne.n	8002228 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2240      	movs	r2, #64	; 0x40
 8002266:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d014      	beq.n	8002298 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f988 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f945 	bl	8001512 <LL_ADC_IsDisableOngoing>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f964 	bl	8001560 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d014      	beq.n	80022c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff f997 	bl	80015d6 <LL_ADC_INJ_IsConversionOngoing>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f92d 	bl	8001512 <LL_ADC_IsDisableOngoing>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f973 	bl	80015ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d004      	beq.n	80022d8 <ADC_ConversionStop+0x10c>
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d105      	bne.n	80022de <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022d2:	230c      	movs	r3, #12
 80022d4:	617b      	str	r3, [r7, #20]
        break;
 80022d6:	e005      	b.n	80022e4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022d8:	2308      	movs	r3, #8
 80022da:	617b      	str	r3, [r7, #20]
        break;
 80022dc:	e002      	b.n	80022e4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022de:	2304      	movs	r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
        break;
 80022e2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022e4:	f7fe ff68 	bl	80011b8 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022ea:	e014      	b.n	8002316 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022ec:	f7fe ff64 	bl	80011b8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d90d      	bls.n	8002316 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e007      	b.n	8002326 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e3      	bne.n	80022ec <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3720      	adds	r7, #32
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	a33fffff 	.word	0xa33fffff

08002334 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f8d3 	bl	80014ec <LL_ADC_IsEnabled>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d146      	bne.n	80023da <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <ADC_Enable+0xb0>)
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0210 	orr.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e032      	b.n	80023dc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f88e 	bl	800149c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002380:	f7fe ff1a 	bl	80011b8 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002386:	e021      	b.n	80023cc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f8ad 	bl	80014ec <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f87d 	bl	800149c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023a2:	f7fe ff09 	bl	80011b8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d90d      	bls.n	80023cc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f043 0210 	orr.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e007      	b.n	80023dc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d1d6      	bne.n	8002388 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	8000003f 	.word	0x8000003f

080023e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f88c 	bl	8001512 <LL_ADC_IsDisableOngoing>
 80023fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f873 	bl	80014ec <LL_ADC_IsEnabled>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d040      	beq.n	800248e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d13d      	bne.n	800248e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030d 	and.w	r3, r3, #13
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10c      	bne.n	800243a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff f84d 	bl	80014c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2203      	movs	r2, #3
 8002430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002432:	f7fe fec1 	bl	80011b8 <HAL_GetTick>
 8002436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002438:	e022      	b.n	8002480 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e01c      	b.n	8002490 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002456:	f7fe feaf 	bl	80011b8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d90d      	bls.n	8002480 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f043 0210 	orr.w	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e007      	b.n	8002490 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e3      	bne.n	8002456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	; (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f1c3 0307 	rsb	r3, r3, #7
 800256a:	2b04      	cmp	r3, #4
 800256c:	bf28      	it	cs
 800256e:	2304      	movcs	r3, #4
 8002570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3304      	adds	r3, #4
 8002576:	2b06      	cmp	r3, #6
 8002578:	d902      	bls.n	8002580 <NVIC_EncodePriority+0x30>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3b03      	subs	r3, #3
 800257e:	e000      	b.n	8002582 <NVIC_EncodePriority+0x32>
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	401a      	ands	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	4313      	orrs	r3, r2
         );
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c8:	d301      	bcc.n	80025ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00f      	b.n	80025ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <SysTick_Config+0x40>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d6:	210f      	movs	r1, #15
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025dc:	f7ff ff8e 	bl	80024fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <SysTick_Config+0x40>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SysTick_Config+0x40>)
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000e010 	.word	0xe000e010

080025fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff47 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002624:	f7ff ff5c 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	6978      	ldr	r0, [r7, #20]
 8002630:	f7ff ff8e 	bl	8002550 <NVIC_EncodePriority>
 8002634:	4602      	mov	r2, r0
 8002636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff5d 	bl	80024fc <__NVIC_SetPriority>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffb0 	bl	80025b8 <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002672:	e166      	b.n	8002942 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8158 	beq.w	800293c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d00b      	beq.n	80026ac <HAL_GPIO_Init+0x48>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d007      	beq.n	80026ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026a0:	2b11      	cmp	r3, #17
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b12      	cmp	r3, #18
 80026aa:	d130      	bne.n	800270e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e2:	2201      	movs	r2, #1
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0201 	and.w	r2, r3, #1
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0xea>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b12      	cmp	r3, #18
 800274c:	d123      	bne.n	8002796 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	08da      	lsrs	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3208      	adds	r2, #8
 8002756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	220f      	movs	r2, #15
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4013      	ands	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0203 	and.w	r2, r3, #3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80b2 	beq.w	800293c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6613      	str	r3, [r2, #96]	; 0x60
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_GPIO_Init+0x2fc>)
 80027e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027f0:	4a5c      	ldr	r2, [pc, #368]	; (8002964 <HAL_GPIO_Init+0x300>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800281a:	d02b      	beq.n	8002874 <HAL_GPIO_Init+0x210>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_GPIO_Init+0x304>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d025      	beq.n	8002870 <HAL_GPIO_Init+0x20c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_GPIO_Init+0x308>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d01f      	beq.n	800286c <HAL_GPIO_Init+0x208>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a50      	ldr	r2, [pc, #320]	; (8002970 <HAL_GPIO_Init+0x30c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d019      	beq.n	8002868 <HAL_GPIO_Init+0x204>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a4f      	ldr	r2, [pc, #316]	; (8002974 <HAL_GPIO_Init+0x310>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_GPIO_Init+0x200>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4e      	ldr	r2, [pc, #312]	; (8002978 <HAL_GPIO_Init+0x314>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_GPIO_Init+0x1fc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4d      	ldr	r2, [pc, #308]	; (800297c <HAL_GPIO_Init+0x318>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x1f8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4c      	ldr	r2, [pc, #304]	; (8002980 <HAL_GPIO_Init+0x31c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_Init+0x1f4>
 8002854:	2307      	movs	r3, #7
 8002856:	e00e      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002858:	2308      	movs	r3, #8
 800285a:	e00c      	b.n	8002876 <HAL_GPIO_Init+0x212>
 800285c:	2306      	movs	r3, #6
 800285e:	e00a      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002860:	2305      	movs	r3, #5
 8002862:	e008      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002864:	2304      	movs	r3, #4
 8002866:	e006      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002868:	2303      	movs	r3, #3
 800286a:	e004      	b.n	8002876 <HAL_GPIO_Init+0x212>
 800286c:	2302      	movs	r3, #2
 800286e:	e002      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_GPIO_Init+0x212>
 8002874:	2300      	movs	r3, #0
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	f002 0203 	and.w	r2, r2, #3
 800287c:	0092      	lsls	r2, r2, #2
 800287e:	4093      	lsls	r3, r2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002886:	4937      	ldr	r1, [pc, #220]	; (8002964 <HAL_GPIO_Init+0x300>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002894:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028b8:	4a32      	ldr	r2, [pc, #200]	; (8002984 <HAL_GPIO_Init+0x320>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028be:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_GPIO_Init+0x320>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028e2:	4a28      	ldr	r2, [pc, #160]	; (8002984 <HAL_GPIO_Init+0x320>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e8:	4b26      	ldr	r3, [pc, #152]	; (8002984 <HAL_GPIO_Init+0x320>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_GPIO_Init+0x320>)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_GPIO_Init+0x320>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3301      	adds	r3, #1
 8002940:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae91 	bne.w	8002674 <HAL_GPIO_Init+0x10>
  }
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	48001400 	.word	0x48001400
 800297c:	48001800 	.word	0x48001800
 8002980:	48001c00 	.word	0x48001c00
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e001      	b.n	80029aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f8:	d102      	bne.n	8002a00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	e00b      	b.n	8002a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d102      	bne.n	8002a16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a14:	e000      	b.n	8002a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002a16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40007000 	.word	0x40007000

08002a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d141      	bne.n	8002aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a42:	d131      	bne.n	8002aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	4a46      	ldr	r2, [pc, #280]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a5c:	4a41      	ldr	r2, [pc, #260]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2232      	movs	r2, #50	; 0x32
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	3301      	adds	r3, #1
 8002a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a7a:	e002      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d102      	bne.n	8002a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f2      	bne.n	8002a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d158      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e057      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aae:	4a2d      	ldr	r2, [pc, #180]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ab8:	e04d      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d141      	bne.n	8002b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ace:	d131      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2232      	movs	r2, #50	; 0x32
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b06:	e002      	b.n	8002b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d102      	bne.n	8002b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f2      	bne.n	8002b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2e:	d112      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e011      	b.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b44:	e007      	b.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40007000 	.word	0x40007000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f000 bc16 	b.w	80033b0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b84:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b8e:	4b9e      	ldr	r3, [pc, #632]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80e4 	beq.w	8002d6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4c>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	f040 808b 	bne.w	8002cca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f040 8087 	bne.w	8002cca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bbc:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x64>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e3ed      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	4b8b      	ldr	r3, [pc, #556]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_RCC_OscConfig+0x7e>
 8002be4:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	e005      	b.n	8002bfa <HAL_RCC_OscConfig+0x8a>
 8002bee:	4b86      	ldr	r3, [pc, #536]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d223      	bcs.n	8002c46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fd90 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e3ce      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	4977      	ldr	r1, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4972      	ldr	r1, [pc, #456]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
 8002c44:	e025      	b.n	8002c92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	496a      	ldr	r1, [pc, #424]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fd50 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e38e      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c92:	f000 fcbf 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x29c>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	fa21 f303 	lsr.w	r3, r1, r3
 8002cae:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_OscConfig+0x2a0>)
 8002cb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cb2:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_RCC_OscConfig+0x2a4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fa2e 	bl	8001118 <HAL_InitTick>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d052      	beq.n	8002d6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	e372      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d032      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fa6b 	bl	80011b8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fa67 	bl	80011b8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e35b      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a3f      	ldr	r2, [pc, #252]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	f043 0308 	orr.w	r3, r3, #8
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	493a      	ldr	r1, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	4935      	ldr	r1, [pc, #212]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	604b      	str	r3, [r1, #4]
 8002d36:	e01a      	b.n	8002d6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a32      	ldr	r2, [pc, #200]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa38 	bl	80011b8 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fa34 	bl	80011b8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e328      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1dc>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d073      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_OscConfig+0x21c>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d10e      	bne.n	8002da4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d063      	beq.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d15f      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e305      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x24c>
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a15      	ldr	r2, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0x288>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x270>
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x288>
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x298>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f9da 	bl	80011b8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e06:	e010      	b.n	8002e2a <HAL_RCC_OscConfig+0x2ba>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	0800432c 	.word	0x0800432c
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe f9ce 	bl	80011b8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e2c2      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e2a:	4baf      	ldr	r3, [pc, #700]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x2a8>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f9be 	bl	80011b8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe f9ba 	bl	80011b8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e2ae      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e52:	4ba5      	ldr	r3, [pc, #660]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x2d0>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d060      	beq.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x310>
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d119      	bne.n	8002eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d116      	bne.n	8002eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e80:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x328>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e28b      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b93      	ldr	r3, [pc, #588]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	4990      	ldr	r1, [pc, #576]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eac:	e040      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d023      	beq.n	8002efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb6:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a8b      	ldr	r2, [pc, #556]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe f979 	bl	80011b8 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eca:	f7fe f975 	bl	80011b8 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e269      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002edc:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee8:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	497c      	ldr	r1, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e018      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efe:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f955 	bl	80011b8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f12:	f7fe f951 	bl	80011b8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e245      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f24:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d03c      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f44:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe f930 	bl	80011b8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f92c 	bl	80011b8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e220      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ef      	beq.n	8002f5c <HAL_RCC_OscConfig+0x3ec>
 8002f7c:	e01b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7e:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe f913 	bl	80011b8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f96:	f7fe f90f 	bl	80011b8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e203      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a6 	beq.w	8003110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fc8:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d118      	bne.n	800302e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3a      	ldr	r2, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003008:	f7fe f8d6 	bl	80011b8 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003010:	f7fe f8d2 	bl	80011b8 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1c6      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003022:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCC_OscConfig+0x57c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_RCC_OscConfig+0x4d8>
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003046:	e024      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d110      	bne.n	8003072 <HAL_RCC_OscConfig+0x502>
 8003050:	4b25      	ldr	r3, [pc, #148]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003060:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003070:	e00f      	b.n	8003092 <HAL_RCC_OscConfig+0x522>
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe f88d 	bl	80011b8 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe f889 	bl	80011b8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e17b      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x578>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ed      	beq.n	80030a2 <HAL_RCC_OscConfig+0x532>
 80030c6:	e01a      	b.n	80030fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe f876 	bl	80011b8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe f872 	bl	80011b8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d906      	bls.n	80030f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e164      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f0:	4ba8      	ldr	r3, [pc, #672]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e8      	bne.n	80030d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4ba3      	ldr	r3, [pc, #652]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4aa2      	ldr	r2, [pc, #648]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d03c      	beq.n	8003196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d01c      	beq.n	800315e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003124:	4b9b      	ldr	r3, [pc, #620]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800312a:	4a9a      	ldr	r2, [pc, #616]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe f840 	bl	80011b8 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313c:	f7fe f83c 	bl	80011b8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e130      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800314e:	4b91      	ldr	r3, [pc, #580]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ef      	beq.n	800313c <HAL_RCC_OscConfig+0x5cc>
 800315c:	e01b      	b.n	8003196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800315e:	4b8d      	ldr	r3, [pc, #564]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003164:	4a8b      	ldr	r2, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe f823 	bl	80011b8 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003176:	f7fe f81f 	bl	80011b8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e113      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003188:	4b82      	ldr	r3, [pc, #520]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ef      	bne.n	8003176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8107 	beq.w	80033ae <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f040 80cb 	bne.w	8003340 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031aa:	4b7a      	ldr	r3, [pc, #488]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0203 	and.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d12c      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	3b01      	subs	r3, #1
 80031ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d123      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d11b      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d113      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d109      	bne.n	8003218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	085b      	lsrs	r3, r3, #1
 8003210:	3b01      	subs	r3, #1
 8003212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	429a      	cmp	r2, r3
 8003216:	d06d      	beq.n	80032f4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d068      	beq.n	80032f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800321e:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800322a:	4b5a      	ldr	r3, [pc, #360]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0ba      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a55      	ldr	r2, [pc, #340]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003246:	f7fd ffb7 	bl	80011b8 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324e:	f7fd ffb3 	bl	80011b8 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0a7      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x828>)
 8003272:	4013      	ands	r3, r2
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800327c:	3a01      	subs	r2, #1
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	4311      	orrs	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003286:	0212      	lsls	r2, r2, #8
 8003288:	4311      	orrs	r1, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0552      	lsls	r2, r2, #21
 8003294:	4311      	orrs	r1, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800329a:	0852      	lsrs	r2, r2, #1
 800329c:	3a01      	subs	r2, #1
 800329e:	0652      	lsls	r2, r2, #25
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a6:	06d2      	lsls	r2, r2, #27
 80032a8:	430a      	orrs	r2, r1
 80032aa:	493a      	ldr	r1, [pc, #232]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a34      	ldr	r2, [pc, #208]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c8:	f7fd ff76 	bl	80011b8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd ff72 	bl	80011b8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e066      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ee:	e05e      	b.n	80033ae <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e05d      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d156      	bne.n	80033ae <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a23      	ldr	r2, [pc, #140]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4a20      	ldr	r2, [pc, #128]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003316:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003318:	f7fd ff4e 	bl	80011b8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fd ff4a 	bl	80011b8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e03e      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x7b0>
 800333e:	e036      	b.n	80033ae <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d031      	beq.n	80033aa <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003364:	f023 0303 	bic.w	r3, r3, #3
 8003368:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_OscConfig+0x824>)
 8003370:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd ff1d 	bl	80011b8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e00c      	b.n	800339c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fd ff19 	bl	80011b8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d905      	bls.n	800339c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e00d      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
 8003394:	40021000 	.word	0x40021000
 8003398:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_OscConfig+0x848>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ec      	bne.n	8003382 <HAL_RCC_OscConfig+0x812>
 80033a8:	e001      	b.n	80033ae <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e10f      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b89      	ldr	r3, [pc, #548]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d910      	bls.n	8003404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b86      	ldr	r3, [pc, #536]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 020f 	bic.w	r2, r3, #15
 80033ea:	4984      	ldr	r1, [pc, #528]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0f7      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8089 	beq.w	8003524 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d133      	bne.n	8003482 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	4b79      	ldr	r3, [pc, #484]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0e4      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800342a:	f000 f9d7 	bl	80037dc <RCC_GetSysClockFreqFromPLLSource>
 800342e:	4602      	mov	r2, r0
 8003430:	4b74      	ldr	r3, [pc, #464]	; (8003604 <HAL_RCC_ClockConfig+0x248>)
 8003432:	429a      	cmp	r2, r3
 8003434:	d955      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003442:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344a:	4a6d      	ldr	r2, [pc, #436]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e044      	b.n	80034e2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d03e      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x126>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d13a      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003474:	4a62      	ldr	r2, [pc, #392]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e02f      	b.n	80034e2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348a:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0ac      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a2:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0a0      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b2:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e098      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80034c2:	f000 f8a7 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCC_ClockConfig+0x248>)
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d909      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ce:	4b4c      	ldr	r3, [pc, #304]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4944      	ldr	r1, [pc, #272]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f4:	f7fd fe60 	bl	80011b8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fd fe5c 	bl	80011b8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	; 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e070      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4930      	ldr	r1, [pc, #192]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
 8003542:	e008      	b.n	8003556 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d105      	bne.n	8003556 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003550:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003554:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d210      	bcs.n	8003586 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f023 020f 	bic.w	r2, r3, #15
 800356c:	4923      	ldr	r1, [pc, #140]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_RCC_ClockConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e036      	b.n	80035f4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4918      	ldr	r1, [pc, #96]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4910      	ldr	r1, [pc, #64]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c4:	f000 f826 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035c8:	4601      	mov	r1, r0
 80035ca:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_RCC_ClockConfig+0x24c>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa21 f303 	lsr.w	r3, r1, r3
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x250>)
 80035e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_ClockConfig+0x254>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fd95 	bl	8001118 <HAL_InitTick>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40022000 	.word	0x40022000
 8003600:	40021000 	.word	0x40021000
 8003604:	04c4b400 	.word	0x04c4b400
 8003608:	0800432c 	.word	0x0800432c
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b0c      	cmp	r3, #12
 8003640:	d121      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d11e      	bne.n	8003686 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d107      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 8003656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e005      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003678:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003684:	e00a      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d102      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_GetSysClockFreq+0x10c>)
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e004      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d101      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <HAL_RCC_GetSysClockFreq+0x110>)
 800369a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d133      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0xaa>
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ba:	617b      	str	r3, [r7, #20]
      break;
 80036bc:	e005      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_GetSysClockFreq+0x110>)
 80036c0:	617b      	str	r3, [r7, #20]
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	617b      	str	r3, [r7, #20]
      break;
 80036c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	3301      	adds	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	fb02 f203 	mul.w	r2, r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_GetSysClockFreq+0x104>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0e5b      	lsrs	r3, r3, #25
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	3301      	adds	r3, #1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800370a:	69bb      	ldr	r3, [r7, #24]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3724      	adds	r7, #36	; 0x24
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40021000 	.word	0x40021000
 800371c:	0800433c 	.word	0x0800433c
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200

08003728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003740:	f7ff f952 	bl	80029e8 <HAL_PWREx_GetVoltageRange>
 8003744:	6178      	str	r0, [r7, #20]
 8003746:	e014      	b.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003752:	6593      	str	r3, [r2, #88]	; 0x58
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003760:	f7ff f942 	bl	80029e8 <HAL_PWREx_GetVoltageRange>
 8003764:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003778:	d10b      	bne.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b80      	cmp	r3, #128	; 0x80
 800377e:	d913      	bls.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2ba0      	cmp	r3, #160	; 0xa0
 8003784:	d902      	bls.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003786:	2302      	movs	r3, #2
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e00d      	b.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800378c:	2301      	movs	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	e00a      	b.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b7f      	cmp	r3, #127	; 0x7f
 8003796:	d902      	bls.n	800379e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003798:	2302      	movs	r3, #2
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e004      	b.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d101      	bne.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037a4:	2301      	movs	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 020f 	bic.w	r2, r3, #15
 80037b0:	4909      	ldr	r1, [pc, #36]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40022000 	.word	0x40022000

080037dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80037e6:	4b2d      	ldr	r3, [pc, #180]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d118      	bne.n	8003824 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d107      	bne.n	800380e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037fe:	4b27      	ldr	r3, [pc, #156]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e005      	b.n	800381a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800380e:	4b23      	ldr	r3, [pc, #140]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800381a:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003824:	4b1d      	ldr	r3, [pc, #116]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d002      	beq.n	800383a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003834:	2b03      	cmp	r3, #3
 8003836:	d003      	beq.n	8003840 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003838:	e005      	b.n	8003846 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800383c:	613b      	str	r3, [r7, #16]
    break;
 800383e:	e005      	b.n	800384c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003842:	613b      	str	r3, [r7, #16]
    break;
 8003844:	e002      	b.n	800384c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	613b      	str	r3, [r7, #16]
    break;
 800384a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	3301      	adds	r3, #1
 8003858:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	fb02 f203 	mul.w	r2, r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	0e5b      	lsrs	r3, r3, #25
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	3301      	adds	r3, #1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	fbb2 f3f3 	udiv	r3, r2, r3
 800388a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800388c:	683b      	ldr	r3, [r7, #0]
}
 800388e:	4618      	mov	r0, r3
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
 80038a0:	0800433c 	.word	0x0800433c
 80038a4:	00f42400 	.word	0x00f42400
 80038a8:	007a1200 	.word	0x007a1200

080038ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038b4:	2300      	movs	r3, #0
 80038b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b8:	2300      	movs	r3, #0
 80038ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03d      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d00b      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d804      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d015      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80038dc:	e01d      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80038de:	2b60      	cmp	r3, #96	; 0x60
 80038e0:	d01e      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d01c      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80038e6:	e018      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e8:	4b86      	ldr	r3, [pc, #536]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a85      	ldr	r2, [pc, #532]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f4:	e015      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fafd 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003906:	e00c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3320      	adds	r3, #32
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fbe4 	bl	80040dc <RCCEx_PLLSAI2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	74fb      	strb	r3, [r7, #19]
      break;
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003928:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003936:	4973      	ldr	r1, [pc, #460]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d042      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003958:	d00f      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800395a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395e:	d805      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d011      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003968:	d017      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800396a:	e01f      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x100>
 800396c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003970:	d01f      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d01c      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003978:	e018      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800397a:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a61      	ldr	r2, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003986:	e015      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fab4 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3320      	adds	r3, #32
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb9b 	bl	80040dc <RCCEx_PLLSAI2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	74fb      	strb	r3, [r7, #19]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ba:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	494e      	ldr	r1, [pc, #312]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7cfb      	ldrb	r3, [r7, #19]
 80039d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 809f 	beq.w	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e8:	4b46      	ldr	r3, [pc, #280]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
 8003a0a:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a26:	f7fd fbc7 	bl	80011b8 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fbc3 	bl	80011b8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a40:	e005      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d15b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d019      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9e:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd fb82 	bl	80011b8 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd fb7e 	bl	80011b8 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d902      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ace:	e006      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ec      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ade:	7cfb      	ldrb	r3, [r7, #19]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	4903      	ldr	r1, [pc, #12]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003afc:	e008      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	74bb      	strb	r3, [r7, #18]
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b10:	7c7b      	ldrb	r3, [r7, #17]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4ba0      	ldr	r3, [pc, #640]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a9f      	ldr	r2, [pc, #636]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2e:	4b9a      	ldr	r3, [pc, #616]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 0203 	bic.w	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	4996      	ldr	r1, [pc, #600]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b50:	4b91      	ldr	r3, [pc, #580]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 020c 	bic.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	498e      	ldr	r1, [pc, #568]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b72:	4b89      	ldr	r3, [pc, #548]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	4985      	ldr	r1, [pc, #532]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b94:	4b80      	ldr	r3, [pc, #512]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	497d      	ldr	r1, [pc, #500]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb6:	4b78      	ldr	r3, [pc, #480]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	4974      	ldr	r1, [pc, #464]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	496c      	ldr	r1, [pc, #432]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfa:	4b67      	ldr	r3, [pc, #412]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c08:	4963      	ldr	r1, [pc, #396]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c1c:	4b5e      	ldr	r3, [pc, #376]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2a:	495b      	ldr	r1, [pc, #364]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3e:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	4952      	ldr	r1, [pc, #328]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	494a      	ldr	r1, [pc, #296]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c82:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	4941      	ldr	r1, [pc, #260]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	4939      	ldr	r1, [pc, #228]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d028      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	4930      	ldr	r1, [pc, #192]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce4:	d106      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf0:	60d3      	str	r3, [r2, #12]
 8003cf2:	e011      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 f8f9 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d04d      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d3e:	e012      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003d40:	4b15      	ldr	r3, [pc, #84]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d46:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d4c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5e:	490e      	ldr	r1, [pc, #56]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7a:	60d3      	str	r3, [r2, #12]
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d86:	d109      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a02      	ldr	r2, [pc, #8]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e014      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f8a5 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d028      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dda:	4947      	ldr	r1, [pc, #284]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e011      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f876 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01e      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3a:	492f      	ldr	r1, [pc, #188]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f851 	bl	8003efc <RCCEx_PLLSAI1_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00b      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7a:	f023 0204 	bic.w	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	491c      	ldr	r1, [pc, #112]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e9e:	f023 0218 	bic.w	r2, r3, #24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	4913      	ldr	r1, [pc, #76]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ecc:	490a      	ldr	r1, [pc, #40]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eec:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000

08003efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f0a:	4b70      	ldr	r3, [pc, #448]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f16:	4b6d      	ldr	r3, [pc, #436]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d103      	bne.n	8003f2e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
       ||
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13f      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e03c      	b.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d00c      	beq.n	8003f56 <RCCEx_PLLSAI1_Config+0x5a>
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d013      	beq.n	8003f68 <RCCEx_PLLSAI1_Config+0x6c>
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d120      	bne.n	8003f86 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f44:	4b61      	ldr	r3, [pc, #388]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e01a      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f56:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f66:	e013      	b.n	8003f90 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f68:	4b58      	ldr	r3, [pc, #352]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f74:	4b55      	ldr	r3, [pc, #340]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d109      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f84:	e006      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8a:	e004      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003f8c:	bf00      	nop
 8003f8e:	e002      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003f94:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003f9c:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4948      	ldr	r1, [pc, #288]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8086 	bne.w	80040c2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fb6:	4b45      	ldr	r3, [pc, #276]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a44      	ldr	r2, [pc, #272]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc2:	f7fd f8f9 	bl	80011b8 <HAL_GetTick>
 8003fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc8:	e009      	b.n	8003fde <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fca:	f7fd f8f5 	bl	80011b8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	73fb      	strb	r3, [r7, #15]
        break;
 8003fdc:	e005      	b.n	8003fea <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ef      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d168      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d113      	bne.n	800401e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68d2      	ldr	r2, [r2, #12]
 8004008:	06d2      	lsls	r2, r2, #27
 800400a:	4311      	orrs	r1, r2
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6852      	ldr	r2, [r2, #4]
 8004010:	3a01      	subs	r2, #1
 8004012:	0112      	lsls	r2, r2, #4
 8004014:	430a      	orrs	r2, r1
 8004016:	492d      	ldr	r1, [pc, #180]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]
 800401c:	e02d      	b.n	800407a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d115      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004024:	4b29      	ldr	r3, [pc, #164]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800402a:	4013      	ands	r3, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6892      	ldr	r2, [r2, #8]
 8004030:	0211      	lsls	r1, r2, #8
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6912      	ldr	r2, [r2, #16]
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	3a01      	subs	r2, #1
 800403a:	0552      	lsls	r2, r2, #21
 800403c:	4311      	orrs	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6852      	ldr	r2, [r2, #4]
 8004042:	3a01      	subs	r2, #1
 8004044:	0112      	lsls	r2, r2, #4
 8004046:	430a      	orrs	r2, r1
 8004048:	4920      	ldr	r1, [pc, #128]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800404a:	4313      	orrs	r3, r2
 800404c:	610b      	str	r3, [r1, #16]
 800404e:	e014      	b.n	800407a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004056:	4013      	ands	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6892      	ldr	r2, [r2, #8]
 800405c:	0211      	lsls	r1, r2, #8
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6952      	ldr	r2, [r2, #20]
 8004062:	0852      	lsrs	r2, r2, #1
 8004064:	3a01      	subs	r2, #1
 8004066:	0652      	lsls	r2, r2, #25
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	3a01      	subs	r2, #1
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	430a      	orrs	r2, r1
 8004074:	4915      	ldr	r1, [pc, #84]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a13      	ldr	r2, [pc, #76]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 8004080:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004084:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fd f897 	bl	80011b8 <HAL_GetTick>
 800408a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800408c:	e009      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800408e:	f7fd f893 	bl	80011b8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d902      	bls.n	80040a2 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	73fb      	strb	r3, [r7, #15]
          break;
 80040a0:	e005      	b.n	80040ae <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ef      	beq.n	800408e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <RCCEx_PLLSAI1_Config+0x1d0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	07ff800f 	.word	0x07ff800f
 80040d4:	ff9f800f 	.word	0xff9f800f
 80040d8:	f9ff800f 	.word	0xf9ff800f

080040dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ea:	4b70      	ldr	r3, [pc, #448]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040f6:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0203 	and.w	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d103      	bne.n	800410e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
       ||
 800410a:	2b00      	cmp	r3, #0
 800410c:	d13f      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
 8004112:	e03c      	b.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d00c      	beq.n	8004136 <RCCEx_PLLSAI2_Config+0x5a>
 800411c:	2b03      	cmp	r3, #3
 800411e:	d013      	beq.n	8004148 <RCCEx_PLLSAI2_Config+0x6c>
 8004120:	2b01      	cmp	r3, #1
 8004122:	d120      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004124:	4b61      	ldr	r3, [pc, #388]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11d      	bne.n	800416c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004134:	e01a      	b.n	800416c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004146:	e013      	b.n	8004170 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004154:	4b55      	ldr	r3, [pc, #340]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004164:	e006      	b.n	8004174 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      break;
 800416a:	e004      	b.n	8004176 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004174:	bf00      	nop
    }

    if(status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d108      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800417c:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f023 0203 	bic.w	r2, r3, #3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4948      	ldr	r1, [pc, #288]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8086 	bne.w	80042a2 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004196:	4b45      	ldr	r3, [pc, #276]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a44      	ldr	r2, [pc, #272]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800419c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fd f809 	bl	80011b8 <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a8:	e009      	b.n	80041be <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041aa:	f7fd f805 	bl	80011b8 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d902      	bls.n	80041be <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	73fb      	strb	r3, [r7, #15]
        break;
 80041bc:	e005      	b.n	80041ca <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1ef      	bne.n	80041aa <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d168      	bne.n	80042a2 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d113      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <RCCEx_PLLSAI2_Config+0x1d4>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	0211      	lsls	r1, r2, #8
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	68d2      	ldr	r2, [r2, #12]
 80041e8:	06d2      	lsls	r2, r2, #27
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6852      	ldr	r2, [r2, #4]
 80041f0:	3a01      	subs	r2, #1
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	430a      	orrs	r2, r1
 80041f6:	492d      	ldr	r1, [pc, #180]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	614b      	str	r3, [r1, #20]
 80041fc:	e02d      	b.n	800425a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d115      	bne.n	8004230 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004204:	4b29      	ldr	r3, [pc, #164]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800420a:	4013      	ands	r3, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6892      	ldr	r2, [r2, #8]
 8004210:	0211      	lsls	r1, r2, #8
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6912      	ldr	r2, [r2, #16]
 8004216:	0852      	lsrs	r2, r2, #1
 8004218:	3a01      	subs	r2, #1
 800421a:	0552      	lsls	r2, r2, #21
 800421c:	4311      	orrs	r1, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6852      	ldr	r2, [r2, #4]
 8004222:	3a01      	subs	r2, #1
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	430a      	orrs	r2, r1
 8004228:	4920      	ldr	r1, [pc, #128]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	614b      	str	r3, [r1, #20]
 800422e:	e014      	b.n	800425a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6892      	ldr	r2, [r2, #8]
 800423c:	0211      	lsls	r1, r2, #8
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6952      	ldr	r2, [r2, #20]
 8004242:	0852      	lsrs	r2, r2, #1
 8004244:	3a01      	subs	r2, #1
 8004246:	0652      	lsls	r2, r2, #25
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	3a01      	subs	r2, #1
 8004250:	0112      	lsls	r2, r2, #4
 8004252:	430a      	orrs	r2, r1
 8004254:	4915      	ldr	r1, [pc, #84]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a13      	ldr	r2, [pc, #76]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004264:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fc ffa7 	bl	80011b8 <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800426c:	e009      	b.n	8004282 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800426e:	f7fc ffa3 	bl	80011b8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	73fb      	strb	r3, [r7, #15]
          break;
 8004280:	e005      	b.n	800428e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4903      	ldr	r1, [pc, #12]	; (80042ac <RCCEx_PLLSAI2_Config+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	07ff800f 	.word	0x07ff800f
 80042b4:	ff9f800f 	.word	0xff9f800f
 80042b8:	f9ff800f 	.word	0xf9ff800f

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0d      	ldr	r6, [pc, #52]	; (80042f4 <__libc_init_array+0x38>)
 80042c0:	4c0d      	ldr	r4, [pc, #52]	; (80042f8 <__libc_init_array+0x3c>)
 80042c2:	1ba4      	subs	r4, r4, r6
 80042c4:	10a4      	asrs	r4, r4, #2
 80042c6:	2500      	movs	r5, #0
 80042c8:	42a5      	cmp	r5, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	4e0b      	ldr	r6, [pc, #44]	; (80042fc <__libc_init_array+0x40>)
 80042ce:	4c0c      	ldr	r4, [pc, #48]	; (8004300 <__libc_init_array+0x44>)
 80042d0:	f000 f820 	bl	8004314 <_init>
 80042d4:	1ba4      	subs	r4, r4, r6
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	2500      	movs	r5, #0
 80042da:	42a5      	cmp	r5, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e4:	4798      	blx	r3
 80042e6:	3501      	adds	r5, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ee:	4798      	blx	r3
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	0800436c 	.word	0x0800436c
 80042f8:	0800436c 	.word	0x0800436c
 80042fc:	0800436c 	.word	0x0800436c
 8004300:	08004370 	.word	0x08004370

08004304 <memset>:
 8004304:	4402      	add	r2, r0
 8004306:	4603      	mov	r3, r0
 8004308:	4293      	cmp	r3, r2
 800430a:	d100      	bne.n	800430e <memset+0xa>
 800430c:	4770      	bx	lr
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
 8004312:	e7f9      	b.n	8004308 <memset+0x4>

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
